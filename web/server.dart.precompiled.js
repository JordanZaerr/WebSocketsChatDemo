// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "^") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0) descriptor[previousProperty].$reflectable = flag;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              var flag = element[prop];
              if (flag > 0) element[previousProp].$reflectable = flag;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex =  2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;

    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      f.getterStub = true;
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted) init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName) mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  if (!init.interceptedNames) init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    }
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    expand$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(receiver, f), [null, null]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(new P.ArgumentError(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(new P.ArgumentError(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(new P.ArgumentError(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(new P.StateError("No elements"));
      throw H.wrapException(new P.StateError("More than one element"));
    },
    removeRange$2: function(receiver, start, end) {
      var receiverLength;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      receiverLength = receiver.length;
      if (start < 0 || start > receiverLength)
        throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
      if (end < start || end > receiverLength)
        throw H.wrapException(P.RangeError$range(end, start, receiverLength));
      H.Lists_copy(receiver, end, receiver, start, receiverLength - end);
      this.set$length(receiver, receiverLength - (end - start));
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(new P.ArgumentError(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(new P.ArgumentError("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "^": "num/Interceptor;",
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver | other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    $not: function(receiver) {
      return ~receiver >>> 0;
    },
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i, t3;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (t3 < 0)
          H.throwExpression(P.RangeError$value(t3));
        if (t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        t3 = string.charCodeAt(t3);
        if (i >= t1)
          H.throwExpression(P.RangeError$value(i));
        if (t3 !== receiver.charCodeAt(i))
          return;
      }
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      if (pattern == null)
        H.throwExpression(new P.ArgumentError(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(new P.ArgumentError(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;_string",
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      var t1 = this._string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(new P.ArgumentError(i));
      if (typeof i !== "number")
        return i.$lt();
      if (i < 0)
        H.throwExpression(P.RangeError$value(i));
      if (i >= t1.length)
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [J.JSInt];
    },
    $asListBase: function() {
      return [J.JSInt];
    },
    $asList: function() {
      return [J.JSInt];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    var t1 = init.globalState.topEventLoop;
    t1._activeJsAsyncCount = t1._activeJsAsyncCount - 1;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(new P.ArgumentError("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState;
    t3 = t2.nextIsolateId;
    t2.nextIsolateId = t3 + 1;
    t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t3, t2, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, uri, t5, t6, worker, t7, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t2, t1, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t6 = t1.$index(msg, "startPaused");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t7 = init.globalState;
        workerId = t7.nextManagerId;
        t7.nextManagerId = workerId + 1;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, workerId);
        init.globalState.managers.$indexSet(0, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "startPaused", t6, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          t1.$index(msg, "port").send$1(t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    replyTo.send$1(["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:22;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:22;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused,delayedEvents,pauseTokens,doneHandlers,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          t2._modificationCount = t2._modificationCount + 1;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      if (J.$eq(pingType, 2))
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, new H._IsolateContext_handlePing_closure(responsePort), "ping"));
      else
        responsePort.send$1(null);
    },
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this._shutdown$0();
    },
    _shutdown$0: function() {
      init.globalState.isolates.remove$1(0, this.id);
      var t1 = this.doneHandlers;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          t1._current.send$1(null);
    }
  },
  _IsolateContext_handlePing_closure: {
    "^": "Closure:22;responsePort_0",
    call$0: function() {
      this.responsePort_0.send$1(null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1, t2, t3, t4, result;
      t1 = this.events;
      t2 = t1._head;
      if (t2 === t1._tail)
        return;
      t1._modificationCount = t1._modificationCount + 1;
      t3 = t1._table;
      t4 = t3.length;
      if (t2 >= t4)
        return H.ioore(t3, t2);
      result = t3[t2];
      t3[t2] = null;
      t1._head = (t2 + 1 & t4 - 1) >>> 0;
      return result;
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:1;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message<",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.isPaused) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:22;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:1;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(message) {
      var t1, t2, isolate, t3, shouldSerialize, msg;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$__isolate_helper$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize) {
        msg = H._serializeMessage(message);
        t1.msg_0 = msg;
        t2 = msg;
      } else
        t2 = message;
      if (isolate.get$controlPort() === t3) {
        t1 = J.getInterceptor$asx(t2);
        switch (t1.$index(t2, 0)) {
          case "pause":
            isolate.addPause$2(t1.$index(t2, 1), t1.$index(t2, 2));
            break;
          case "resume":
            isolate.removePause$1(t1.$index(t2, 1));
            break;
          case "add-ondone":
            isolate.addDoneListener$1(t1.$index(t2, 1));
            break;
          case "remove-ondone":
            isolate.removeDoneListener$1(t1.$index(t2, 1));
            break;
          case "set-errors-fatal":
            isolate.setErrorsFatal$2(t1.$index(t2, 1), t1.$index(t2, 2));
            break;
          case "ping":
            isolate.handlePing$2(t1.$index(t2, 1), t1.$index(t2, 2));
            break;
          default:
            P.print("UNKNOWN MESSAGE: " + H.S(t2));
        }
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:22;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$__isolate_helper$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,__isolate_helper$_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function() {
      var t1, t2;
      if (this.__isolate_helper$_isClosed)
        return;
      this.__isolate_helper$_isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this.__isolate_helper$_isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function() {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function() {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0();
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:23;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, id;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, id, t1, keys;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, map, id);
      t1 = map.get$keys();
      keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
      t1 = map.get$values();
      return ["map", id, keys, this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if ($.get$globalThis().setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        if (this._once)
          $.get$globalThis().clearTimeout(this._handle);
        else
          $.get$globalThis().clearInterval(this._handle);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$periodic$2: function(milliseconds, callback) {
      var t1, t2;
      t1 = $.get$globalThis();
      if (t1.setTimeout != null) {
        t2 = init.globalState.topEventLoop;
        t2._activeJsAsyncCount = t2._activeJsAsyncCount + 1;
        this._handle = t1.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2._activeJsAsyncCount = t2._activeJsAsyncCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:1;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:1;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  TimerImpl$periodic_closure: {
    "^": "Closure:22;this_0,callback_1",
    call$0: function() {
      this.callback_1.call$1(this.this_0);
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      if (typeof hash !== "number")
        return hash.$shr();
      hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(new P.ArgumentError(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (i >= digitsPart.length)
              H.throwExpression(P.RangeError$value(i));
            if (digitsPart.charCodeAt(i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(new P.ArgumentError(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(new P.ArgumentError(i));
      if (i < 0)
        throw H.wrapException(new P.ArgumentError(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getYear: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
  },
  Primitives_getMonth: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
  },
  Primitives_getDay: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
  },
  Primitives_getHours: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
  },
  Primitives_getMinutes: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
  },
  Primitives_getSeconds: function(receiver) {
    return receiver.isUtc === true ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n,S){return function(){return S(this)[n]()}}(stubName,getSelf);
      case 1:
        return function(n,S){return function(a){return S(this)[n](a)}}(stubName,getSelf);
      case 2:
        return function(n,S){return function(a,b){return S(this)[n](a,b)}}(stubName,getSelf);
      case 3:
        return function(n,S){return function(a,b,c){return S(this)[n](a,b,c)}}(stubName,getSelf);
      case 4:
        return function(n,S){return function(a,b,c,d){return S(this)[n](a,b,c,d)}}(stubName,getSelf);
      case 5:
        return function(n,S){return function(a,b,c,d,e){return S(this)[n](a,b,c,d,e)}}(stubName,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:24;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:22;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:22;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:22;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:22;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:22;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  RuntimeError: {
    "^": "Error;message<",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  initHooks_closure: {
    "^": "Closure:24;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:25;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  },
  StringMatch: {
    "^": "Object;start,input,pattern",
    $index: function(_, g) {
      if (g !== 0)
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1, t2;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i) {
      t1 = t1[i];
      t2 = iterable;
      if (t1 == null ? t2 == null : t1 === t2)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    }
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    if (start < 0 || start > list.length)
      H.throwExpression(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      H.throwExpression(P.RangeError$range(end, start, list.length));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(new P.StateError("Not enough elements"));
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i >>> 0 !== i || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i >>> 0 !== i || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >>> 0 !== i || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$last: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(new P.StateError("No elements"));
      return this.elementAt$1(0, this.get$length(this) - 1);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length = J.get$length$asx(this._iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 >= $length)
        return 0;
      return $length - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (!(index < 0)) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count));
      return H.SubListIterable$(this._iterable, this._start + count, this._endOrLength, null);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1 = this._start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1));
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this._iterable;
      return t1.get$isEmpty(t1);
    },
    get$last: function(_) {
      var t1 = this._iterable;
      return this._f$1(t1.get$last(t1));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  ExpandIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "^": "Object;_iterator,_f,_currentExpansion,_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = this._iterator; !t1.moveNext$0();) {
        this._current = null;
        if (t2.moveNext$0()) {
          this._currentExpansion = null;
          t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
          this._currentExpansion = t1;
        } else
          return false;
      }
      this._current = this._currentExpansion.get$current();
      return true;
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(P.RangeError$value(n));
      return H.SkipIterable_SkipIterable(this._iterable, this._skipCount + n, H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || t1 < 0)
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = t1.get$length(t1) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeRange$2: function(receiver, start, end) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    removeRange$2: function(_, start, end) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _invokeErrorHandler: function(errorHandler, error, stackTrace) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return errorHandler.call$2(error, stackTrace);
    else
      return errorHandler.call$1(error);
  },
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return zone.registerBinaryCallback$1(errorHandler);
    else
      return zone.registerUnaryCallback$1(errorHandler);
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.next;
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 1],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone)) {
      $.Zone__current.scheduleMicrotask$1(callback);
      return;
    }
    t1 = $.Zone__current;
    t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
  },
  Stream_Stream$fromIterable: function(data, $T) {
    return H.setRuntimeTypeInfo(new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure($T, data), false), [$T]);
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    if (onListen == null && onPause == null && onResume == null && onCancel == null)
      return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.handleUncaughtError$2(e, s);
    }

  },
  _AddStreamState_makeErrorHandler: function(controller) {
    return new P._AddStreamState_makeErrorHandler_closure(controller);
  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 2],
  _nullErrorHandler: [function(error, stackTrace) {
    $.Zone__current.handleUncaughtError$2(error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 3, 4],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 1],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createPeriodicTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createPeriodicTimer$2(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
    $self.run$1(new P._rootHandleUncaughtError_closure(error, stackTrace));
  }, "call$5", "_rootHandleUncaughtError$closure", 10, 0, 5],
  _rootRun: [function($self, $parent, zone, f) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$4", "_rootRun$closure", 8, 0, 6],
  _rootRunUnary: [function($self, $parent, zone, f, arg) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$5", "_rootRunUnary$closure", 10, 0, 7],
  _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$6", "_rootRunBinary$closure", 12, 0, 8],
  _rootRegisterCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterCallback$closure", 8, 0, 9],
  _rootRegisterUnaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterUnaryCallback$closure", 8, 0, 10],
  _rootRegisterBinaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterBinaryCallback$closure", 8, 0, 11],
  _rootScheduleMicrotask: [function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  }, "call$4", "_rootScheduleMicrotask$closure", 8, 0, 12],
  _rootCreateTimer: [function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  }, "call$5", "_rootCreateTimer$closure", 10, 0, 13],
  _rootCreatePeriodicTimer: [function($self, $parent, zone, duration, callback) {
    var milliseconds;
    if (C.C__RootZone !== zone)
      callback = zone.bindUnaryCallback$1(callback);
    milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
  }, "call$5", "_rootCreatePeriodicTimer$closure", 10, 0, 14],
  _rootPrint: [function($self, $parent, zone, line) {
    H.printString(line);
  }, "call$4", "_rootPrint$closure", 8, 0, 15],
  _printToZone: [function(line) {
    $.Zone__current.print$1(line);
  }, "call$1", "_printToZone$closure", 2, 0, 16],
  _rootFork: [function($self, $parent, zone, specification, zoneValues) {
    var copiedMap;
    $.printToZone = P._printToZone$closure();
    if (specification == null)
      specification = C._ZoneSpecification_woc;
    copiedMap = P.HashMap_HashMap(null, null, null, null, null);
    return new P._CustomizedZone(zone, specification, copiedMap);
  }, "call$5", "_rootFork$closure", 10, 0, 17],
  runZoned: function(body, onError, zoneSpecification, zoneValues) {
    var errorHandler, zone;
    errorHandler = new P.runZoned_closure(onError);
    zoneSpecification = new P._ZoneSpecification(errorHandler, null, null, null, null, null, null, null, null, null, null, null);
    zone = $.Zone__current.fork$2$specification$zoneValues(zoneSpecification, zoneValues);
    return zone.runGuarded$1(body);
  },
  _AsyncError: {
    "^": "Object;error<,stackTrace<",
    $isError: true
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(new P.ArgumentError("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(f), null, P._registerErrorHandler(onError, $.Zone__current), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, $.Zone__current.registerUnaryCallback$1(test), t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(action));
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      if (this._state >= 4)
        this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
      else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 3, 4],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      if (this._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target._state = 2;
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, sourceValue, t4, t5, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2._zone.handleUncaughtError$2(asyncError.get$error(), asyncError.get$stackTrace());
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (t2) {
            t4 = listeners._state === 2;
            if ((t4 ? null : listeners._onValueCallback) == null) {
              t5 = (t4 ? null : listeners._whenCompleteActionCallback) != null;
              t4 = t5;
            } else
              t4 = true;
          } else
            t4 = true;
          if (t4) {
            zone = listeners._zone;
            if (hasError && !t1.source_4.get$_zone().inSameErrorZone$1(zone)) {
              t2 = t1.source_4;
              asyncError = t2.get$_error();
              t2._zone.handleUncaughtError$2(asyncError.get$error(), asyncError.get$stackTrace());
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if ((listeners._state === 2 ? null : listeners._onValueCallback) != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if ((listeners._state === 2 ? null : listeners._whenCompleteActionCallback) != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners._state = 2;
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = asyncError.get$error();
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:22;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:24;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    }
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:26;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:22;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:22;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:22;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:27;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this.listener_3;
        t1 = t1._state === 2 ? null : t1._onValueCallback;
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(t1, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:1;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1._state === 2 ? null : t1._errorTestCallback;
      matchesTest = true;
      if (test != null)
        try {
          matchesTest = this.zone_7.runUnary$2(test, asyncError.get$error());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = asyncError.get$error();
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1._state === 2 ? null : t1._onErrorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, asyncError.get$error(), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, asyncError.get$error());
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = asyncError.get$error();
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:1;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, exception, t3;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.listener_9;
        t2 = t2._state === 2 ? null : t2._whenCompleteActionCallback;
        t1.completeResult_0 = this.zone_10.run$1(t2);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = this.box_2.source_4.get$_error().get$error();
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:24;box_2,listener_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:26;box_0,listener_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    expand$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._ExpandStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    transform$1: function(streamTransformer) {
      return streamTransformer.bind$1(this);
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    any$1: function(_, test) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_Stream$fromIterable_closure: {
    "^": "Closure:22;T_0,data_1",
    call$0: function() {
      return new P._IterablePendingEvents(J.get$iterator$ax(this.data_1), 0);
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:22;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:24;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:22;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_any_closure: {
    "^": "Closure;box_0,this_1,test_2,future_3",
    call$1: function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_any__closure: {
    "^": "Closure:22;test_4,element_5",
    call$0: function() {
      return this.test_4.call$1(this.element_5);
    }
  },
  Stream_any__closure0: {
    "^": "Closure:28;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    }
  },
  Stream_any_closure0: {
    "^": "Closure:22;future_7",
    call$0: function() {
      this.future_7._complete$1(false);
    }
  },
  Stream_length_closure: {
    "^": "Closure:24;box_0",
    call$1: function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }
  },
  Stream_length_closure0: {
    "^": "Closure:22;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  Stream_isEmpty_closure: {
    "^": "Closure:24;box_0,future_1",
    call$1: function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:22;future_2",
    call$0: function() {
      this.future_2._complete$1(true);
    }
  },
  Stream_last_closure: {
    "^": "Closure;box_0,this_1",
    call$1: function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure:22;box_0,future_2",
    call$0: function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    }
  },
  StreamSubscription: {
    "^": "Object;"
  },
  EventSink: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      if (state.get$varData() == null)
        state.varData = new P._StreamImplEvents(null, null, 0);
      return state.varData;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError: function(source, cancelOnError) {
      var t1, t2, t3, t4, addState;
      t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 2) !== 0)
        return P._Future$immediate(null, null);
      t1 = this._varData;
      t2 = P._Future$(null);
      t3 = this.get$_async$_add();
      t4 = cancelOnError ? P._AddStreamState_makeErrorHandler(this) : this.get$_addError();
      addState = H.setRuntimeTypeInfo(new P._StreamControllerAddStreamState(t1, t2, source.listen$4$cancelOnError$onDone$onError(t3, cancelOnError, this.get$_close(), t4)), [null]);
      t1 = this._state;
      if ((t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0)
        addState.addSubscription.pause$0();
      this._varData = addState;
      this._state = this._state | 8;
      return addState.addStreamFuture;
    },
    addStream$1: function(source) {
      return this.addStream$2$cancelOnError(source, true);
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null) {
        t1 = (this._state & 2) !== 0 ? $.get$Future__nullFuture() : P._Future$(null);
        this._doneFuture = t1;
      }
      return t1;
    },
    add$1: [function(_, value) {
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      this._async$_add$1(value);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    addError$2: [function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      this._addError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 29, 4],
    close$0: [function() {
      var t1 = this._state;
      if ((t1 & 4) !== 0) {
        this._ensureDoneFuture$0();
        return this._doneFuture;
      }
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      this._ensureDoneFuture$0();
      return this._doneFuture;
    }, "call$0", "get$close", 0, 0, 30],
    _async$_add$1: [function(value) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$_async$_add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    _addError$2: [function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace, null));
    }, "call$2", "get$_addError", 4, 0, 31],
    _close$0: [function() {
      var addState = this._varData;
      this._varData = addState.get$varData();
      this._state = this._state & 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    }, "call$0", "get$_close", 0, 0, 1],
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.addSubscription.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:22;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:1;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _NoCallbacks: {
    "^": "Object;",
    get$_onListen: function() {
      return;
    },
    get$_onPause: function() {
      return;
    },
    get$_onResume: function() {
      return;
    },
    get$_onCancel: function() {
      return;
    }
  },
  _NoCallbackAsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch0: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _NoCallbackSyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch0: {
    "^": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0();
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 1]
  },
  _AddStreamState: {
    "^": "Object;",
    pause$0: function() {
      this.addSubscription.pause$0();
    },
    resume$0: function() {
      this.addSubscription.resume$0();
    },
    cancel$0: function() {
      this.addSubscription.cancel$0();
      this.addStreamFuture._asyncComplete$1(null);
    }
  },
  _AddStreamState_makeErrorHandler_closure: {
    "^": "Closure:32;controller_0",
    call$2: function(e, s) {
      var t1 = this.controller_0;
      t1._addError$2(e, s);
      t1._close$0();
    }
  },
  _StreamControllerAddStreamState: {
    "^": "_AddStreamState;varData@,addStreamFuture,addSubscription"
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (J.get$isEmpty$asx(pendingEvents) !== true) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      if (handleData == null)
        handleData = P._nullDataHandler$closure();
      this._onData = this._zone.registerUnaryCallback$1(handleData);
    },
    onError$1: function(handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._onDone = this._zone.registerCallback$1(handleDone);
    },
    pause$1: [function(resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (resumeSignal != null)
        resumeSignal.whenComplete$1(this.get$resume());
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    }, function() {
      return this.pause$1(null);
    }, "pause$0", "call$1", "call$0", "get$pause", 0, 2, 33, 4],
    resume$0: [function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && J.get$isEmpty$asx(this._pending) !== true)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
      }
    }, "call$0", "get$resume", 0, 0, 1],
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    asFuture$1: function(futureValue) {
      var result = P._Future$(H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0));
      this._onDone = new P._BufferingStreamSubscription_asFuture_closure(futureValue, result);
      this._onError = new P._BufferingStreamSubscription_asFuture_closure0(this, result);
      return result;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      J.add$1$ax(pending, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0 && J.get$isEmpty$asx(this._pending) === true) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || J.get$isEmpty$asx(t1) === true;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription_asFuture_closure: {
    "^": "Closure:22;futureValue_0,result_1",
    call$0: function() {
      this.result_1._complete$1(this.futureValue_0);
    }
  },
  _BufferingStreamSubscription_asFuture_closure0: {
    "^": "Closure:23;this_2,result_3",
    call$2: function(error, stackTrace) {
      this.this_2.cancel$0();
      this.result_3._completeError$2(error, stackTrace);
    }
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:1;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      if (!t2.inSameErrorZone$1($.Zone__current))
        $.Zone__current.handleUncaughtError$2(this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:1;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _GeneratedStreamImpl: {
    "^": "_StreamImpl;_pending,_isUsed",
    _pending$0: function() {
      return this._pending.call$0();
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2, subscription;
      if (this._isUsed)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      this._isUsed = true;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null), [null]);
      subscription._setPendingEvents$1(this._pending$0());
      return subscription;
    }
  },
  _IterablePendingEvents: {
    "^": "_PendingEvents;_async$_iterator,_state",
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var isDone, e, s, t1, exception;
      t1 = this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(new P.StateError("No events pending."));
      isDone = null;
      try {
        isDone = !t1.moveNext$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this._async$_iterator = null;
        dispatch._sendError$2(e, s);
        return;
      }

      if (isDone !== true)
        dispatch._sendData$1(this._async$_iterator._current);
      else {
        this._async$_iterator = null;
        dispatch._sendDone$0();
      }
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value<,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error<,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:22;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:22;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:32;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:22;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    }
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    _handleError$3: function(error, stackTrace, sink) {
      sink._addError$2(error, stackTrace);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_async$_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0();
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._async$_stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      this._async$_stream._handleError$3(error, stackTrace, this);
    }, "call$2", "get$_handleError", 4, 0, 34],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 1],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._async$_stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _ExpandStream: {
    "^": "_ForwardingStream;_expand,_async$_source",
    _expand$1: function(arg0) {
      return this._expand.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var value, e, s, t1, exception;
      try {
        for (t1 = J.get$iterator$ax(this._expand$1(inputEvent)); t1.moveNext$0();) {
          value = t1.get$current();
          sink._async$_add$1(value);
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
      }

    }
  },
  _HandleErrorStream: {
    "^": "_ForwardingStream;_transform,_test,_async$_source",
    _handleError$3: function(error, stackTrace, sink) {
      var matches, e, s, exception, t1, t2;
      matches = true;
      if (matches === true)
        try {
          P._invokeErrorHandler(this._transform, error, stackTrace);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = e;
          t2 = error;
          if (t1 == null ? t2 == null : t1 === t2)
            sink._addError$2(error, stackTrace);
          else
            sink._addError$2(e, s);
          return;
        }

      else
        sink._addError$2(error, stackTrace);
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      var t1 = this._remaining;
      if (t1 > 0) {
        this._remaining = t1 - 1;
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(new P.ArgumentError(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _EventSinkWrapper: {
    "^": "Object;_async$_sink",
    add$1: [function(_, data) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._async$_add$1.call(t1, data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T0", void: true, args: [T]};
      }, this.$receiver, "_EventSinkWrapper");
    }],
    addError$2: function(error, stackTrace) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._addError$2.call(t1, error, stackTrace);
    },
    close$0: function() {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._close$0.call(t1);
    }
  },
  _SinkTransformerStreamSubscription: {
    "^": "_BufferingStreamSubscription;_transformerSink,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        throw H.wrapException(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        throw H.wrapException(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      var e, s, exception, t1;
      try {
        J.add$1$ax(this._transformerSink, data);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if ((this._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        P._BufferingStreamSubscription.prototype._addError$2.call(this, e, s);
      }

    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S0", void: true, args: [S]};
      }, this.$receiver, "_SinkTransformerStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      var e, s, exception, t1, t2;
      try {
        this._transformerSink.addError$2(error, stackTrace);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = e;
        t2 = error;
        if (t1 == null ? t2 == null : t1 === t2) {
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
        } else {
          if ((this._state & 2) !== 0)
            H.throwExpression(new P.StateError("Stream is already closed"));
          P._BufferingStreamSubscription.prototype._addError$2.call(this, e, s);
        }
      }

    }, function(error) {
      return this._handleError$2(error, null);
    }, "_handleError$1", "call$2", "call$1", "get$_handleError", 2, 2, 35, 4],
    _handleDone$0: [function() {
      var e, s, exception, t1;
      try {
        this._subscription = null;
        this._transformerSink.close$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if ((this._state & 2) !== 0)
          H.throwExpression(new P.StateError("Stream is already closed"));
        P._BufferingStreamSubscription.prototype._addError$2.call(this, e, s);
      }

    }, "call$0", "get$_handleDone", 0, 0, 1],
    _SinkTransformerStreamSubscription$3: function(source, mapper, cancelOnError, $S, $T) {
      var t1, t2;
      this._transformerSink = mapper.call$1(H.setRuntimeTypeInfo(new P._EventSinkWrapper(this), [$T]));
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _BoundSinkStream: {
    "^": "Stream;_sinkMapper,_async$_stream",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, subscription;
      cancelOnError = true === cancelOnError;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._SinkTransformerStreamSubscription(null, null, null, null, null, t1, t2, null, null), [null, null]);
      subscription._SinkTransformerStreamSubscription$3(this._async$_stream, this._sinkMapper, cancelOnError, null, null);
      subscription.onData$1(onData);
      subscription.onError$1(onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  Timer: {
    "^": "Object;"
  },
  ZoneSpecification: {
    "^": "Object;"
  },
  _ZoneSpecification: {
    "^": "Object;handleUncaughtError<,run<,runUnary<,runBinary<,registerCallback<,registerUnaryCallback<,registerBinaryCallback<,scheduleMicrotask<,createTimer<,createPeriodicTimer<,print<,fork<",
    handleUncaughtError$3: function(arg0, arg1, arg2) {
      return this.handleUncaughtError.call$3(arg0, arg1, arg2);
    },
    handleUncaughtError$2: function(arg0, arg1) {
      return this.handleUncaughtError.call$2(arg0, arg1);
    },
    run$1: function(arg0) {
      return this.run.call$1(arg0);
    },
    runUnary$2: function(arg0, arg1) {
      return this.runUnary.call$2(arg0, arg1);
    },
    runBinary$3: function(arg0, arg1, arg2) {
      return this.runBinary.call$3(arg0, arg1, arg2);
    },
    registerCallback$1: function(arg0) {
      return this.registerCallback.call$1(arg0);
    },
    registerUnaryCallback$1: function(arg0) {
      return this.registerUnaryCallback.call$1(arg0);
    },
    registerBinaryCallback$1: function(arg0) {
      return this.registerBinaryCallback.call$1(arg0);
    },
    scheduleMicrotask$1: function(arg0) {
      return this.scheduleMicrotask.call$1(arg0);
    },
    createTimer$2: function(arg0, arg1) {
      return this.createTimer.call$2(arg0, arg1);
    },
    createPeriodicTimer$2: function(arg0, arg1) {
      return this.createPeriodicTimer.call$2(arg0, arg1);
    },
    print$1: function(arg0) {
      return this.print.call$1(arg0);
    },
    fork$2$specification$zoneValues: function(arg0, arg1) {
      return this.fork.call$2$specification$zoneValues(arg0, arg1);
    }
  },
  ZoneDelegate: {
    "^": "Object;"
  },
  Zone: {
    "^": "Object;"
  },
  _ZoneDelegate: {
    "^": "Object;_degelationTarget",
    get$_zone: function() {
      return this._degelationTarget;
    },
    handleUncaughtError$3: function(zone, error, stackTrace) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$handleUncaughtError() == null;)
        $parent = $parent.get$parent();
      return t1.get$handleUncaughtError().call$5($parent, new P._ZoneDelegate($parent.get$parent()), zone, error, stackTrace);
    },
    run$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$run() == null;)
        $parent = $parent.get$parent();
      return t1.get$run().call$4($parent, new P._ZoneDelegate($parent.get$parent()), zone, f);
    },
    runUnary$3: function(zone, f, arg) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$runUnary() == null;)
        $parent = $parent.get$parent();
      return t1.get$runUnary().call$5($parent, new P._ZoneDelegate($parent.get$parent()), zone, f, arg);
    },
    runBinary$4: function(zone, f, arg1, arg2) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$runBinary() == null;)
        $parent = $parent.get$parent();
      return t1.get$runBinary().call$6($parent, new P._ZoneDelegate($parent.get$parent()), zone, f, arg1, arg2);
    },
    registerCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerCallback(), t1 == null;)
        $parent = $parent.get$parent();
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent()), zone, f);
    },
    registerUnaryCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerUnaryCallback(), t1 == null;)
        $parent = $parent.get$parent();
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent()), zone, f);
    },
    registerBinaryCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerBinaryCallback(), t1 == null;)
        $parent = $parent.get$parent();
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent()), zone, f);
    },
    scheduleMicrotask$2: function(zone, f) {
      var $parent, t1, t2;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$scheduleMicrotask() == null;)
        $parent = $parent.get$parent();
      t2 = $parent.get$parent();
      t1.get$scheduleMicrotask().call$4($parent, new P._ZoneDelegate(t2), zone, f);
    },
    createTimer$3: function(zone, duration, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$createTimer() == null;)
        $parent = $parent.get$parent();
      return t1.get$createTimer().call$5($parent, new P._ZoneDelegate($parent.get$parent()), zone, duration, f);
    },
    createPeriodicTimer$3: function(zone, period, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$createPeriodicTimer() == null;)
        $parent = $parent.get$parent();
      return t1.get$createPeriodicTimer().call$5($parent, new P._ZoneDelegate($parent.get$parent()), zone, period, f);
    },
    print$2: function(zone, line) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$print() == null;)
        $parent = $parent.get$parent();
      t1.get$print().call$4($parent, new P._ZoneDelegate($parent.get$parent()), zone, line);
    },
    fork$3: function(zone, specification, zoneValues) {
      var $parent, t1, t2;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$fork() == null;)
        $parent = $parent.get$parent();
      t2 = $parent.get$parent();
      return t1.get$fork().call$5($parent, new P._ZoneDelegate(t2), zone, specification, zoneValues);
    }
  },
  _BaseZone: {
    "^": "Object;",
    inSameErrorZone$1: function(otherZone) {
      return this.get$_errorZone() === otherZone.get$_errorZone();
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$runGuarded(f, true);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:22;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:22;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:24;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:24;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _CustomizedZone: {
    "^": "_BaseZone;parent<,_specification<,_map",
    get$_errorZone: function() {
      if (this._specification.handleUncaughtError != null)
        return this;
      return this.parent.get$_errorZone();
    },
    $index: function(_, key) {
      var t1, result;
      t1 = this._map;
      result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      return this.parent.$index(0, key);
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return new P._ZoneDelegate(this).handleUncaughtError$3(this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return new P._ZoneDelegate(this).fork$3(this, specification, zoneValues);
    },
    run$1: function(f) {
      return new P._ZoneDelegate(this).run$2(this, f);
    },
    runUnary$2: function(f, arg) {
      return new P._ZoneDelegate(this).runUnary$3(this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return new P._ZoneDelegate(this).runBinary$4(this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerCallback$2(this, f);
    },
    registerUnaryCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
    },
    registerBinaryCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerBinaryCallback$2(this, f);
    },
    scheduleMicrotask$1: function(f) {
      new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
    },
    createTimer$2: function(duration, f) {
      return new P._ZoneDelegate(this).createTimer$3(this, duration, f);
    },
    createPeriodicTimer$2: function(duration, f) {
      return new P._ZoneDelegate(this).createPeriodicTimer$3(this, duration, f);
    },
    print$1: function(line) {
      new P._ZoneDelegate(this).print$2(this, line);
    }
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:22;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:22;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _rootFork_closure: {
    "^": "Closure:23;copiedMap_0",
    call$2: function(key, value) {
      this.copiedMap_0.$indexSet(0, key, value);
    }
  },
  _RootZoneSpecification: {
    "^": "Object;",
    get$handleUncaughtError: function() {
      return P._rootHandleUncaughtError$closure();
    },
    handleUncaughtError$3: function(arg0, arg1, arg2) {
      return this.get$handleUncaughtError().call$3(arg0, arg1, arg2);
    },
    handleUncaughtError$2: function(arg0, arg1) {
      return this.get$handleUncaughtError().call$2(arg0, arg1);
    },
    get$run: function() {
      return P._rootRun$closure();
    },
    run$1: function(arg0) {
      return this.get$run().call$1(arg0);
    },
    get$runUnary: function() {
      return P._rootRunUnary$closure();
    },
    runUnary$2: function(arg0, arg1) {
      return this.get$runUnary().call$2(arg0, arg1);
    },
    get$runBinary: function() {
      return P._rootRunBinary$closure();
    },
    runBinary$3: function(arg0, arg1, arg2) {
      return this.get$runBinary().call$3(arg0, arg1, arg2);
    },
    get$registerCallback: function() {
      return P._rootRegisterCallback$closure();
    },
    registerCallback$1: function(arg0) {
      return this.get$registerCallback().call$1(arg0);
    },
    get$registerUnaryCallback: function() {
      return P._rootRegisterUnaryCallback$closure();
    },
    registerUnaryCallback$1: function(arg0) {
      return this.get$registerUnaryCallback().call$1(arg0);
    },
    get$registerBinaryCallback: function() {
      return P._rootRegisterBinaryCallback$closure();
    },
    registerBinaryCallback$1: function(arg0) {
      return this.get$registerBinaryCallback().call$1(arg0);
    },
    get$scheduleMicrotask: function() {
      return P._rootScheduleMicrotask$closure();
    },
    scheduleMicrotask$1: function(arg0) {
      return this.get$scheduleMicrotask().call$1(arg0);
    },
    get$createTimer: function() {
      return P._rootCreateTimer$closure();
    },
    createTimer$2: function(arg0, arg1) {
      return this.get$createTimer().call$2(arg0, arg1);
    },
    get$createPeriodicTimer: function() {
      return P._rootCreatePeriodicTimer$closure();
    },
    createPeriodicTimer$2: function(arg0, arg1) {
      return this.get$createPeriodicTimer().call$2(arg0, arg1);
    },
    get$print: function() {
      return P._rootPrint$closure();
    },
    print$1: function(arg0) {
      return this.get$print().call$1(arg0);
    },
    get$fork: function() {
      return P._rootFork$closure();
    },
    fork$2$specification$zoneValues: function(arg0, arg1) {
      return this.get$fork().call$2$specification$zoneValues(arg0, arg1);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    get$parent: function() {
      return;
    },
    get$_specification: function() {
      return C.C__RootZoneSpecification;
    },
    get$_errorZone: function() {
      return this;
    },
    inSameErrorZone$1: function(otherZone) {
      return otherZone.get$_errorZone() === this;
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(this, null, this, specification, zoneValues);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    },
    registerBinaryCallback$1: function(f) {
      return f;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(this, null, this, f);
    },
    createTimer$2: function(duration, f) {
      return P._rootCreateTimer(this, null, this, duration, f);
    },
    createPeriodicTimer$2: function(duration, f) {
      return P._rootCreatePeriodicTimer(this, null, this, duration, f);
    },
    print$1: function(line) {
      H.printString(line);
      return;
    }
  },
  runZoned_closure: {
    "^": "Closure:36;onError_0",
    call$5: function($self, $parent, zone, error, stackTrace) {
      var e, s, t1, t2, exception;
      try {
        t1 = this.onError_0;
        t2 = H.getDynamicRuntimeType();
        t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t2) {
          t1 = $self.get$parent().runBinary$3(t1, error, stackTrace);
          return t1;
        }
        t1 = $self.get$parent().runUnary$2(t1, error);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = e;
        t2 = error;
        if (t1 == null ? t2 == null : t1 === t2)
          return $parent.handleUncaughtError$3(zone, error, stackTrace);
        else
          return $parent.handleUncaughtError$3(zone, e, s);
      }

    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 18],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 19],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              t1 = J.get$length$asx(parts.pop());
              if (typeof t1 !== "number")
                return t1.$add();
              $length -= t1 + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      t1 = J.get$length$asx(parts.pop());
      if (typeof t1 !== "number")
        return t1.$add();
      $length -= t1 + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2, t3;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i) {
      t2 = t2[i];
      t3 = m;
      if (t2 == null ? t3 == null : t2 === t3)
        return "{...}";
    }
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function() {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index;
      if (key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return bucket.splice(index, 2)[1];
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__getTableEntry: function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, _HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:24;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_collection$_map",
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._collection$_map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_collection$_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._collection$_map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function() {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var nums, rest;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_collection$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_collection$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_collection$_value();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._collection$_value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:24;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_collection$_map",
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._collection$_map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._collection$_map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_collection$_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._collection$_map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        this._collection$_length = this._collection$_length + 1;
        this._elements = null;
        return true;
      }
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(new P.StateError("No elements"));
      return t1.get$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  LinkedHashSetCell: {
    "^": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isEfficientLength: true
  },
  IterableBase: {
    "^": "Object;",
    expand$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(this, f), [H.getRuntimeTypeArgument(this, "IterableBase", 0), null]);
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    any$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (f.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(new P.StateError("No elements"));
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  LinkedList: {
    "^": "IterableBase;_modificationCount,_collection$_length,_next@,_previous@",
    add$1: function(_, entry) {
      this._insertAfter$2(this._previous, entry);
    },
    remove$1: function(_, entry) {
      if (entry._list !== this)
        return false;
      this._unlink$1(entry);
      return true;
    },
    get$iterator: function(_) {
      return new P._LinkedListIterator(this, this._modificationCount, null, this._next);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$last: function(_) {
      var t1 = this._previous;
      if (t1 === this)
        throw H.wrapException(new P.StateError("No such element"));
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, current;
      modificationCount = this._modificationCount;
      current = this._next;
      for (; current !== this;) {
        action.call$1(current);
        if (modificationCount !== this._modificationCount)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        current = current.get$_next();
      }
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    _insertAfter$2: function(entry, newEntry) {
      var successor;
      if (newEntry.get$list() != null)
        throw H.wrapException(P.StateError$("LinkedListEntry is already in a LinkedList"));
      this._modificationCount = this._modificationCount + 1;
      newEntry._list = this;
      successor = entry.get$_next();
      successor.set$_previous(newEntry);
      newEntry._previous = entry;
      newEntry._next = successor;
      entry.set$_next(newEntry);
      this._collection$_length = this._collection$_length + 1;
    },
    _unlink$1: function(entry) {
      this._modificationCount = this._modificationCount + 1;
      entry._next.set$_previous(entry._previous);
      entry._previous.set$_next(entry._next);
      this._collection$_length = this._collection$_length - 1;
      entry._previous = null;
      entry._next = null;
      entry._list = null;
    }
  },
  _LinkedListIterator: {
    "^": "Object;_list,_modificationCount,_collection$_current,_next",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._next;
      t2 = this._list;
      if (t1 === t2) {
        this._collection$_current = null;
        return false;
      }
      if (this._modificationCount !== t2._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      this._collection$_current = t1;
      this._next = t1.get$_next();
      return true;
    }
  },
  LinkedListEntry: {
    "^": "Object;_next@,_previous@",
    get$list: function() {
      return this._list;
    },
    get$next: function() {
      var t1, t2;
      t1 = this._next;
      t2 = this._list;
      if (t1 == null ? t2 == null : t1 === t2)
        return;
      return t1;
    }
  },
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(new P.StateError("No elements"));
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    expand$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(receiver, f), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0), null]);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    _rangeCheck$2: function(receiver, start, end) {
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (typeof end !== "number")
        return end.$lt();
      if (end < start || end > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      if (end == null)
        end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    removeRange$2: function(receiver, start, end) {
      var $length;
      this._rangeCheck$2(receiver, start, end);
      $length = end - start;
      this.setRange$4(receiver, start, this.get$length(receiver) - $length, receiver, end);
      this.set$length(receiver, this.get$length(receiver) - $length);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t1, otherStart, otherList, i;
      if (start < 0 || start > this.get$length(receiver))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (end < start || end > this.get$length(receiver))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = end - start;
      if ($length === 0)
        return;
      if (skipCount < 0)
        throw H.wrapException(new P.ArgumentError(skipCount));
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t1.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(new P.StateError("Not enough elements"));
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    indexOf$2: function(receiver, element, startIndex) {
      var i;
      if (startIndex >= this.get$length(receiver))
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (this.$index(receiver, i) === element)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:23;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$last: function(_) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(new P.StateError("No elements"));
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  Encoding_getByName: function($name) {
    if ($name == null)
      return;
    $name = J.toLowerCase$0$s($name);
    return $.get$Encoding__nameToEncoding().$index(0, $name);
  },
  AsciiCodec: {
    "^": "Encoding;_allowInvalid",
    get$name: function() {
      return "us-ascii";
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    }
  },
  _UnicodeSubsetEncoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, result, t3, i, codeUnit;
      t1 = string.length;
      t2 = Array(t1);
      t2.fixed$length = init;
      result = H.setRuntimeTypeInfo(t2, [J.JSInt]);
      for (t2 = result.length, t3 = ~this._subsetMask, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(string, i);
        if ((codeUnit & t3) !== 0)
          throw H.wrapException(new P.ArgumentError("String contains invalid characters."));
        if (i >= t2)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  },
  AsciiEncoder: {
    "^": "_UnicodeSubsetEncoder;_subsetMask"
  },
  ByteConversionSink: {
    "^": "ChunkedConversionSink;",
    $isByteConversionSink: true,
    $asChunkedConversionSink: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  ByteConversionSinkBase: {
    "^": "ByteConversionSink;"
  },
  _ByteAdapterSink: {
    "^": "ByteConversionSinkBase;_convert$_sink",
    add$1: function(_, chunk) {
      return this._convert$_sink.add$1(0, chunk);
    },
    close$0: function() {
      return this._convert$_sink.close$0();
    }
  },
  ChunkedConversionSink: {
    "^": "Object;"
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;"
  },
  Latin1Codec: {
    "^": "Encoding;_allowInvalid",
    get$name: function() {
      return "iso-8859-1";
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    }
  },
  Latin1Encoder: {
    "^": "_UnicodeSubsetEncoder;_subsetMask"
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function() {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder;
      t1 = string.length;
      t2 = Array(t1 * 3);
      t2.fixed$length = init;
      t2 = H.setRuntimeTypeInfo(t2, [J.JSInt]);
      encoder = new P._Utf8Encoder(0, 0, t2);
      if (encoder._fillBuffer$3(string, 0, t1) !== t1)
        encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, t1 - 1), 0);
      return C.JSArray_methods.sublist$2(t2, 0, encoder._bufferIndex);
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_convert$_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._convert$_buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = (J.codeUnitAt$1$s(str, end - 1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        --end;
      }
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._convert$_buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (stringIndex0 >= str.length)
            H.throwExpression(P.RangeError$value(stringIndex0));
          if (this._writeSurrogate$2(codeUnit, str.charCodeAt(stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, decoder;
      buffer = P.StringBuffer$("");
      decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      decoder.flush$0();
      return buffer._contents;
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    close$0: function() {
      this.flush$0();
    },
    flush$0: function() {
      if (this._expectedUnits > 0) {
        if (this._allowMalformed !== true)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
        this._stringSink.write$1(P.String_String$fromCharCode(65533));
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var t1, value, expectedUnits, extraUnits, t2, t3, t4, t5, i, unit, t6, charCodes, i0, to;
      t1 = {};
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      t1.singleBytesCount_0 = 0;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t2 = new P._Utf8Decoder_convert_addSingleBytes(t1, this, codeUnits);
      $loop$0:
        for (t3 = this._stringSink, t4 = this._allowMalformed !== true, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$in(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16)));
                  this._isFirstCharacter = false;
                  charCodes = P.List_List$filled(1, 65533, J.JSInt);
                  t6 = H.Primitives_stringFromCharCodes(charCodes);
                  t3._contents = t3._contents + t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              t6 = C.List_127_2047_65535_1114111[t6];
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (value <= t6) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                charCodes = P.List_List$filled(1, value, J.JSInt);
                t6 = H.Primitives_stringFromCharCodes(charCodes);
                t3._contents = t3._contents + t6;
              }
              this._isFirstCharacter = false;
            }
          }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          for (; i < endIndex; i = i0) {
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0)) {
              t6 = t1.singleBytesCount_0;
              if (t6 > 0) {
                to = i0 - 1;
                t2.call$2(to - t6, to);
              }
              if (t4) {
                if (typeof unit !== "number")
                  return unit.$negate();
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSNumber_methods.toRadixString$1(-unit, 16)));
              }
              charCodes = P.List_List$filled(1, 65533, J.JSInt);
              t6 = H.Primitives_stringFromCharCodes(charCodes);
              t3._contents = t3._contents + t6;
            } else if (t6.$le(unit, 127)) {
              this._isFirstCharacter = false;
              t1.singleBytesCount_0 = t1.singleBytesCount_0 + 1;
            } else {
              t6 = t1.singleBytesCount_0;
              if (t6 > 0) {
                to = i0 - 1;
                t2.call$2(to - t6, to);
              }
              if (typeof unit !== "number")
                return unit.$and();
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSNumber_methods.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              charCodes = P.List_List$filled(1, 65533, J.JSInt);
              t6 = H.Primitives_stringFromCharCodes(charCodes);
              t3._contents = t3._contents + t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      t1 = t1.singleBytesCount_0;
      if (t1 > 0)
        t2.call$2(i - t1, endIndex);
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:37;box_0,this_1,codeUnits_2",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && to === J.get$length$asx(this.codeUnits_2);
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
      this.box_0.singleBytesCount_0 = 0;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Error_safeToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 20],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 21],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line, t1;
    line = H.S(object);
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  String_String$fromCharCode: function(charCode) {
    return P.String_String$fromCharCodes(P.List_List$filled(1, charCode, J.JSInt));
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:38;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  DateTime: {
    "^": "Object;",
    $isDateTime: true
  },
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, C.JSInt_methods.$sub(this._duration, other.get$_duration()), 0, 0, 0);
    },
    $mul: function(_, factor) {
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $lt: function(_, other) {
      return C.JSInt_methods.$lt(this._duration, other.get$_duration());
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $le: function(_, other) {
      return C.JSInt_methods.$le(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:39;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:39;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message<",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    $isArgumentError: true,
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "^": "Error;message<",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message<",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message<",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + P.Error_safeToString(this.modifiedObject) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message<",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message<",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    $isFormatException: true,
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  Expando: {
    "^": "Object;name<",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Iterator: {
    "^": "Object;"
  },
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StackTrace: {
    "^": "Object;"
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$host: function() {
      if (C.JSString_methods.startsWith$1(this._host, "[")) {
        var t1 = this._host;
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      }
      return this._host;
    },
    get$port: function() {
      if (J.$eq(this._port, 0)) {
        var t1 = this.scheme;
        if (t1 === "http")
          return 80;
        if (t1 === "https")
          return 443;
      }
      return this._port;
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && true)
        return "";
      t1 = !t1;
      if (t1)
        ;
      result = t1 ? P.Uri__normalize(path) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
      if ((this.get$host() !== "" || this.scheme === "file") && result.length !== 0 && !C.JSString_methods.startsWith$1(result, "/"))
        return "/" + result;
      return result;
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (this.get$host() !== "" || t1 === "file") {
        sb.write$1("//");
        t1 = this.userInfo;
        if ("" !== t1) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        sb.write$1(this._host);
        if (!J.$eq(this._port, 0)) {
          sb.write$1(":");
          sb.write$1(J.toString$0(this._port));
        }
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isUri)
        return false;
      if (this.scheme === other.scheme)
        if (this.userInfo === other.userInfo)
          if (this.get$host() === other.get$host())
            if (J.$eq(this.get$port(), other.get$port())) {
              t1 = this._path;
              t2 = other._path;
              t1 = (t1 == null ? t2 == null : t1 === t2) && this.query === other.query && this.fragment === other.fragment;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(), t1.call$2(this.get$port(), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      if (scheme === "http" && J.$eq(port, 80))
        this._port = 0;
      else if (scheme === "https" && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__regNameTable,Uri__pathCharTable,Uri__queryCharTable", Uri_parse: function(uri) {
        var port, portStr, t1, t2, $length, index, schemeEndIndex, index0, codeUnit, t3, authorityEndIndex, portIndex, userInfoEndIndex, authorityEndIndex0, pathEndIndex, pathEndIndex0, queryEndIndex, queryEndIndex0, scheme, startIndex, userInfo, exception, host, path, query, fragment;
        t1 = new P.Uri_parse_isRegName();
        t2 = new P.Uri_parse_ipV6Address(uri);
        $length = uri.length;
        if ($length === 0)
          return P.Uri$("", "", null, null, 0, null, null, null, "");
        if (0 >= $length)
          H.throwExpression(P.RangeError$value(0));
        if (uri.charCodeAt(0) !== 47)
          for (index = 0; schemeEndIndex = 0, index < $length; index = index0) {
            index0 = index + 1;
            if (index >= $length)
              H.throwExpression(P.RangeError$value(index));
            codeUnit = uri.charCodeAt(index);
            if (codeUnit < 128) {
              t3 = codeUnit >>> 4;
              if (t3 >= 8)
                return H.ioore(C.List_JYB, t3);
              t3 = J.$and$n(C.List_JYB[t3], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t3 = false;
            if (!t3) {
              if (codeUnit === 58) {
                schemeEndIndex = index0;
                index = schemeEndIndex;
              } else {
                index = index0 - 1;
                schemeEndIndex = 0;
              }
              break;
            }
          }
        else {
          index = 0;
          schemeEndIndex = 0;
        }
        if (schemeEndIndex === index) {
          t3 = schemeEndIndex + 1;
          if (t3 < $length) {
            if (schemeEndIndex >= $length)
              H.throwExpression(P.RangeError$value(schemeEndIndex));
            if (uri.charCodeAt(schemeEndIndex) === 47) {
              if (t3 >= $length)
                H.throwExpression(P.RangeError$value(t3));
              t3 = uri.charCodeAt(t3) === 47;
            } else
              t3 = false;
          } else
            t3 = false;
        } else
          t3 = false;
        if (t3) {
          authorityEndIndex = schemeEndIndex + 2;
          for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), userInfoEndIndex = -1, t3.$lt(authorityEndIndex, $length);) {
            authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
            if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
              H.throwExpression(new P.ArgumentError(authorityEndIndex));
            if (t3.$lt(authorityEndIndex, 0))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            if (t3.$ge(authorityEndIndex, $length))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            codeUnit = uri.charCodeAt(authorityEndIndex);
            if (t1.call$1(codeUnit) !== true)
              if (codeUnit === 91)
                authorityEndIndex = t2.call$1(authorityEndIndex0);
              else {
                if (J.$eq(portIndex, -1) && codeUnit === 58)
                  ;
                else {
                  t3 = codeUnit === 64 || codeUnit === 58;
                  authorityEndIndex = authorityEndIndex0 - 1;
                  if (t3) {
                    userInfoEndIndex = C.JSString_methods.indexOf$2(uri, "@", authorityEndIndex);
                    if (userInfoEndIndex === -1) {
                      authorityEndIndex = index;
                      break;
                    }
                    authorityEndIndex = userInfoEndIndex + 1;
                    for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), t3.$lt(authorityEndIndex, $length);) {
                      authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
                      if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
                        H.throwExpression(new P.ArgumentError(authorityEndIndex));
                      if (t3.$lt(authorityEndIndex, 0))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      if (t3.$ge(authorityEndIndex, $length))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      codeUnit = uri.charCodeAt(authorityEndIndex);
                      if (t1.call$1(codeUnit) !== true)
                        if (codeUnit === 91)
                          authorityEndIndex = t2.call$1(authorityEndIndex0);
                        else {
                          if (codeUnit === 58) {
                            if (!J.$eq(portIndex, -1))
                              throw H.wrapException(P.FormatException$("Double port in host"));
                          } else {
                            authorityEndIndex = authorityEndIndex0 - 1;
                            break;
                          }
                          authorityEndIndex = authorityEndIndex0;
                          portIndex = authorityEndIndex;
                        }
                      else
                        authorityEndIndex = authorityEndIndex0;
                    }
                    break;
                  } else {
                    userInfoEndIndex = -1;
                    break;
                  }
                }
                authorityEndIndex = authorityEndIndex0;
                portIndex = authorityEndIndex;
              }
            else
              authorityEndIndex = authorityEndIndex0;
          }
        } else {
          authorityEndIndex = schemeEndIndex;
          userInfoEndIndex = -1;
          portIndex = -1;
        }
        for (pathEndIndex = authorityEndIndex; t1 = J.getInterceptor$n(pathEndIndex), t1.$lt(pathEndIndex, $length); pathEndIndex = pathEndIndex0) {
          pathEndIndex0 = t1.$add(pathEndIndex, 1);
          if (typeof pathEndIndex !== "number" || Math.floor(pathEndIndex) !== pathEndIndex)
            H.throwExpression(new P.ArgumentError(pathEndIndex));
          if (t1.$lt(pathEndIndex, 0))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          if (t1.$ge(pathEndIndex, $length))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          codeUnit = uri.charCodeAt(pathEndIndex);
          if (codeUnit === 63 || codeUnit === 35) {
            pathEndIndex = pathEndIndex0 - 1;
            break;
          }
        }
        t1 = J.getInterceptor$n(pathEndIndex);
        if (t1.$lt(pathEndIndex, $length)) {
          if (typeof pathEndIndex !== "number" || Math.floor(pathEndIndex) !== pathEndIndex)
            H.throwExpression(new P.ArgumentError(pathEndIndex));
          if (t1.$lt(pathEndIndex, 0))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          if (t1.$ge(pathEndIndex, $length))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          t2 = uri.charCodeAt(pathEndIndex) === 63;
        } else
          t2 = false;
        if (t2)
          for (queryEndIndex = pathEndIndex; t2 = J.getInterceptor$n(queryEndIndex), t2.$lt(queryEndIndex, $length); queryEndIndex = queryEndIndex0) {
            queryEndIndex0 = t2.$add(queryEndIndex, 1);
            if (typeof queryEndIndex !== "number" || Math.floor(queryEndIndex) !== queryEndIndex)
              H.throwExpression(new P.ArgumentError(queryEndIndex));
            if (t2.$lt(queryEndIndex, 0))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (t2.$ge(queryEndIndex, $length))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (uri.charCodeAt(queryEndIndex) === 35) {
              queryEndIndex = queryEndIndex0 - 1;
              break;
            }
          }
        else
          queryEndIndex = pathEndIndex;
        scheme = schemeEndIndex > 0 ? C.JSString_methods.substring$2(uri, 0, schemeEndIndex - 1) : null;
        port = 0;
        if (schemeEndIndex !== authorityEndIndex) {
          startIndex = schemeEndIndex + 2;
          if (userInfoEndIndex > 0) {
            userInfo = C.JSString_methods.substring$2(uri, startIndex, userInfoEndIndex);
            startIndex = userInfoEndIndex + 1;
          } else
            userInfo = "";
          t2 = J.getInterceptor$n(portIndex);
          if (t2.$gt(portIndex, 0)) {
            portStr = C.JSString_methods.substring$2(uri, portIndex, authorityEndIndex);
            try {
              port = H.Primitives_parseInt(portStr, null, null);
            } catch (exception) {
              H.unwrapException(exception);
              throw H.wrapException(P.FormatException$("Invalid port: '" + H.S(portStr) + "'"));
            }

            host = C.JSString_methods.substring$2(uri, startIndex, t2.$sub(portIndex, 1));
          } else
            host = C.JSString_methods.substring$2(uri, startIndex, authorityEndIndex);
        } else {
          host = "";
          userInfo = "";
        }
        path = C.JSString_methods.substring$2(uri, authorityEndIndex, pathEndIndex);
        query = t1.$lt(pathEndIndex, queryEndIndex) ? C.JSString_methods.substring$2(uri, t1.$add(pathEndIndex, 1), queryEndIndex) : "";
        t1 = J.getInterceptor$n(queryEndIndex);
        fragment = t1.$lt(queryEndIndex, $length) ? C.JSString_methods.substring$2(uri, t1.$add(queryEndIndex, 1), $length) : "";
        return P.Uri$(fragment, host, path, null, port, query, null, scheme, userInfo);
      }, Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: function(host) {
        var t1, i;
        if (host.length === 0)
          return host;
        if (C.JSString_methods.codeUnitAt$1(host, 0) === 91) {
          t1 = host.length - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
          return host;
        }
        for (t1 = host.length, i = 0; i < t1; ++i) {
          if (i >= t1)
            H.throwExpression(P.RangeError$value(i));
          if (host.charCodeAt(i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + host + "]";
          }
        }
        return host;
      }, Uri__makeScheme: function(scheme) {
        var t1, $length, allLowercase, i, codeUnit, t2;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        if (scheme == null)
          return "";
        $length = scheme.length;
        for (allLowercase = true, i = 0; i < $length; ++i) {
          if (i >= $length)
            H.throwExpression(P.RangeError$value(i));
          codeUnit = scheme.charCodeAt(i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t2 = codeUnit >= 65 && codeUnit <= 90;
            else
              t2 = true;
            t2 = !t2;
          } else
            t2 = false;
          if (t2)
            throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
          if (t1.call$1(codeUnit) !== true) {
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = J.$and$n(C.List_JYB[t2], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              ;
            else
              throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : scheme.toLowerCase();
      }, Uri__makeQuery: function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment) {
        return P.Uri__normalize(fragment);
      }, Uri__normalize: function(component) {
        var t1, index, t2, t3, t4, t5, $length, t6, t7, codeUnit1, codeUnit2, decodedCodeUnit, t8, charCodes, next;
        t1 = {};
        index = J.getInterceptor$asx(component).indexOf$1(component, "%");
        t1.index_0 = index;
        if (index < 0)
          return component;
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_1 = null;
        $length = component.length;
        t1.prevIndex_2 = 0;
        t6 = new P.Uri__normalize_fillResult(t1, component);
        for (t7 = index; t7 < $length;) {
          if ($length < t7 + 2)
            throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + component));
          ++t7;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit1 = component.charCodeAt(t7);
          t7 = t1.index_0 + 2;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit2 = component.charCodeAt(t7);
          decodedCodeUnit = t5.call$1(t1.index_0 + 1);
          if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true) {
            index = t1.index_0 + 3;
            t1.index_0 = index;
            t7 = index;
          } else {
            t6.call$0();
            t7 = t3.call$1(decodedCodeUnit);
            t8 = t1.result_1;
            if (t7 === true) {
              t8.toString;
              charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
              t7 = H.Primitives_stringFromCharCodes(charCodes);
              t8._contents = t8._contents + t7;
            } else {
              t8.toString;
              t8._contents = t8._contents + "%";
              t7 = t4.call$1(t1.index_0 + 1);
              t8.toString;
              charCodes = P.List_List$filled(1, t7, J.JSInt);
              t7 = H.Primitives_stringFromCharCodes(charCodes);
              t8._contents = t8._contents + t7;
              t7 = t1.result_1;
              t8 = t4.call$1(t1.index_0 + 2);
              t7.toString;
              charCodes = P.List_List$filled(1, t8, J.JSInt);
              t8 = H.Primitives_stringFromCharCodes(charCodes);
              t7._contents = t7._contents + t8;
            }
            index = t1.index_0 + 3;
            t1.index_0 = index;
            t1.prevIndex_2 = index;
            t7 = index;
          }
          next = C.JSString_methods.indexOf$2(component, "%", t7);
          if (next >= t1.index_0) {
            t1.index_0 = next;
            t7 = next;
          } else {
            t1.index_0 = $length;
            t7 = $length;
          }
        }
        if (t1.result_1 == null)
          return component;
        if (t1.prevIndex_2 !== t7)
          t6.call$0();
        return J.toString$0(t1.result_1);
      }, Uri_parseIPv4Address: function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return H.setRuntimeTypeInfo(new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1)), [null, null]).toList$0(0);
      }, Uri_parseIPv6Address: function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.get$length$asx(host) < 2)
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = host;
          t2 = J.get$length$asx(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t2)
            H.throwExpression(P.RangeError$value(i));
          if (t1.charCodeAt(i) === 58) {
            if (i === 0) {
              ++i;
              t1 = host;
              if (i >= J.get$length$asx(t1))
                H.throwExpression(P.RangeError$value(i));
              if (t1.charCodeAt(i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$index$asx(last, 0);
              if (typeof t1 !== "number")
                return t1.$shl();
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 << 8 | t2) >>> 0);
              t2 = J.$index$asx(last, 2);
              if (typeof t2 !== "number")
                return t2.$shl();
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 << 8 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3, charCodes;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128)) {
            if (typeof $byte !== "number")
              return $byte.$shr();
            t3 = C.JSNumber_methods._shrOtherPositive$1($byte, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = J.$and$n(canonicalTable[t3], C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
          } else
            t3 = false;
          if (t3) {
            charCodes = P.List_List$filled(1, $byte, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            charCodes = P.List_List$filled(1, 43, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
          } else {
            charCodes = P.List_List$filled(1, 37, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }}
  },
  Uri_parse_isRegName: {
    "^": "Closure:40;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = J.$and$n(C.List_qNA[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri_parse_ipV6Address: {
    "^": "Closure:41;uri_0",
    call$1: function(index) {
      index = C.JSString_methods.indexOf$2(this.uri_0, "]", index);
      if (index === -1)
        throw H.wrapException(P.FormatException$("Bad end of IPv6 host"));
      return index + 1;
    }
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "^": "Closure:40;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_6Pr, t1);
        t1 = J.$and$n(C.List_6Pr[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__makePath_closure: {
    "^": "Closure:24;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, C.Utf8Codec_false, false);
    }
  },
  Uri__makeQuery_closure: {
    "^": "Closure:23;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    }
  },
  Uri__normalize_isNormalizedHexDigit: {
    "^": "Closure:40;",
    call$1: function(digit) {
      var t1;
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    }
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "^": "Closure:40;",
    call$1: function(digit) {
      return 97 <= digit && digit <= 102;
    }
  },
  Uri__normalize_isUnreserved: {
    "^": "Closure:40;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = J.$and$n(C.List_nxB[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }
  },
  Uri__normalize_normalizeHexDigit: {
    "^": "Closure:41;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(new P.ArgumentError("Invalid URI component: " + t1));
      else
        return codeUnit;
    }
  },
  Uri__normalize_decodeHexDigitPair: {
    "^": "Closure:41;component_4",
    call$1: function(index) {
      var t1, $byte, i, t2, codeUnit;
      for (t1 = this.component_4, $byte = 0, i = 0; i < 2; ++i) {
        t2 = index + i;
        if (t2 < 0)
          H.throwExpression(P.RangeError$value(t2));
        if (t2 >= t1.length)
          H.throwExpression(P.RangeError$value(t2));
        codeUnit = t1.charCodeAt(t2);
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit |= 32;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + t1));
        }
      }
      return $byte;
    }
  },
  Uri__normalize_fillResult: {
    "^": "Closure:1;box_0,component_5",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_1;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_0;
      if (t2 == null)
        t1.result_1 = P.StringBuffer$(C.JSString_methods.substring$2(t4, t3, t5));
      else
        t2.write$1(C.JSString_methods.substring$2(t4, t3, t5));
    }
  },
  Uri_hashCode_combine: {
    "^": "Closure:42;",
    call$2: function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    }
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure:16;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg));
    }
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure:24;error_0",
    call$1: function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure:16;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg));
    }
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure:43;host_0,error_1",
    call$2: function(start, end) {
      var value, t1;
      if (end - start > 4)
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    }
  },
  Uri_parseIPv6Address_closure: {
    "^": "Closure:24;parts_2",
    call$1: function(value) {
      if (J.getInterceptor(value).$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else {
        if (typeof value !== "number")
          return value.$shr();
        return [C.JSNumber_methods._shrOtherPositive$1(value, 8) & 255, value & 255];
      }
    }
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:23;",
    call$2: function($byte, buffer) {
      if (typeof $byte !== "number")
        return $byte.$shr();
      buffer.write$1(P.String_String$fromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", C.JSNumber_methods._shrOtherPositive$1($byte, 4))));
      buffer.write$1(P.String_String$fromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15)));
    }
  }
}],
["dart.io", "dart:io", , P, {
  "^": "",
  _IOCrypto_getRandomBytes: function(count) {
    throw H.wrapException(P.UnsupportedError$("_IOCrypto.getRandomBytes"));
  },
  _CryptoUtils_bytesToBase64: function(bytes, urlSafe, addLineSeparator) {
    var len, lookup, remainderLength, chunkLength, t1, t2, outputLen, out, t3, j, i, c, i0, t4, t5, t6, x, j0, y;
    len = bytes.length;
    if (len === 0)
      return "";
    lookup = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    remainderLength = C.JSInt_methods.remainder$1(len, 3);
    chunkLength = len - remainderLength;
    t1 = C.JSInt_methods._tdivFast$1(len, 3);
    t2 = remainderLength > 0 ? 4 : 0;
    outputLen = t1 * 4 + t2;
    if (addLineSeparator)
      outputLen += C.JSInt_methods._tdivFast$1(outputLen - 1, 76) << 1 >>> 0;
    t1 = Array(outputLen);
    t1.fixed$length = init;
    out = H.setRuntimeTypeInfo(t1, [J.JSInt]);
    for (t1 = out.length, t2 = lookup.length, t3 = outputLen - 2, j = 0, i = 0, c = 0; i < chunkLength; i = i0) {
      i0 = i + 1;
      t4 = bytes.length;
      if (i >= t4)
        return H.ioore(bytes, i);
      t5 = bytes[i];
      if (typeof t5 !== "number")
        return t5.$shl();
      i = i0 + 1;
      if (i0 >= t4)
        return H.ioore(bytes, i0);
      t6 = bytes[i0];
      if (typeof t6 !== "number")
        return t6.$shl();
      i0 = i + 1;
      if (i >= t4)
        return H.ioore(bytes, i);
      t4 = bytes[i];
      if (typeof t4 !== "number")
        return H.iae(t4);
      x = t5 << 16 & 16777215 | t6 << 8 & 16777215 | t4;
      j0 = j + 1;
      t4 = x >>> 18;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = x >>> 12 & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      j0 = j + 1;
      t4 = x >>> 6 & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = x & 63;
      if (t4 >= t2)
        H.throwExpression(P.RangeError$value(t4));
      t4 = lookup.charCodeAt(t4);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      if (addLineSeparator) {
        ++c;
        t4 = c === 19 && j < t3;
      } else
        t4 = false;
      if (t4) {
        j0 = j + 1;
        if (j >= t1)
          return H.ioore(out, j);
        out[j] = 13;
        j = j0 + 1;
        if (j0 >= t1)
          return H.ioore(out, j0);
        out[j0] = 10;
        c = 0;
      }
    }
    if (remainderLength === 1) {
      if (i >= bytes.length)
        return H.ioore(bytes, i);
      x = bytes[i];
      j0 = j + 1;
      if (typeof x !== "number")
        return x.$shr();
      t2 = C.JSString_methods.codeUnitAt$1(lookup, C.JSNumber_methods._shrOtherPositive$1(x, 2));
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      j = j0 + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x << 4 & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t2;
      j0 = j + 1;
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = 61;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    } else if (remainderLength === 2) {
      t2 = bytes.length;
      if (i >= t2)
        return H.ioore(bytes, i);
      x = bytes[i];
      t3 = i + 1;
      if (t3 >= t2)
        return H.ioore(bytes, t3);
      y = bytes[t3];
      j0 = j + 1;
      if (typeof x !== "number")
        return x.$shr();
      t3 = C.JSString_methods.codeUnitAt$1(lookup, C.JSNumber_methods._shrOtherPositive$1(x, 2));
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t3;
      j = j0 + 1;
      if (typeof y !== "number")
        return y.$shr();
      t3 = C.JSString_methods.codeUnitAt$1(lookup, (x << 4 | C.JSNumber_methods._shrOtherPositive$1(y, 4)) & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t3;
      j0 = j + 1;
      t3 = C.JSString_methods.codeUnitAt$1(lookup, y << 2 & 63);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t3;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    }
    return P.String_String$fromCharCodes(out);
  },
  _Filter_newZLibDeflateFilter: function(gzip, level, windowBits, memLevel, strategy, dictionary, raw) {
    throw H.wrapException(P.UnsupportedError$("newZLibDeflateFilter"));
  },
  _validateZLibWindowBits: function(windowBits) {
    if (8 > windowBits || 15 < windowBits)
      throw H.wrapException(P.RangeError$range(windowBits, 8, 15));
  },
  _validateZLibeLevel: function(level) {
    if (9 < level)
      throw H.wrapException(P.RangeError$range(level, -1, 9));
  },
  _validateZLibMemLevel: function(memLevel) {
    if (1 > memLevel || 9 < memLevel)
      throw H.wrapException(P.RangeError$range(memLevel, 1, 9));
  },
  _validateZLibStrategy: function(strategy) {
    if (H.Lists_indexOf(C.List_yTu0, strategy, 0, 5) === -1)
      throw H.wrapException(new P.ArgumentError("Unsupported 'strategy'"));
  },
  HttpServer_bind: function(address, port, backlog) {
    return P._HttpServer_bind(address, port, backlog);
  },
  HttpDate_format: function(date) {
    var d, sb, t1;
    d = date.toUtc$0();
    sb = P.StringBuffer$("");
    sb.write$1(C.List_ECn[C.JSInt_methods.$mod((d.isUtc === true ? H.Primitives_lazyAsJsDate(d).getUTCDay() + 0 : H.Primitives_lazyAsJsDate(d).getDay() + 0) + 6, 7) + 1 - 1]);
    sb.write$1(", ");
    sb.write$1(C.JSInt_methods.toString$0(H.Primitives_getDay(d)));
    sb.write$1(" ");
    t1 = H.Primitives_getMonth(d) - 1;
    if (t1 < 0 || t1 >= 12)
      return H.ioore(C.List_h8w, t1);
    sb.write$1(C.List_h8w[t1]);
    sb.write$1(" ");
    sb.write$1(C.JSInt_methods.toString$0(H.Primitives_getYear(d)));
    sb.write$1(H.Primitives_getHours(d) <= 9 ? " 0" : " ");
    sb.write$1(C.JSInt_methods.toString$0(H.Primitives_getHours(d)));
    sb.write$1(H.Primitives_getMinutes(d) <= 9 ? ":0" : ":");
    sb.write$1(C.JSInt_methods.toString$0(H.Primitives_getMinutes(d)));
    sb.write$1(H.Primitives_getSeconds(d) <= 9 ? ":0" : ":");
    sb.write$1(C.JSInt_methods.toString$0(H.Primitives_getSeconds(d)));
    sb.write$1(" GMT");
    return sb._contents;
  },
  ServerSocket_bind: function(address, port, backlog, v6Only) {
    throw H.wrapException(P.UnsupportedError$("ServerSocket.bind"));
  },
  _WebSocketTransformerImpl__upgrade: function(request, _protocolSelector) {
    var response, protocols;
    response = request.get$response();
    if (!P._WebSocketTransformerImpl__isUpgradeRequest(request)) {
      if (response._outgoing.headersWritten)
        H.throwExpression(new P.StateError("Header already sent"));
      response._statusCode = 400;
      response.close$0();
      return P._Future$immediateError(new P.WebSocketException("Invalid WebSocket upgrade request"), null, null);
    }
    protocols = request._incoming.headers._headers.$index(0, C.JSString_methods.toLowerCase$0("Sec-WebSocket-Protocol"));
    ({}).protocols_0 = protocols;
    if (protocols != null)
      ;
    return new P._WebSocketTransformerImpl__upgrade_upgrade(request, response).call$1(null);
  },
  _WebSocketTransformerImpl__isUpgradeRequest: function(request) {
    var t1, t2, t3, upgrade, version;
    t1 = {};
    t2 = request._incoming;
    if (t2.method !== "GET")
      return false;
    t2 = t2.headers;
    t3 = t2._headers;
    if (t3.$index(0, C.JSString_methods.toLowerCase$0("connection")) == null)
      return false;
    t1.isUpgrade_0 = false;
    J.forEach$1$ax(t3.$index(0, C.JSString_methods.toLowerCase$0("connection")), new P._WebSocketTransformerImpl__isUpgradeRequest_closure(t1));
    if (!t1.isUpgrade_0)
      return false;
    upgrade = t2.value$1("upgrade");
    if (upgrade == null || J.toLowerCase$0$s(upgrade) !== "websocket")
      return false;
    version = t2.value$1("Sec-WebSocket-Version");
    if (version == null || !J.$eq(version, "13"))
      return false;
    if (t2.value$1("Sec-WebSocket-Key") == null)
      return false;
    return true;
  },
  _HashBase: {
    "^": "Object;",
    add$1: function(_, data) {
      var t1, t2;
      if (this._digestCalled)
        throw H.wrapException(new P.StateError("Hash update method called after digest was retrieved"));
      t1 = this._lengthInBytes;
      t2 = J.get$length$asx(data);
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._lengthInBytes = t1 + t2;
      C.JSArray_methods.addAll$1(this._pendingData, data);
      this._iterate$0();
    },
    close$0: function() {
      if (this._digestCalled)
        return this._resultAsBytes$0();
      this._digestCalled = true;
      this._finalizeData$0();
      this._iterate$0();
      return this._resultAsBytes$0();
    },
    _resultAsBytes$0: function() {
      var result, i, t1;
      result = [];
      for (i = 0; t1 = this._h, i < t1.length; ++i)
        C.JSArray_methods.addAll$1(result, this._wordToBytes$1(t1[i]));
      return result;
    },
    _bytesToChunk$2: function(data, dataIndex) {
      var t1, t2, wordIndex, t3, w3, t4, w2, w1, w0, t5, t6, t7;
      for (t1 = this._chunkSizeInWords, t2 = this._bigEndianWords, wordIndex = 0; wordIndex < t1; ++wordIndex) {
        t3 = data.length;
        if (t2) {
          if (dataIndex >= t3)
            return H.ioore(data, dataIndex);
          w3 = data[dataIndex];
        } else {
          t4 = dataIndex + 3;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w3 = data[t4];
        }
        if (t2) {
          t4 = dataIndex + 1;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w2 = data[t4];
        } else {
          t4 = dataIndex + 2;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w2 = data[t4];
        }
        if (t2) {
          t4 = dataIndex + 2;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w1 = data[t4];
        } else {
          t4 = dataIndex + 1;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w1 = data[t4];
        }
        if (t2) {
          t4 = dataIndex + 3;
          if (t4 >= t3)
            return H.ioore(data, t4);
          w0 = data[t4];
        } else {
          if (dataIndex >= t3)
            return H.ioore(data, dataIndex);
          w0 = data[dataIndex];
        }
        dataIndex += 4;
        t3 = J.$and$in(w3, 255);
        t4 = J.$and$in(w2, 255);
        t5 = J.$and$in(w1, 255);
        t6 = J.$and$in(w0, 255);
        t7 = this._currentChunk;
        if (wordIndex >= t7.length)
          return H.ioore(t7, wordIndex);
        t7[wordIndex] = (t3 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
      }
    },
    _wordToBytes$1: function(word) {
      var bytes, t1, t2;
      bytes = Array(4);
      t1 = this._bigEndianWords;
      t2 = t1 ? 24 : 0;
      if (typeof word !== "number")
        return word.$shr();
      bytes[0] = C.JSNumber_methods._shrOtherPositive$1(word, t2) & 255;
      bytes[1] = C.JSNumber_methods._shrOtherPositive$1(word, t1 ? 16 : 8) & 255;
      bytes[2] = C.JSNumber_methods._shrOtherPositive$1(word, t1 ? 8 : 16) & 255;
      bytes[3] = C.JSNumber_methods._shrOtherPositive$1(word, t1 ? 0 : 24) & 255;
      return bytes;
    },
    _iterate$0: function() {
      var len, chunkSizeInBytes, index, t1;
      len = this._pendingData.length;
      chunkSizeInBytes = this._chunkSizeInWords * 4;
      if (len >= chunkSizeInBytes) {
        for (index = 0; t1 = this._pendingData, len - index >= chunkSizeInBytes; index += chunkSizeInBytes) {
          this._bytesToChunk$2(t1, index);
          this._updateHash$1(this._currentChunk);
        }
        this._pendingData = C.JSArray_methods.sublist$2(t1, index, len);
      }
    },
    _finalizeData$0: function() {
      var contentsLength, chunkSizeInBytes, zeroPadding, i, t1, t2;
      this._pendingData.push(128);
      contentsLength = this._lengthInBytes + 9;
      chunkSizeInBytes = this._chunkSizeInWords * 4;
      zeroPadding = ((contentsLength + chunkSizeInBytes - 1 & -chunkSizeInBytes) >>> 0) - contentsLength;
      for (i = 0; i < zeroPadding; ++i)
        this._pendingData.push(0);
      t1 = (this._lengthInBytes * 8 & 4294967295) >>> 0;
      t2 = this._pendingData;
      if (this._bigEndianWords) {
        C.JSArray_methods.addAll$1(t2, this._wordToBytes$1(0));
        C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1(t1));
      } else {
        C.JSArray_methods.addAll$1(t2, this._wordToBytes$1(t1));
        C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1(0));
      }
    },
    _HashBase$3: function(_chunkSizeInWords, _digestSizeInWords, _bigEndianWords) {
      this._currentChunk = Array(this._chunkSizeInWords);
      this._h = Array(this._digestSizeInWords);
    }
  },
  _SHA1: {
    "^": "_HashBase;_w,_chunkSizeInWords,_digestSizeInWords,_bigEndianWords,_lengthInBytes,_pendingData,_currentChunk,_h,_digestCalled",
    _updateHash$1: function(m) {
      var t1, t2, a, b, c, d, e, i, t3, n, t, t4, c0, a0;
      t1 = this._h;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      a = t1[0];
      if (1 >= t2)
        return H.ioore(t1, 1);
      b = t1[1];
      if (2 >= t2)
        return H.ioore(t1, 2);
      c = t1[2];
      if (3 >= t2)
        return H.ioore(t1, 3);
      d = t1[3];
      if (4 >= t2)
        return H.ioore(t1, 4);
      e = t1[4];
      for (t1 = this._w, t2 = m.length, i = 0; i < 80; ++i, e = d, d = c, c = c0, b = a, a = a0) {
        if (i < 16) {
          if (i >= t2)
            return H.ioore(m, i);
          t3 = m[i];
          t1[i] = t3;
        } else {
          n = J.$xor$n(J.$xor$n(J.$xor$n(t1[i - 3], t1[i - 8]), t1[i - 14]), t1[i - 16]);
          if (typeof n !== "number")
            return n.$shl();
          t3 = (n << 1 & 4294967295 | (n & 4294967295) >>> 31) >>> 0;
          t1[i] = t3;
        }
        if (typeof a !== "number")
          return a.$shl();
        if (typeof e !== "number")
          return H.iae(e);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t = (((((a << 5 & 4294967295 | (a & 4294967295) >>> 27) >>> 0) + e & 4294967295) >>> 0) + t3 & 4294967295) >>> 0;
        if (i < 20) {
          t3 = J.getInterceptor$in(b);
          t4 = t3.$and(b, c);
          t3 = t3.$not(b);
          if (typeof d !== "number")
            return H.iae(d);
          t3 = J.$or$n(t4, (t3 & d) >>> 0);
          if (typeof t3 !== "number")
            return H.iae(t3);
          t = ((t + t3 & 4294967295) >>> 0) + 1518500249 & 4294967295;
        } else if (i < 40) {
          t3 = J.$xor$n(J.$xor$n(b, c), d);
          if (typeof t3 !== "number")
            return H.iae(t3);
          t = ((t + t3 & 4294967295) >>> 0) + 1859775393 & 4294967295;
        } else {
          t3 = J.getInterceptor$in(b);
          if (i < 60) {
            t3 = J.$or$n(J.$or$n(t3.$and(b, c), t3.$and(b, d)), J.$and$in(c, d));
            if (typeof t3 !== "number")
              return H.iae(t3);
            t = ((t + t3 & 4294967295) >>> 0) + 2400959708 & 4294967295;
          } else {
            t3 = J.$xor$n(t3.$xor(b, c), d);
            if (typeof t3 !== "number")
              return H.iae(t3);
            t = ((t + t3 & 4294967295) >>> 0) + 3395469782 & 4294967295;
          }
        }
        if (typeof b !== "number")
          return b.$shl();
        c0 = (b << 30 & 4294967295 | (b & 4294967295) >>> 2) >>> 0;
        a0 = (t & 4294967295) >>> 0;
      }
      t1 = this._h;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1[0] = J.$and$in(J.$add$ns(a, t1[0]), 4294967295);
      t1 = this._h;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1[1] = J.$and$in(J.$add$ns(b, t1[1]), 4294967295);
      t1 = this._h;
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      t1[2] = J.$and$in(J.$add$ns(c, t1[2]), 4294967295);
      t1 = this._h;
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t1[3] = J.$and$in(J.$add$ns(d, t1[3]), 4294967295);
      t1 = this._h;
      if (4 >= t1.length)
        return H.ioore(t1, 4);
      t1[4] = J.$and$in(J.$add$ns(e, t1[4]), 4294967295);
    },
    _SHA1$0: function() {
      var t1, t2;
      t1 = this._h;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1[0] = 1732584193;
      if (1 >= t2)
        return H.ioore(t1, 1);
      t1[1] = 4023233417;
      if (2 >= t2)
        return H.ioore(t1, 2);
      t1[2] = 2562383102;
      if (3 >= t2)
        return H.ioore(t1, 3);
      t1[3] = 271733878;
      if (4 >= t2)
        return H.ioore(t1, 4);
      t1[4] = 3285377520;
    }
  },
  ZLibEncoder: {
    "^": "Converter;gzip,level,memLevel,strategy,windowBits,dictionary,raw",
    startChunkedConversion$1: function(sink) {
      if (!sink.$isByteConversionSink)
        sink = new P._ByteAdapterSink(sink);
      return new P._ZLibEncoderSink(P._Filter_newZLibDeflateFilter(this.gzip, this.level, this.windowBits, this.memLevel, this.strategy, this.dictionary, this.raw), sink, false, true);
    }
  },
  _ZLibEncoderSink: {
    "^": "_FilterSink;_filter,_sink,_closed,_empty"
  },
  _FilterSink: {
    "^": "ByteConversionSink;",
    add$1: [function(_, data) {
      this.addSlice$4(data, 0, J.get$length$asx(data), false);
    }, "call$1", "get$add", 2, 0, 44],
    addSlice$4: function(data, start, end, isLast) {
      var out, e, t1, out0, exception;
      if (this._closed)
        return;
      if (J.$lt$n(start, 0) || J.$gt$n(start, J.get$length$asx(data)))
        throw H.wrapException(new P.ArgumentError("Invalid start position"));
      if (J.$lt$n(end, 0) || J.$gt$n(end, J.get$length$asx(data)) || J.$lt$n(end, start))
        throw H.wrapException(new P.ArgumentError("Invalid end position"));
      try {
        this._empty = false;
        t1 = this._filter;
        t1.process$3(data, start, end);
        out = null;
        for (out0 = t1.processed$1$flush(false), t1 = this._sink; out = out0, true;)
          t1.add$1(0, out);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        this._closed = true;
        throw H.wrapException(e);
      }

      if (isLast)
        this.close$0();
    },
    close$0: function() {
      var out, e, out0, t1, exception;
      if (this._closed)
        return;
      if (this._empty)
        this._filter.process$3(C.List_empty, 0, 0);
      try {
        out = null;
        for (out0 = this._filter.processed$1$end(true), t1 = this._sink; out = out0, true;)
          t1.add$1(0, out);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        this._closed = true;
        throw H.wrapException(e);
      }

      if (!this._closed)
        this._filter.end$0();
      this._closed = true;
      this._sink.close$0();
    }
  },
  Cookie: {
    "^": "Object;"
  },
  HttpRequest: {
    "^": "Object;"
  },
  HttpResponse: {
    "^": "Object;",
    $isHttpResponse: true
  },
  HttpException: {
    "^": "Object;message<,uri<",
    toString$0: function(_) {
      var b, t1;
      b = P.StringBuffer$("");
      b.write$1("HttpException: ");
      b.write$1(this.message);
      t1 = this.uri;
      if (t1 != null)
        b.write$1(", uri = " + H.S(t1));
      return b._contents;
    }
  },
  _HttpHeaders: {
    "^": "Object;_headers,protocolVersion,_mutable,_noFoldingHeaders,_contentLength,_persistentConnection,_chunkedTransferEncoding,_io$_host,_io$_port,_defaultPortForScheme",
    $index: function(_, $name) {
      return this._headers.$index(0, J.toLowerCase$0$s($name));
    },
    value$1: [function($name) {
      var values, t1, t2;
      $name = J.toLowerCase$0$s($name);
      values = this._headers.$index(0, $name);
      if (values == null)
        return;
      t1 = J.getInterceptor$asx(values);
      t2 = t1.get$length(values);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 1)
        throw H.wrapException(new P.HttpException("More than one value for header " + $name, null));
      return t1.$index(values, 0);
    }, "call$1", "get$value", 2, 0, 45],
    _addAll$2: function($name, value) {
      var t1 = J.getInterceptor(value);
      if (!!t1.$isList)
        t1.forEach$1(value, new P._HttpHeaders__addAll_closure(this, $name));
      else
        this._io$_add$2($name, value);
    },
    remove$2: function(_, $name, value) {
      var t1, values, t2, index;
      if (!this._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      $name = $name.toLowerCase();
      t1 = this._headers;
      values = t1.$index(0, $name);
      if (values != null) {
        t2 = J.getInterceptor$asx(values);
        index = t2.indexOf$1(values, value);
        if (index !== -1)
          t2.removeRange$2(values, index, index + 1);
        if (t2.get$length(values) === 0)
          t1.remove$1(0, $name);
      }
    },
    forEach$1: function(_, f) {
      this._headers.forEach$1(0, f);
    },
    set$persistentConnection: function(persistentConnection) {
      var t1 = !this._mutable;
      if (t1)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      if (persistentConnection === this._persistentConnection)
        return;
      if (persistentConnection)
        if (this.protocolVersion === "1.1")
          this.remove$2(0, "connection", "close");
        else {
          if (J.$eq(this._contentLength, -1))
            throw H.wrapException(new P.HttpException("Trying to set 'Connection: Keep-Alive' on HTTP 1.0 headers with no ContentLength", null));
          if (!this._mutable)
            H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
          this._addAll$2(C.JSString_methods.toLowerCase$0("connection"), "keep-alive");
        }
      else if (this.protocolVersion === "1.1") {
        if (t1)
          H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
        this._addAll$2(C.JSString_methods.toLowerCase$0("connection"), "close");
      } else
        this.remove$2(0, "connection", "keep-alive");
      this._persistentConnection = persistentConnection;
    },
    set$contentLength: function(contentLength) {
      var t1;
      if (!this._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      t1 = this.protocolVersion;
      if (t1 === "1.0" && this._persistentConnection && J.$eq(contentLength, -1))
        throw H.wrapException(new P.HttpException("Trying to clear ContentLength on HTTP 1.0 headers with 'Connection: Keep-Alive' set", null));
      if (J.$eq(this._contentLength, contentLength))
        return;
      this._contentLength = contentLength;
      if (J.$ge$n(contentLength, 0)) {
        if (this._chunkedTransferEncoding)
          this.set$chunkedTransferEncoding(false);
        this._io$_set$2("content-length", J.toString$0(contentLength));
      } else {
        if (!this._mutable)
          H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
        this._headers.remove$1(0, "content-length".toLowerCase());
        if (t1 === "1.1")
          this.set$chunkedTransferEncoding(true);
      }
    },
    set$chunkedTransferEncoding: function(chunkedTransferEncoding) {
      var values;
      if (!this._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      if (chunkedTransferEncoding && this.protocolVersion === "1.0")
        throw H.wrapException(new P.HttpException("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers", null));
      if (chunkedTransferEncoding === this._chunkedTransferEncoding)
        return;
      if (chunkedTransferEncoding) {
        values = this._headers.$index(0, "transfer-encoding");
        if (values == null || !J.$eq(J.get$last$ax(values), "chunked"))
          this._addValue$2("transfer-encoding", "chunked");
        this.set$contentLength(-1);
      } else
        this.remove$2(0, "transfer-encoding", "chunked");
      this._chunkedTransferEncoding = chunkedTransferEncoding;
    },
    get$contentType: function() {
      var values, t1, result, index, t2;
      values = this._headers.$index(0, "content-type");
      if (values != null) {
        t1 = J.$index$asx(values, 0);
        result = new P._ContentType("", "", "", null);
        result._HeaderValue$2("", null);
        result._parse$3(t1, ";", false);
        index = C.JSString_methods.indexOf$1(result._io$_value, "/");
        t1 = index === -1 || index === result._io$_value.length - 1;
        t2 = result._io$_value;
        if (t1) {
          result._primaryType = C.JSString_methods.trim$0(t2).toLowerCase();
          result._subType = "";
        } else {
          result._primaryType = C.JSString_methods.trim$0(C.JSString_methods.substring$2(t2, 0, index)).toLowerCase();
          result._subType = C.JSString_methods.trim$0(C.JSString_methods.substring$1(result._io$_value, index + 1)).toLowerCase();
        }
        return result;
      } else
        return;
    },
    _io$_add$2: function($name, value) {
      var pos, t1, exception, lowerCaseValue;
      switch ($name) {
        case "content-length":
          t1 = value;
          if (typeof t1 === "number" && Math.floor(t1) === t1)
            this.set$contentLength(value);
          else {
            t1 = value;
            if (typeof t1 === "string")
              this.set$contentLength(H.Primitives_parseInt(value, null, null));
            else
              throw H.wrapException(new P.HttpException("Unexpected type for header named " + $name, null));
          }
          break;
        case "transfer-encoding":
          if (J.$eq(value, "chunked"))
            this.set$chunkedTransferEncoding(true);
          else
            this._addValue$2($name, value);
          break;
        case "date":
          if (!!J.getInterceptor(value).$isDateTime) {
            if (!this._mutable)
              H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
            this._io$_set$2("date", P.HttpDate_format(value.toUtc$0()));
          } else {
            t1 = value;
            if (typeof t1 === "string")
              this._io$_set$2("date", value);
            else
              throw H.wrapException(new P.HttpException("Unexpected type for header named " + $name, null));
          }
          break;
        case "expires":
          if (!!J.getInterceptor(value).$isDateTime) {
            if (!this._mutable)
              H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
            this._io$_set$2("expires", P.HttpDate_format(value.toUtc$0()));
          } else {
            t1 = value;
            if (typeof t1 === "string")
              this._io$_set$2("expires", value);
            else
              throw H.wrapException(new P.HttpException("Unexpected type for header named " + $name, null));
          }
          break;
        case "if-modified-since":
          if (!!J.getInterceptor(value).$isDateTime) {
            if (!this._mutable)
              H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
            this._io$_set$2("if-modified-since", P.HttpDate_format(value.toUtc$0()));
          } else {
            t1 = value;
            if (typeof t1 === "string")
              this._io$_set$2("if-modified-since", value);
            else
              throw H.wrapException(new P.HttpException("Unexpected type for header named " + $name, null));
          }
          break;
        case "host":
          t1 = value;
          if (typeof t1 === "string") {
            pos = J.indexOf$1$asx(value, ":");
            if (J.$eq(pos, -1)) {
              this._io$_host = value;
              this._io$_port = 80;
            } else {
              if (J.$gt$n(pos, 0))
                this._io$_host = J.substring$2$s(value, 0, pos);
              else
                this._io$_host = null;
              if (J.$add$ns(pos, 1) === J.get$length$asx(value))
                this._io$_port = 80;
              else
                try {
                  this._io$_port = H.Primitives_parseInt(J.substring$1$s(value, J.$add$ns(pos, 1)), null, null);
                } catch (exception) {
                  if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
                    this._io$_port = null;
                  else
                    throw exception;
                }

            }
            this._io$_set$2("host", value);
          } else
            throw H.wrapException(new P.HttpException("Unexpected type for header named " + $name, null));
          break;
        case "connection":
          lowerCaseValue = J.toLowerCase$0$s(value);
          if (lowerCaseValue === "close")
            this._persistentConnection = false;
          else if (lowerCaseValue === "keep-alive")
            this._persistentConnection = true;
          this._addValue$2($name, value);
          break;
        case "content-type":
          this._io$_set$2("content-type", value);
          break;
        default:
          this._addValue$2($name, value);
      }
    },
    _addValue$2: function($name, value) {
      var t1, values, t2;
      t1 = this._headers;
      values = t1.$index(0, $name);
      if (values == null) {
        values = H.setRuntimeTypeInfo([], [J.JSString]);
        t1.$indexSet(0, $name, values);
      }
      t1 = J.getInterceptor(value);
      t2 = J.getInterceptor$ax(values);
      if (!!t1.$isDateTime)
        t2.add$1(values, P.HttpDate_format(value));
      else
        t2.add$1(values, t1.toString$0(value));
    },
    _io$_set$2: function($name, value) {
      var values = H.setRuntimeTypeInfo([], [J.JSString]);
      this._headers.$indexSet(0, $name, values);
      values.push(value);
    },
    _foldHeader$1: function($name) {
      var t1;
      if (!J.$eq($name, "set-cookie"))
        t1 = false;
      else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    _write$2: function(buffer, offset) {
      var t1, t2, t3, t4, $name, values, fold, nameData, t5, i, t6;
      t1 = {};
      t1.offset_0 = offset;
      t2 = new P._HttpHeaders__write_write(t1, buffer);
      for (t3 = this._headers, t4 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t3), [H.getTypeArgumentByIndex(t3, 0)])._collection$_map, t4 = new P.HashMapKeyIterator(t4, t4._computeKeys$0(), 0, null); t4.moveNext$0();) {
        $name = t4._collection$_current;
        values = t3.$index(0, $name);
        fold = this._foldHeader$1($name);
        nameData = J.get$codeUnits$s($name);
        t2.call$1(nameData);
        t5 = t1.offset_0;
        offset = t5 + 1;
        t1.offset_0 = offset;
        if (t5 < 0 || t5 >= 8192)
          return H.ioore(buffer, t5);
        buffer[t5] = 58;
        t1.offset_0 = offset + 1;
        if (offset < 0 || offset >= 8192)
          return H.ioore(buffer, offset);
        buffer[offset] = 32;
        t5 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t6 = t5.get$length(values);
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (!(i < t6))
            break;
          if (i > 0) {
            t6 = t1.offset_0;
            if (fold) {
              offset = t6 + 1;
              t1.offset_0 = offset;
              if (t6 < 0 || t6 >= 8192)
                return H.ioore(buffer, t6);
              buffer[t6] = 44;
              t1.offset_0 = offset + 1;
              if (offset < 0 || offset >= 8192)
                return H.ioore(buffer, offset);
              buffer[offset] = 32;
            } else {
              offset = t6 + 1;
              t1.offset_0 = offset;
              if (t6 < 0 || t6 >= 8192)
                return H.ioore(buffer, t6);
              buffer[t6] = 13;
              t1.offset_0 = offset + 1;
              if (offset < 0 || offset >= 8192)
                return H.ioore(buffer, offset);
              buffer[offset] = 10;
              t2.call$1(nameData);
              t6 = t1.offset_0;
              offset = t6 + 1;
              t1.offset_0 = offset;
              if (t6 < 0 || t6 >= 8192)
                return H.ioore(buffer, t6);
              buffer[t6] = 58;
              t1.offset_0 = offset + 1;
              if (offset < 0 || offset >= 8192)
                return H.ioore(buffer, offset);
              buffer[offset] = 32;
            }
          }
          t2.call$1(J.get$codeUnits$s(t5.$index(values, i)));
          ++i;
        }
        t5 = t1.offset_0;
        offset = t5 + 1;
        t1.offset_0 = offset;
        if (t5 < 0 || t5 >= 8192)
          return H.ioore(buffer, t5);
        buffer[t5] = 13;
        t1.offset_0 = offset + 1;
        if (offset < 0 || offset >= 8192)
          return H.ioore(buffer, offset);
        buffer[offset] = 10;
      }
      return t1.offset_0;
    },
    toString$0: function(_) {
      var sb = P.StringBuffer$("");
      this._headers.forEach$1(0, new P._HttpHeaders_toString_closure(this, sb));
      return sb._contents;
    },
    _parseCookies$0: function() {
      var cookies, values;
      cookies = H.setRuntimeTypeInfo([], [P.Cookie]);
      values = this._headers.$index(0, "cookie");
      if (values != null)
        J.forEach$1$ax(values, new P._HttpHeaders__parseCookies_closure(new P._HttpHeaders__parseCookies_parseCookieString(cookies)));
      return cookies;
    },
    _HttpHeaders$2$defaultPortForScheme: function(protocolVersion, defaultPortForScheme) {
      if (this.protocolVersion === "1.0")
        this._persistentConnection = false;
    },
    static: {_HttpHeaders$: function(protocolVersion, defaultPortForScheme) {
        var t1 = new P._HttpHeaders(P.HashMap_HashMap(null, null, null, J.JSString, [J.JSArray, J.JSString]), protocolVersion, true, null, -1, true, false, null, null, defaultPortForScheme);
        t1._HttpHeaders$2$defaultPortForScheme(protocolVersion, defaultPortForScheme);
        return t1;
      }}
  },
  _HttpHeaders__addAll_closure: {
    "^": "Closure:24;this_0,name_1",
    call$1: function(v) {
      return this.this_0._io$_add$2(this.name_1, v);
    }
  },
  _HttpHeaders__write_write: {
    "^": "Closure:44;box_0,buffer_1",
    call$1: function(bytes) {
      var t1, len, t2, t3, i, t4, t5;
      t1 = bytes._string;
      len = t1.length;
      for (t2 = this.buffer_1, t3 = this.box_0, i = 0; t4 = t3.offset_0, i < len; ++i) {
        t4 += i;
        if (i >= len)
          H.throwExpression(P.RangeError$value(i));
        t5 = t1.charCodeAt(i);
        if (t4 < 0 || t4 >= 8192)
          return H.ioore(t2, t4);
        t2[t4] = t5;
      }
      t3.offset_0 = t4 + len;
    }
  },
  _HttpHeaders_toString_closure: {
    "^": "Closure:46;this_0,sb_1",
    call$2: function($name, values) {
      var t1, fold, t2, t3, i, t4, str;
      t1 = this.sb_1;
      t1.write$1($name);
      t1.write$1(": ");
      fold = this.this_0._foldHeader$1($name);
      t2 = J.getInterceptor$asx(values);
      t3 = typeof $name === "string";
      i = 0;
      while (true) {
        t4 = t2.get$length(values);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        if (i > 0)
          if (fold)
            t1._contents = t1._contents + ", ";
          else {
            t1._contents = t1._contents + "\n";
            str = t3 ? $name : H.S($name);
            t4 = t1._contents + str;
            t1._contents = t4;
            t1._contents = t4 + ": ";
          }
        str = t2.$index(values, i);
        str = typeof str === "string" ? str : H.S(str);
        t1._contents = t1._contents + str;
        ++i;
      }
      t1.write$1("\n");
    }
  },
  _HttpHeaders__parseCookies_parseCookieString: {
    "^": "Closure:16;cookies_1",
    call$1: function(s) {
      var t1, $name, value, t2, t3, t4, t5, t6, t7, t8, t9, exception;
      t1 = {};
      t1.index_0 = 0;
      t2 = new P._HttpHeaders__parseCookies_parseCookieString_done(t1, s);
      t3 = new P._HttpHeaders__parseCookies_parseCookieString_skipWS(t1, s, t2);
      t4 = new P._HttpHeaders__parseCookies_parseCookieString_parseName(t1, s, t2);
      t5 = new P._HttpHeaders__parseCookies_parseCookieString_parseValue(t1, s, t2);
      t6 = new P._HttpHeaders__parseCookies_parseCookieString_expect(t1, s, t2);
      for (t7 = this.cookies_1, t8 = J.getInterceptor$asx(s); t2.call$0() !== true;) {
        t3.call$0();
        if (t2.call$0() === true)
          return;
        $name = t4.call$0();
        t3.call$0();
        if (t6.call$1("=") !== true) {
          t1.index_0 = t8.indexOf$2(s, ";", t1.index_0);
          continue;
        }
        t3.call$0();
        value = t5.call$0();
        try {
          t9 = new P._Cookie($name, value, null, null, null, null, false, false);
          t9._validate$0();
          t7.push(t9);
        } catch (exception) {
          H.unwrapException(exception);
        }

        t3.call$0();
        if (t2.call$0() === true)
          return;
        if (t6.call$1(";") !== true) {
          t1.index_0 = t8.indexOf$2(s, ";", t1.index_0);
          continue;
        }
      }
    }
  },
  _HttpHeaders__parseCookies_parseCookieString_done: {
    "^": "Closure:27;box_0,s_2",
    call$0: function() {
      var t1 = this.box_0.index_0;
      return t1 === -1 || t1 === J.get$length$asx(this.s_2);
    }
  },
  _HttpHeaders__parseCookies_parseCookieString_skipWS: {
    "^": "Closure:1;box_0,s_3,done_4",
    call$0: function() {
      var t1, t2, t3, t4;
      for (t1 = this.done_4, t2 = this.box_0, t3 = this.s_3, t4 = J.getInterceptor$asx(t3); t1.call$0() !== true;) {
        if (!J.$eq(t4.$index(t3, t2.index_0), " ") && !J.$eq(t4.$index(t3, t2.index_0), "\t"))
          return;
        t2.index_0 = t2.index_0 + 1;
      }
    }
  },
  _HttpHeaders__parseCookies_parseCookieString_parseName: {
    "^": "Closure:47;box_0,s_5,done_6",
    call$0: function() {
      var t1, start, t2, t3, t4;
      t1 = this.box_0;
      start = t1.index_0;
      for (t2 = this.done_6, t3 = this.s_5, t4 = J.getInterceptor$asx(t3); t2.call$0() !== true;) {
        if (J.$eq(t4.$index(t3, t1.index_0), " ") || J.$eq(t4.$index(t3, t1.index_0), "\t") || J.$eq(t4.$index(t3, t1.index_0), "="))
          break;
        t1.index_0 = t1.index_0 + 1;
      }
      return t4.substring$2(t3, start, t1.index_0);
    }
  },
  _HttpHeaders__parseCookies_parseCookieString_parseValue: {
    "^": "Closure:47;box_0,s_7,done_8",
    call$0: function() {
      var t1, start, t2, t3, t4;
      t1 = this.box_0;
      start = t1.index_0;
      for (t2 = this.done_8, t3 = this.s_7, t4 = J.getInterceptor$asx(t3); t2.call$0() !== true;) {
        if (J.$eq(t4.$index(t3, t1.index_0), " ") || J.$eq(t4.$index(t3, t1.index_0), "\t") || J.$eq(t4.$index(t3, t1.index_0), ";"))
          break;
        t1.index_0 = t1.index_0 + 1;
      }
      return t4.substring$2(t3, start, t1.index_0);
    }
  },
  _HttpHeaders__parseCookies_parseCookieString_expect: {
    "^": "Closure:48;box_0,s_9,done_10",
    call$1: function(expected) {
      var t1;
      if (this.done_10.call$0() === true)
        return false;
      t1 = this.box_0;
      if (!J.$eq(J.$index$asx(this.s_9, t1.index_0), expected))
        return false;
      t1.index_0 = t1.index_0 + 1;
      return true;
    }
  },
  _HttpHeaders__parseCookies_closure: {
    "^": "Closure:24;parseCookieString_11",
    call$1: function(headerValue) {
      return this.parseCookieString_11.call$1(headerValue);
    }
  },
  _HeaderValue: {
    "^": "Object;",
    get$value: function() {
      return this._io$_value;
    },
    _ensureParameters$0: function() {
      if (this._parameters == null)
        this._parameters = H.setRuntimeTypeInfo(new P._UnmodifiableMap(P.HashMap_HashMap(null, null, null, J.JSString, J.JSString)), [null, null]);
    },
    toString$0: function(_) {
      var sb, t1, t2, t0;
      sb = P.StringBuffer$("");
      sb.write$1(this._io$_value);
      this._ensureParameters$0();
      t1 = this._parameters;
      if (t1 != null) {
        this._ensureParameters$0();
        t1 = this._parameters;
        t2 = t1._io$_map._collection$_length > 0;
        t0 = t2;
        t2 = t1;
        t1 = t0;
      } else {
        t2 = t1;
        t1 = false;
      }
      if (t1)
        t2._io$_map.forEach$1(0, new P._HeaderValue_toString_closure(sb));
      return sb._contents;
    },
    _parse$3: function(s, parameterSeparator, preserveBackslash) {
      var t1, t2, t3, t4;
      t1 = {};
      t1.index_0 = 0;
      t2 = new P._HeaderValue__parse_done(t1, s);
      t3 = new P._HeaderValue__parse_skipWS(t1, s, t2);
      t4 = new P._HeaderValue__parse_parseValue(t1, s, parameterSeparator, t2);
      t3.call$0();
      this._io$_value = t4.call$0();
      t3.call$0();
      if (t2.call$0() === true)
        return;
      new P._HeaderValue__parse_maybeExpect(t1, s).call$1(parameterSeparator);
      new P._HeaderValue__parse_parseParameters(t1, this, s, parameterSeparator, preserveBackslash, t2, t3, t4, new P._HeaderValue__parse_expect(t1, s, t2)).call$0();
    },
    _HeaderValue$2: function(_value, parameters) {
    }
  },
  _HeaderValue_toString_closure: {
    "^": "Closure:49;sb_0",
    call$2: function($name, value) {
      var t1 = this.sb_0;
      t1.write$1("; ");
      t1.write$1($name);
      t1.write$1("=");
      t1.write$1(value);
    }
  },
  _HeaderValue__parse_done: {
    "^": "Closure:27;box_0,s_1",
    call$0: function() {
      return this.box_0.index_0 === J.get$length$asx(this.s_1);
    }
  },
  _HeaderValue__parse_skipWS: {
    "^": "Closure:1;box_0,s_2,done_3",
    call$0: function() {
      var t1, t2, t3, t4;
      for (t1 = this.done_3, t2 = this.box_0, t3 = this.s_2, t4 = J.getInterceptor$asx(t3); t1.call$0() !== true;) {
        if (!J.$eq(t4.$index(t3, t2.index_0), " ") && !J.$eq(t4.$index(t3, t2.index_0), "\t"))
          return;
        t2.index_0 = t2.index_0 + 1;
      }
    }
  },
  _HeaderValue__parse_parseValue: {
    "^": "Closure:47;box_0,s_4,parameterSeparator_5,done_6",
    call$0: function() {
      var t1, start, t2, t3, t4, t5;
      t1 = this.box_0;
      start = t1.index_0;
      for (t2 = this.done_6, t3 = this.s_4, t4 = J.getInterceptor$asx(t3), t5 = this.parameterSeparator_5; t2.call$0() !== true;) {
        if (J.$eq(t4.$index(t3, t1.index_0), " ") || J.$eq(t4.$index(t3, t1.index_0), "\t") || J.$eq(t4.$index(t3, t1.index_0), t5))
          break;
        t1.index_0 = t1.index_0 + 1;
      }
      return t4.substring$2(t3, start, t1.index_0);
    }
  },
  _HeaderValue__parse_expect: {
    "^": "Closure:16;box_0,s_7,done_8",
    call$1: function(expected) {
      var t1;
      if (this.done_8.call$0() === true || !J.$eq(J.$index$asx(this.s_7, this.box_0.index_0), expected))
        throw H.wrapException(new P.HttpException("Failed to parse header value", null));
      t1 = this.box_0;
      t1.index_0 = t1.index_0 + 1;
    }
  },
  _HeaderValue__parse_maybeExpect: {
    "^": "Closure:16;box_0,s_9",
    call$1: function(expected) {
      var t1 = this.box_0;
      if (J.$eq(J.$index$asx(this.s_9, t1.index_0), expected))
        t1.index_0 = t1.index_0 + 1;
    }
  },
  _HeaderValue__parse_parseParameters: {
    "^": "Closure:1;box_0,this_10,s_11,parameterSeparator_12,preserveBackslash_13,done_14,skipWS_15,parseValue_16,expect_17",
    call$0: function() {
      var parameters, t1, t2, t3, t4, t5, t6, $name;
      parameters = P.HashMap_HashMap(null, null, null, J.JSString, J.JSString);
      this.this_10._parameters = H.setRuntimeTypeInfo(new P._UnmodifiableMap(parameters), [null, null]);
      t1 = this.box_0;
      t2 = this.s_11;
      t3 = this.done_14;
      t4 = new P._HeaderValue__parse_parseParameters_parseParameterName(t1, t2, t3);
      t2 = new P._HeaderValue__parse_parseParameters_parseParameterValue(t1, t2, this.preserveBackslash_13, t3, this.parseValue_16);
      for (t1 = this.expect_17, t5 = this.parameterSeparator_12, t6 = this.skipWS_15; t3.call$0() !== true;) {
        t6.call$0();
        if (t3.call$0() === true)
          return;
        $name = t4.call$0();
        t6.call$0();
        t1.call$1("=");
        t6.call$0();
        parameters.$indexSet(0, $name, t2.call$0());
        t6.call$0();
        if (t3.call$0() === true)
          return;
        t1.call$1(t5);
      }
    }
  },
  _HeaderValue__parse_parseParameters_parseParameterName: {
    "^": "Closure:47;box_0,s_18,done_19",
    call$0: function() {
      var t1, start, t2, t3, t4;
      t1 = this.box_0;
      start = t1.index_0;
      for (t2 = this.done_19, t3 = this.s_18, t4 = J.getInterceptor$asx(t3); t2.call$0() !== true;) {
        if (J.$eq(t4.$index(t3, t1.index_0), " ") || J.$eq(t4.$index(t3, t1.index_0), "\t") || J.$eq(t4.$index(t3, t1.index_0), "="))
          break;
        t1.index_0 = t1.index_0 + 1;
      }
      return t4.substring$2(t3, start, t1.index_0).toLowerCase();
    }
  },
  _HeaderValue__parse_parseParameters_parseParameterValue: {
    "^": "Closure:47;box_0,s_20,preserveBackslash_21,done_22,parseValue_23",
    call$0: function() {
      var t1, t2, t3, sb, t4, t5, str;
      t1 = this.s_20;
      t2 = this.box_0;
      t3 = J.getInterceptor$asx(t1);
      if (J.$eq(t3.$index(t1, t2.index_0), "\"")) {
        sb = P.StringBuffer$("");
        t2.index_0 = t2.index_0 + 1;
        for (t4 = this.done_22, t5 = this.preserveBackslash_21; t4.call$0() !== true;) {
          if (J.$eq(t3.$index(t1, t2.index_0), "\\")) {
            if (t2.index_0 + 1 === t3.get$length(t1))
              throw H.wrapException(new P.HttpException("Failed to parse header value", null));
            if (t5 && !J.$eq(t3.$index(t1, t2.index_0 + 1), "\"")) {
              str = t3.$index(t1, t2.index_0);
              str = typeof str === "string" ? str : H.S(str);
              sb._contents = sb._contents + str;
            }
            t2.index_0 = t2.index_0 + 1;
          } else if (J.$eq(t3.$index(t1, t2.index_0), "\"")) {
            t2.index_0 = t2.index_0 + 1;
            break;
          }
          str = t3.$index(t1, t2.index_0);
          str = typeof str === "string" ? str : H.S(str);
          sb._contents = sb._contents + str;
          t2.index_0 = t2.index_0 + 1;
        }
        return sb._contents;
      } else
        return this.parseValue_23.call$0();
    }
  },
  _ContentType: {
    "^": "_HeaderValue;_primaryType,_subType,_io$_value,_parameters"
  },
  _Cookie: {
    "^": "Object;name<,value<,expires,maxAge,domain,path,httpOnly,secure",
    toString$0: function(_) {
      var sb = P.StringBuffer$("");
      sb.write$1(this.name);
      sb.write$1("=");
      sb.write$1(this.value);
      if (this.path != null) {
        sb.write$1("; Path=");
        sb.write$1(this.path);
      }
      if (this.secure)
        sb.write$1("; Secure");
      if (this.httpOnly)
        sb.write$1("; HttpOnly");
      return sb._contents;
    },
    _validate$0: function() {
      var t1, t2, i, codeUnit;
      for (t1 = this.name, t2 = t1.length, i = 0; i < t2; ++i) {
        if (i >= t2)
          H.throwExpression(P.RangeError$value(i));
        codeUnit = t1.charCodeAt(i);
        if (codeUnit <= 32 || codeUnit >= 127 || H.Lists_indexOf(C.List_A8J, t1[i], 0, 17) >= 0)
          throw H.wrapException(P.FormatException$("Invalid character in cookie name, code unit: '" + codeUnit + "'"));
      }
      for (i = 0; t1 = this.value, t2 = t1.length, i < t2; ++i) {
        if (i >= t2)
          H.throwExpression(P.RangeError$value(i));
        codeUnit = t1.charCodeAt(i);
        if (codeUnit !== 33)
          if (!(codeUnit >= 35 && codeUnit <= 43))
            if (!(codeUnit >= 45 && codeUnit <= 58))
              if (!(codeUnit >= 60 && codeUnit <= 91))
                t1 = codeUnit >= 93 && codeUnit <= 126;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (!t1)
          throw H.wrapException(P.FormatException$("Invalid character in cookie value, code unit: '" + codeUnit + "'"));
      }
    }
  },
  _UnmodifiableMap: {
    "^": "Object;_io$_map",
    $index: function(_, key) {
      return this._io$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable map"));
    },
    forEach$1: function(_, f) {
      return this._io$_map.forEach$1(0, f);
    },
    get$keys: function() {
      var t1 = this._io$_map;
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$values: function() {
      return this._io$_map.get$values();
    },
    get$length: function(_) {
      return this._io$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._io$_map._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._io$_map._collection$_length !== 0;
    },
    $isMap: true
  },
  _HttpIncoming: {
    "^": "Stream;_transferLength,_dataCompleter,_stream,fullBodyRead,headers,upgraded,statusCode,reasonPhrase,method,uri<,hasSubscriber",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1;
      this.hasSubscriber = true;
      t1 = this._stream;
      return H.setRuntimeTypeInfo(new P._HandleErrorStream(new P._HttpIncoming_listen_closure(this), null, t1), [H.getRuntimeTypeArgument(t1, "Stream", 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    get$dataDone: function() {
      return this._dataCompleter.future;
    },
    $asStream: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  _HttpIncoming_listen_closure: {
    "^": "Closure:24;this_0",
    call$1: function(error) {
      throw H.wrapException(new P.HttpException(error.get$message(), this.this_0.uri));
    }
  },
  _HttpInboundMessage: {
    "^": "Stream;",
    get$cookies: function() {
      var t1 = this._cookies;
      if (t1 != null)
        return t1;
      t1 = this._incoming.headers._parseCookies$0();
      this._cookies = t1;
      return t1;
    },
    $asStream: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  _HttpRequest: {
    "^": "_HttpInboundMessage;response<,_httpServer,_httpConnection,_session,_requestedUri,_incoming,_cookies",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._incoming.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$2$cancelOnError: function(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    get$uri: function() {
      return this._incoming.uri;
    },
    _HttpRequest$4: function(response, _incoming, _httpServer, _httpConnection) {
      var t1, t2, sessionIds, sessionId, t3;
      t1 = this._incoming.headers;
      if (t1.protocolVersion === "1.1") {
        t2 = this.response.headers;
        t2.set$chunkedTransferEncoding(true);
        t2.set$persistentConnection(t1._persistentConnection);
      }
      t1 = this._httpServer;
      if (t1._sessionManagerInstance != null) {
        t2 = this.get$cookies();
        t2.toString;
        t2 = H.setRuntimeTypeInfo(new H.WhereIterable(t2, new P._HttpRequest_closure()), [null]);
        sessionIds = H.MappedIterable_MappedIterable(t2, new P._HttpRequest_closure0(), H.getRuntimeTypeArgument(t2, "IterableBase", 0), null);
        for (t2 = sessionIds._iterable, t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, t2.get$iterator(t2), sessionIds._f), [H.getTypeArgumentByIndex(sessionIds, 0), H.getTypeArgumentByIndex(sessionIds, 1)]); t2.moveNext$0();) {
          sessionId = t2._current;
          t3 = t1._sessionManagerInstance;
          if (t3 == null) {
            t3 = new P._HttpSessionManager(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), 1200, null, null, null);
            t1._sessionManagerInstance = t3;
          }
          this._session = t3._sessions.$index(0, sessionId);
        }
      }
    },
    static: {_HttpRequest$: function(response, _incoming, _httpServer, _httpConnection) {
        var t1 = new P._HttpRequest(response, _httpServer, _httpConnection, null, null, _incoming, null);
        t1._HttpRequest$4(response, _incoming, _httpServer, _httpConnection);
        return t1;
      }}
  },
  _HttpRequest_closure: {
    "^": "Closure:24;",
    call$1: function(cookie) {
      var t1 = cookie.get$name();
      t1.toString;
      return t1.toUpperCase() === "DARTSESSID";
    }
  },
  _HttpRequest_closure0: {
    "^": "Closure:24;",
    call$1: function(cookie) {
      return cookie.get$value();
    }
  },
  _HttpOutboundMessage: {
    "^": "_IOSinkImpl;",
    get$encoding: function() {
      var t1, t2, charset;
      if (this._encodingSet && this._outgoing.headersWritten)
        return this._encoding;
      t1 = this.headers;
      if (t1.get$contentType() != null) {
        t2 = t1.get$contentType();
        t2._ensureParameters$0();
        t2 = t2._parameters._io$_map.$index(0, "charset") != null;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.get$contentType();
        t1._ensureParameters$0();
        charset = t1._parameters._io$_map.$index(0, "charset");
      } else
        charset = "iso-8859-1";
      return P.Encoding_getByName(charset);
    },
    add$1: function(_, data) {
      if (J.get$length$asx(data) === 0)
        return;
      P._StreamSinkImpl.prototype.add$1.call(this, this, data);
    },
    write$1: function(obj) {
      if (!this._encodingSet) {
        this._encoding = this.get$encoding();
        this._encodingSet = true;
      }
      P._IOSinkImpl.prototype.write$1.call(this, obj);
    },
    _HttpOutboundMessage$3: function(uri, protocolVersion, outgoing, $T) {
      this._outgoing.outbound = this;
      this._encodingMutable = false;
    }
  },
  _HttpResponse: {
    "^": "_HttpOutboundMessage;_statusCode,_reasonPhrase,_cookies,_httpRequest<,_deadline,_deadlineTimer,_encodingSet,_uri,_outgoing,headers,_encoding,_encodingMutable,_io$_target,_doneCompleter,_io$_doneFuture,_controllerInstance,_controllerCompleter,_isClosed,_isBound,_io$_hasError",
    detachSocket$0: function() {
      var t1, future;
      t1 = this._outgoing;
      if (t1.headersWritten)
        throw H.wrapException(new P.StateError("Headers already sent"));
      this.set$deadline(null);
      future = this._httpRequest._httpConnection.detachSocket$0();
      t1.writeHeaders$2$drainRequest$setOutgoing(false, false);
      this.close$0();
      this._io$_doneFuture.catchError$1(new P._HttpResponse_detachSocket_closure());
      return future;
    },
    set$deadline: function(d) {
      var t1 = this._deadlineTimer;
      if (t1 != null)
        t1.cancel$0();
      this._deadline = d;
      return;
    },
    _writeHeader$0: function() {
      var t1, buffer, t2, t3, t4, offset, offset0;
      t1 = {};
      buffer = new Uint8Array(8192);
      t1.offset_0 = 0;
      t2 = new P._HttpResponse__writeHeader_write(t1, buffer);
      t3 = this.headers;
      if (t3.protocolVersion === "1.1")
        t2.call$1(C.List_2Vk);
      else
        t2.call$1(C.List_2Vk0);
      t4 = t1.offset_0;
      t1.offset_0 = t4 + 1;
      if (t4 < 0 || t4 >= 8192)
        return H.ioore(buffer, t4);
      buffer[t4] = 32;
      t2.call$1(new J._CodeUnits(C.JSInt_methods.toString$0(this._statusCode)));
      t4 = t1.offset_0;
      t1.offset_0 = t4 + 1;
      if (t4 < 0 || t4 >= 8192)
        return H.ioore(buffer, t4);
      buffer[t4] = 32;
      t4 = this._findReasonPhrase$1(this._statusCode);
      t4.toString;
      t2.call$1(new J._CodeUnits(t4));
      t4 = t1.offset_0;
      offset = t4 + 1;
      t1.offset_0 = offset;
      if (t4 < 0 || t4 >= 8192)
        return H.ioore(buffer, t4);
      buffer[t4] = 13;
      t1.offset_0 = offset + 1;
      if (offset < 0 || offset >= 8192)
        return H.ioore(buffer, offset);
      buffer[offset] = 10;
      this._httpRequest._session;
      t2 = this._cookies;
      if (t2 != null) {
        t2.toString;
        H.IterableMixinWorkaround_forEach(t2, new P._HttpResponse__writeHeader_closure(this));
      }
      t3._mutable = false;
      offset = t3._write$2(buffer, t1.offset_0);
      t1.offset_0 = offset;
      offset0 = offset + 1;
      t1.offset_0 = offset0;
      if (offset < 0 || offset >= 8192)
        return H.ioore(buffer, offset);
      buffer[offset] = 13;
      offset = offset0 + 1;
      t1.offset_0 = offset;
      if (offset0 < 0 || offset0 >= 8192)
        return H.ioore(buffer, offset0);
      buffer[offset0] = 10;
      t1 = this._outgoing;
      t1._buffer = buffer;
      t1._io$_length = offset;
    },
    _findReasonPhrase$1: function(statusCode) {
      switch (statusCode) {
        case 100:
          return "Continue";
        case 101:
          return "Switching Protocols";
        case 200:
          return "OK";
        case 201:
          return "Created";
        case 202:
          return "Accepted";
        case 203:
          return "Non-Authoritative Information";
        case 204:
          return "No Content";
        case 205:
          return "Reset Content";
        case 206:
          return "Partial Content";
        case 300:
          return "Multiple Choices";
        case 301:
          return "Moved Permanently";
        case 302:
          return "Found";
        case 303:
          return "See Other";
        case 304:
          return "Not Modified";
        case 305:
          return "Use Proxy";
        case 307:
          return "Temporary Redirect";
        case 400:
          return "Bad Request";
        case 401:
          return "Unauthorized";
        case 402:
          return "Payment Required";
        case 403:
          return "Forbidden";
        case 404:
          return "Not Found";
        case 405:
          return "Method Not Allowed";
        case 406:
          return "Not Acceptable";
        case 407:
          return "Proxy Authentication Required";
        case 408:
          return "Request Time-out";
        case 409:
          return "Conflict";
        case 410:
          return "Gone";
        case 411:
          return "Length Required";
        case 412:
          return "Precondition Failed";
        case 413:
          return "Request Entity Too Large";
        case 414:
          return "Request-URI Too Large";
        case 415:
          return "Unsupported Media Type";
        case 416:
          return "Requested range not satisfiable";
        case 417:
          return "Expectation Failed";
        case 500:
          return "Internal Server Error";
        case 501:
          return "Not Implemented";
        case 502:
          return "Bad Gateway";
        case 503:
          return "Service Unavailable";
        case 504:
          return "Gateway Time-out";
        case 505:
          return "Http Version not supported";
        default:
          return "Status " + statusCode;
      }
    },
    $is_HttpResponse: true,
    $as_HttpOutboundMessage: function() {
      return [P.HttpResponse];
    },
    $as_StreamSinkImpl: function() {
      return [[J.JSArray, J.JSInt]];
    },
    $isHttpResponse: true
  },
  _HttpResponse_detachSocket_closure: {
    "^": "Closure:24;",
    call$1: function(_) {
    }
  },
  _HttpResponse_deadline_closure: {
    "^": "Closure:22;this_0",
    call$0: function() {
      var t1 = this.this_0._outgoing;
      t1._socketError = true;
      t1.socket.destroy$0();
    }
  },
  _HttpResponse__writeHeader_write: {
    "^": "Closure:44;box_0,buffer_1",
    call$1: function(bytes) {
      var t1, len, t2, t3, i, t4, t5;
      t1 = J.getInterceptor$asx(bytes);
      len = t1.get$length(bytes);
      for (t2 = this.buffer_1, t3 = this.box_0, i = 0; t4 = t3.offset_0, i < len; ++i) {
        t4 += i;
        t5 = t1.$index(bytes, i);
        if (t4 < 0 || t4 >= 8192)
          return H.ioore(t2, t4);
        t2[t4] = t5;
      }
      t3.offset_0 = t4 + len;
    }
  },
  _HttpResponse__writeHeader_closure: {
    "^": "Closure:24;this_2",
    call$1: function(cookie) {
      var t1 = this.this_2.headers;
      if (!t1._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      t1._addAll$2(C.JSString_methods.toLowerCase$0("set-cookie"), cookie);
    }
  },
  _HttpGZipSink: {
    "^": "ByteConversionSink;_consume",
    _consume$1: function(arg0) {
      return this._consume.call$1(arg0);
    },
    add$1: function(_, chunk) {
      this._consume$1(chunk);
    },
    close$0: function() {
    }
  },
  _HttpOutgoing: {
    "^": "Object;_doneCompleter,socket,ignoreBody,headersWritten,_buffer,_io$_length,_closeFuture,chunked,_pendingChunkedFooter,contentLength,_bytesWritten,_gzip,_gzipSink,_gzipAdd,_gzipBuffer,_gzipBufferLength,_socketError,outbound",
    writeHeaders$2$drainRequest$setOutgoing: function(drainRequest, setOutgoing) {
      var t1, t2, acceptEncodings, contentEncoding, t3, $name, gzip, drainFuture, contentLength;
      t1 = new P._HttpOutgoing_writeHeaders_write(this);
      if (this.headersWritten)
        return;
      this.headersWritten = true;
      t2 = this.outbound;
      if (!!J.getInterceptor(t2).$is_HttpResponse) {
        if (t2.headers._chunkedTransferEncoding) {
          acceptEncodings = t2.get$_httpRequest()._incoming.headers._headers.$index(0, C.JSString_methods.toLowerCase$0("accept-encoding"));
          contentEncoding = this.outbound.headers._headers.$index(0, C.JSString_methods.toLowerCase$0("content-encoding"));
          if (acceptEncodings != null && J.expand$1$ax(acceptEncodings, new P._HttpOutgoing_writeHeaders_closure()).any$1(0, new P._HttpOutgoing_writeHeaders_closure0()) === true && contentEncoding == null) {
            t3 = this.outbound.headers;
            if (!t3._mutable)
              H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
            $name = "content-encoding".toLowerCase();
            t3._headers.remove$1(0, $name);
            t3._addAll$2($name, "gzip");
            gzip = true;
          } else
            gzip = false;
        } else
          gzip = false;
        drainFuture = drainRequest && !t2.get$_httpRequest()._incoming.hasSubscriber ? t2.get$_httpRequest().listen$2$cancelOnError(null, true).asFuture$1(null).catchError$1(new P._HttpOutgoing_writeHeaders_closure1()) : null;
      } else {
        drainFuture = null;
        gzip = false;
      }
      if (this.ignoreBody)
        return t1.call$0();
      if (setOutgoing) {
        t2 = this.outbound.headers;
        contentLength = t2._contentLength;
        if (t2._chunkedTransferEncoding) {
          this.chunked = true;
          if (gzip)
            this.set$gzip(true);
        } else if (J.$ge$n(contentLength, 0))
          this.contentLength = contentLength;
      }
      if (drainFuture != null)
        return drainFuture.then$1(new P._HttpOutgoing_writeHeaders_closure2(t1));
      return t1.call$0();
    },
    writeHeaders$0: function() {
      return this.writeHeaders$2$drainRequest$setOutgoing(true, true);
    },
    addStream$1: function(stream) {
      var t1, future, controller, t2;
      t1 = {};
      if (this._socketError) {
        stream.listen$1(null).cancel$0();
        return P._Future$immediate(this.outbound, null);
      }
      if (this.ignoreBody) {
        stream.listen$2$cancelOnError(null, true).asFuture$1(null).catchError$1(new P._HttpOutgoing_addStream_closure());
        future = this.writeHeaders$0();
        if (future != null)
          return future.then$1(new P._HttpOutgoing_addStream_closure0(this));
        return this.close$0();
      }
      t1.sub_0 = null;
      controller = P.StreamController_StreamController(null, null, new P._HttpOutgoing_addStream_closure1(t1), new P._HttpOutgoing_addStream_closure2(t1), true, null);
      t2 = controller.get$addError();
      t1.sub_0 = stream.listen$4$cancelOnError$onDone$onError(new P._HttpOutgoing_addStream_onData(this, controller), true, controller.get$close(), t2);
      if (!this.headersWritten) {
        future = this.writeHeaders$0();
        if (future != null)
          t1.sub_0.pause$1(future);
      }
      return this.socket.addStream$1(H.setRuntimeTypeInfo(new P._ControllerStream(controller), [null])).then$2$onError(new P._HttpOutgoing_addStream_closure3(this), new P._HttpOutgoing_addStream_closure4(this));
    },
    close$0: function() {
      var t1, error, t2, future;
      t1 = this._closeFuture;
      if (t1 != null)
        return t1;
      if (this._socketError)
        return P._Future$immediate(this.outbound, null);
      if (!this.headersWritten && !this.ignoreBody)
        if (J.$eq(this.outbound.headers._contentLength, -1)) {
          this.outbound.headers.set$chunkedTransferEncoding(false);
          this.outbound.headers.set$contentLength(0);
        } else if (J.$gt$n(this.outbound.headers._contentLength, 0)) {
          error = new P.HttpException("No content even though contentLength was specified to be greater than 0: " + H.S(this.outbound.headers._contentLength) + ".", this.outbound._uri);
          this._doneCompleter.completeError$1(error);
          t1 = P._Future$immediateError(error, null, null);
          this._closeFuture = t1;
          return t1;
        }
      t1 = this.contentLength;
      if (t1 != null) {
        t2 = this._bytesWritten;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (t2 < t1) {
          error = new P.HttpException("Content size below specified contentLength.  " + H.S(t2) + " bytes written but expected " + H.S(this.contentLength) + ".", this.outbound._uri);
          this._doneCompleter.completeError$1(error);
          t1 = P._Future$immediateError(error, null, null);
          this._closeFuture = t1;
          return t1;
        }
      }
      t1 = new P._HttpOutgoing_close_finalize(this);
      future = this.writeHeaders$0();
      if (future != null) {
        t1 = future.whenComplete$1(t1);
        this._closeFuture = t1;
        return t1;
      }
      t1 = t1.call$0();
      this._closeFuture = t1;
      return t1;
    },
    set$gzip: function(value) {
      this._gzip = value;
      if (value) {
        this._gzipBuffer = new Uint8Array(8192);
        P._validateZLibeLevel(6);
        P._validateZLibMemLevel(8);
        P._validateZLibStrategy(0);
        P._validateZLibWindowBits(15);
        this._gzipSink = new P.ZLibEncoder(true, 6, 8, 0, 15, null, false).startChunkedConversion$1(new P._HttpGZipSink(new P._HttpOutgoing_gzip_closure(this)));
      }
    },
    _ignoreError$1: function(error) {
      return !!J.getInterceptor(this.outbound).$isHttpResponse;
    },
    _addChunk$2: function(chunk, add) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor$asx(chunk);
      t2 = t1.get$length(chunk);
      t3 = this._buffer;
      t3.length;
      t4 = this._io$_length;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 8192 - t4) {
        add.call$1(H.NativeUint8List_NativeUint8List$view(t3.buffer, 0, t4));
        this._buffer = new Uint8Array(8192);
        this._io$_length = 0;
      }
      t2 = t1.get$length(chunk);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 8192)
        add.call$1(chunk);
      else {
        t2 = this._buffer;
        t3 = this._io$_length;
        t4 = t1.get$length(chunk);
        if (typeof t4 !== "number")
          return H.iae(t4);
        J.setRange$3$ax(t2, t3, t3 + t4, chunk);
        t4 = this._io$_length;
        t1 = t1.get$length(chunk);
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._io$_length = t4 + t1;
      }
    },
    _chunkHeader$1: function($length) {
      var size, len, t1, footerAndHeader, t2, index, t3;
      if ($length === 0) {
        if (this._pendingChunkedFooter === 2)
          return C.List_E7y0;
        return C.List_yTu;
      }
      size = this._pendingChunkedFooter;
      len = $length;
      while (true) {
        if (typeof len !== "number")
          return len.$gt();
        if (!(len > 0))
          break;
        ++size;
        len = C.JSNumber_methods._shrOtherPositive$1(len, 4);
      }
      t1 = size + 2;
      footerAndHeader = new Uint8Array(t1);
      t2 = this._pendingChunkedFooter;
      if (t2 === 2) {
        footerAndHeader[0] = 13;
        footerAndHeader[1] = 10;
      }
      for (index = size; index > t2;) {
        --index;
        if (typeof $length !== "number")
          return $length.$and();
        t3 = C.List_cGl[$length & 15];
        if (index >= t1)
          return H.ioore(footerAndHeader, index);
        footerAndHeader[index] = t3;
        $length = C.JSNumber_methods._shrOtherPositive$1($length, 4);
      }
      if (size >= t1)
        return H.ioore(footerAndHeader, size);
      footerAndHeader[size] = 13;
      t2 = size + 1;
      if (t2 >= t1)
        return H.ioore(footerAndHeader, t2);
      footerAndHeader[t2] = 10;
      return footerAndHeader;
    },
    static: {"^": "_HttpOutgoing__footerAndChunk0Length,_HttpOutgoing__chunk0Length"}
  },
  _HttpOutgoing_writeHeaders_write: {
    "^": "Closure:30;this_0",
    call$0: function() {
      var exception;
      try {
        this.this_0.outbound._writeHeader$0();
      } catch (exception) {
        H.unwrapException(exception);
        return P._Future$immediateError(new P.HttpException("Headers size exceeded the of '8192' bytes", null), null, null);
      }

    }
  },
  _HttpOutgoing_writeHeaders_closure: {
    "^": "Closure:24;",
    call$1: function(list) {
      return J.split$1$s(list, ",");
    }
  },
  _HttpOutgoing_writeHeaders_closure0: {
    "^": "Closure:24;",
    call$1: function(encoding) {
      return J.trim$0$s(encoding).toLowerCase() === "gzip";
    }
  },
  _HttpOutgoing_writeHeaders_closure1: {
    "^": "Closure:24;",
    call$1: function(_) {
    }
  },
  _HttpOutgoing_writeHeaders_closure2: {
    "^": "Closure:24;write_1",
    call$1: function(_) {
      return this.write_1.call$0();
    }
  },
  _HttpOutgoing_addStream_closure: {
    "^": "Closure:24;",
    call$1: function(_) {
    }
  },
  _HttpOutgoing_addStream_closure0: {
    "^": "Closure:24;this_1",
    call$1: function(_) {
      return this.this_1.close$0();
    }
  },
  _HttpOutgoing_addStream_closure1: {
    "^": "Closure:22;box_0",
    call$0: function() {
      return this.box_0.sub_0.pause$0();
    }
  },
  _HttpOutgoing_addStream_closure2: {
    "^": "Closure:22;box_0",
    call$0: function() {
      return this.box_0.sub_0.resume$0();
    }
  },
  _HttpOutgoing_addStream_onData: {
    "^": "Closure:2;this_2,controller_3",
    call$1: function(data) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_2;
      if (t1._socketError)
        return;
      t2 = J.getInterceptor$asx(data);
      if (t2.get$length(data) === 0)
        return;
      if (t1.chunked) {
        if (t1._gzip) {
          t3 = this.controller_3;
          t1._gzipAdd = t3.get$add(t3);
          t3 = t1._gzipSink;
          t3 = t3.get$add(t3);
          t4 = t2.get$length(data);
          t5 = t1._gzipBuffer;
          t5.length;
          t6 = t1._gzipBufferLength;
          if (typeof t4 !== "number")
            return t4.$gt();
          if (t4 > 8192 - t6) {
            t3.call$1(H.NativeUint8List_NativeUint8List$view(t5.buffer, 0, t6));
            t1._gzipBuffer = new Uint8Array(8192);
            t1._gzipBufferLength = 0;
          }
          t4 = t2.get$length(data);
          if (typeof t4 !== "number")
            return t4.$gt();
          if (t4 > 8192)
            t3.call$1(data);
          else {
            t3 = t1._gzipBuffer;
            t4 = t1._gzipBufferLength;
            t5 = t2.get$length(data);
            if (typeof t5 !== "number")
              return H.iae(t5);
            J.setRange$3$ax(t3, t4, t4 + t5, data);
            t5 = t1._gzipBufferLength;
            t2 = t2.get$length(data);
            if (typeof t2 !== "number")
              return H.iae(t2);
            t1._gzipBufferLength = t5 + t2;
          }
          t1._gzipAdd = null;
          return;
        }
        t3 = this.controller_3;
        t1._addChunk$2(t1._chunkHeader$1(t2.get$length(data)), t3.get$add(t3));
        t1._pendingChunkedFooter = 2;
      } else if (t1.contentLength != null) {
        t3 = t1._bytesWritten;
        t2 = t2.get$length(data);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t3 + t2;
        t1._bytesWritten = t2;
        t3 = t1.contentLength;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 > t3) {
          t3 = this.controller_3;
          t1 = "Content size exceeds specified contentLength. " + H.S(t2) + " bytes written while expected " + H.S(t1.contentLength) + ". [" + P.String_String$fromCharCodes(data) + "]";
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t3._addError$2(new P.HttpException(t1, null), null);
          return;
        }
      }
      t2 = this.controller_3;
      t1._addChunk$2(data, t2.get$add(t2));
    }
  },
  _HttpOutgoing_addStream_closure3: {
    "^": "Closure:24;this_4",
    call$1: function(_) {
      return this.this_4.outbound;
    }
  },
  _HttpOutgoing_addStream_closure4: {
    "^": "Closure:24;this_5",
    call$1: function(error) {
      var t1 = this.this_5;
      if (t1._gzip)
        t1._gzipSink.close$0();
      t1._socketError = true;
      t1._doneCompleter.completeError$1(error);
      if (t1._ignoreError$1(error))
        return t1.outbound;
      else
        throw H.wrapException(error);
    }
  },
  _HttpOutgoing_close_finalize: {
    "^": "Closure:30;this_0",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.this_0;
      if (t1.chunked) {
        if (t1._gzip) {
          t2 = t1.socket;
          t1._gzipAdd = t2.get$add(t2);
          t2 = t1._gzipBufferLength;
          if (t2 > 0) {
            t3 = t1._gzipSink;
            t2 = H.NativeUint8List_NativeUint8List$view(t1._gzipBuffer.buffer, 0, t2);
            t3.addSlice$4(t2, 0, t2.length, false);
          }
          t1._gzipBuffer = null;
          t1._gzipSink.close$0();
          t1._gzipAdd = null;
        }
        t2 = t1.socket;
        t1._addChunk$2(t1._chunkHeader$1(0), t2.get$add(t2));
      }
      t2 = t1._io$_length;
      if (t2 > 0)
        t1.socket.add$1(0, H.NativeUint8List_NativeUint8List$view(t1._buffer.buffer, 0, t2));
      t1._buffer = null;
      return t1.socket.flush$0().then$2$onError(new P._HttpOutgoing_close_finalize_closure(t1), new P._HttpOutgoing_close_finalize_closure0(t1));
    }
  },
  _HttpOutgoing_close_finalize_closure: {
    "^": "Closure:24;this_1",
    call$1: function(_) {
      var t1, t2;
      t1 = this.this_1;
      t2 = t1._doneCompleter.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1.socket);
      return t1.outbound;
    }
  },
  _HttpOutgoing_close_finalize_closure0: {
    "^": "Closure:24;this_2",
    call$1: function(error) {
      var t1 = this.this_2;
      t1._doneCompleter.completeError$1(error);
      if (t1._ignoreError$1(error))
        return t1.outbound;
      else
        throw H.wrapException(error);
    }
  },
  _HttpOutgoing_gzip_closure: {
    "^": "Closure:24;this_0",
    call$1: function(data) {
      var t1 = this.this_0;
      if (t1._gzipAdd == null)
        return;
      t1._addChunk$2(t1._chunkHeader$1(J.get$length$asx(data)), t1._gzipAdd);
      t1._pendingChunkedFooter = 2;
      t1._addChunk$2(data, t1._gzipAdd);
    }
  },
  _HttpConnection: {
    "^": "LinkedListEntry;_socket,_httpServer,_httpParser,_io$_state,_io$_subscription,_idleTimer,_idleMark,_streamFuture,_list,_next,_previous",
    get$isMarkedIdle: function() {
      return this._idleMark;
    },
    destroy$0: function() {
      var t1 = this._io$_state;
      if (t1 === 2 || t1 === 3)
        return;
      this._io$_state = 2;
      this._socket.destroy$0();
    },
    detachSocket$0: function() {
      var t1, t2;
      this._io$_state = 3;
      this._list._unlink$1(this);
      this._httpServer._maybeCloseSessionManager$0();
      t1 = this._httpParser;
      t1._io$_state = 26;
      t2 = t1._socketSubscription;
      t1 = t1.readUnparsedData$0();
      return this._streamFuture.then$1(new P._HttpConnection_detachSocket_closure(this, new P._HttpDetachedIncoming(t2, t1)));
    },
    _HttpConnection$2: function(_socket, _httpServer) {
      var t1, t2, t3;
      t1 = this._httpParser;
      t2 = t1.get$_io$_onData();
      t3 = t1.get$_io$_onError();
      t1._socketSubscription = this._socket._incoming.listen$4$cancelOnError$onDone$onError(t2, null, t1.get$_io$_onDone(), t3);
      this._io$_subscription = H.setRuntimeTypeInfo(new P._ControllerStream(t1._controller), [null]).listen$4$cancelOnError$onDone$onError(new P._HttpConnection_closure(this), null, new P._HttpConnection_closure0(this), new P._HttpConnection_closure1(this));
    },
    static: {"^": "_HttpConnection__ACTIVE,_HttpConnection__IDLE,_HttpConnection__CLOSING,_HttpConnection__DETACHED", _HttpConnection$: function(_socket, _httpServer) {
        var t1 = new P._HttpConnection(_socket, _httpServer, P._HttpParser$_(true), 1, null, null, false, null, null, null, null);
        t1._HttpConnection$2(_socket, _httpServer);
        return t1;
      }}
  },
  _HttpConnection_closure: {
    "^": "Closure:24;this_0",
    call$1: function(incoming) {
      var t1, t2, t3, outgoing, t4, t5, t6, response, request;
      t1 = this.this_0;
      t2 = t1._httpServer;
      t2._idleConnections.remove$1(0, t1);
      t3 = t2._activeConnections;
      t3._insertAfter$2(t3._previous, t1);
      incoming.get$dataDone().then$1(new P._HttpConnection__closure(t1));
      t1._io$_subscription.pause$0();
      t1._io$_state = 0;
      t3 = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      outgoing = new P._HttpOutgoing(t3, t1._socket, false, false, null, 0, null, false, 0, null, 0, false, null, null, null, 0, false, null);
      t4 = incoming.uri;
      t5 = incoming.headers.protocolVersion;
      t6 = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      response = new P._HttpResponse(200, null, null, null, null, null, false, t4, outgoing, P._HttpHeaders$(t5, t4.scheme === "https" ? 443 : 80), null, true, outgoing, t6, null, null, null, false, false, false);
      response._io$_doneFuture = t6.future;
      response._HttpOutboundMessage$3(t4, t5, outgoing, P.HttpResponse);
      request = P._HttpRequest$(response, incoming, t2, t1);
      t1._streamFuture = t3.future.then$2$onError(new P._HttpConnection__closure0(t1, incoming, response, request), new P._HttpConnection__closure1(t1));
      outgoing.ignoreBody = request._incoming.method === "HEAD";
      response._httpRequest = request;
      t1 = t2._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(request);
    }
  },
  _HttpConnection__closure: {
    "^": "Closure:24;this_1",
    call$1: function(closing) {
      if (closing === true)
        this.this_1.destroy$0();
    }
  },
  _HttpConnection__closure0: {
    "^": "Closure:24;this_2,incoming_3,response_4,request_5",
    call$1: function(_) {
      var t1, t2;
      t1 = this.response_4;
      t1.set$deadline(null);
      t2 = this.this_2;
      if (t2._io$_state === 3)
        return;
      if (t1.headers._persistentConnection)
        if (this.request_5._incoming.headers._persistentConnection)
          if (this.incoming_3.fullBodyRead) {
            t1 = t2._httpParser;
            t1 = !(t1._connectionUpgrade === true && t1._io$_state === 26) && !t2._httpServer.closed;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        t2._io$_state = 1;
        t2._idleMark = false;
        t1 = t2._httpServer;
        t1._activeConnections.remove$1(0, t2);
        t1 = t1._idleConnections;
        t1._insertAfter$2(t1._previous, t2);
        t2._io$_subscription.resume$0();
      } else
        t2.destroy$0();
    }
  },
  _HttpConnection__closure1: {
    "^": "Closure:24;this_6",
    call$1: function(_) {
      this.this_6.destroy$0();
    }
  },
  _HttpConnection_closure0: {
    "^": "Closure:22;this_7",
    call$0: function() {
      this.this_7.destroy$0();
    }
  },
  _HttpConnection_closure1: {
    "^": "Closure:24;this_8",
    call$1: function(error) {
      this.this_8.destroy$0();
    }
  },
  _HttpConnection_detachSocket_closure: {
    "^": "Closure:24;this_0,detachedIncoming_1",
    call$1: function(_) {
      return new P._DetachedSocket(this.detachedIncoming_1, this.this_0._socket);
    }
  },
  _HttpServer: {
    "^": "Stream;serverHeader,_idleTimeout,_idleTimer,_sessionManagerInstance,closed,_serverSocket,_closeServer,_activeConnections,_idleConnections,_controller",
    set$idleTimeout: function(duration) {
      var t1 = this._idleTimer;
      if (t1 != null) {
        t1.cancel$0();
        this._idleTimer = null;
      }
      this._idleTimeout = duration;
      if (duration != null)
        this._idleTimer = P.Timer_Timer$periodic(duration, new P._HttpServer_idleTimeout_closure(this));
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1;
      this._serverSocket.listen$3$onDone$onError(new P._HttpServer_listen_closure(this), this._controller.get$close(), new P._HttpServer_listen_closure0(this));
      t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    close$1$force: [function(force) {
      var result, t1;
      this.closed = true;
      result = this._closeServer ? this._serverSocket.close$0() : P._Future$immediate(null, null);
      this.set$idleTimeout(null);
      if (force === true)
        for (t1 = this._activeConnections, t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          t1._current.destroy$0();
      for (t1 = this._idleConnections, t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.destroy$0();
      this._maybeCloseSessionManager$0();
      return result;
    }, function() {
      return this.close$1$force(false);
    }, "close$0", "call$1$force", "call$0", "get$close", 0, 3, 50, 51],
    _maybeCloseSessionManager$0: function() {
      if (this.closed && this._idleConnections._collection$_length === 0 && this._activeConnections._collection$_length === 0 && this._sessionManagerInstance != null) {
        this._sessionManagerInstance._stopTimer$0();
        this._sessionManagerInstance = null;
      }
    },
    _io$_HttpServer$_$2: function(_serverSocket, _closeServer) {
      this._controller = P.StreamController_StreamController(this.get$close(), null, null, null, true, P.HttpRequest);
      this.set$idleTimeout(C.Duration_120000000);
    },
    $asStream: function() {
      return [P.HttpRequest];
    },
    static: {_HttpServer_bind: function(address, port, backlog) {
        return P.ServerSocket_bind(address, port, backlog, false).then$1(new P._HttpServer_bind_closure());
      }}
  },
  _HttpServer_bind_closure: {
    "^": "Closure:24;",
    call$1: function(socket) {
      var t1, t2;
      t1 = H.setRuntimeTypeInfo(new P.LinkedList(0, 0, null, null), [P._HttpConnection]);
      t1._previous = t1;
      t1._next = t1;
      t2 = H.setRuntimeTypeInfo(new P.LinkedList(0, 0, null, null), [P._HttpConnection]);
      t2._previous = t2;
      t2._next = t2;
      t2 = new P._HttpServer(null, null, null, null, false, socket, true, t1, t2, null);
      t2._io$_HttpServer$_$2(socket, true);
      return t2;
    }
  },
  _HttpServer_idleTimeout_closure: {
    "^": "Closure:24;this_0",
    call$1: function(_) {
      var t1, idle;
      for (t1 = this.this_0._idleConnections, t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        idle = t1._current;
        if (idle.get$isMarkedIdle())
          idle.destroy$0();
        else
          idle._idleMark = true;
      }
    }
  },
  _HttpServer_listen_closure: {
    "^": "Closure:52;this_0",
    call$1: function(socket) {
      var t1, connection;
      socket.setOption$2(C.SocketOption_0, true);
      t1 = this.this_0;
      connection = P._HttpConnection$(socket, t1);
      t1 = t1._idleConnections;
      t1._insertAfter$2(t1._previous, connection);
    }
  },
  _HttpServer_listen_closure0: {
    "^": "Closure:24;this_1",
    call$1: function(error) {
      var t1 = this.this_1._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._addError$2(error, null);
    }
  },
  _DetachedSocket: {
    "^": "Stream;_incoming,_socket",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._incoming.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    write$1: function(obj) {
      return this._socket.write$1(obj);
    },
    writeAll$2: function(objects, separator) {
      this._socket._socket.writeAll$2(objects, separator);
    },
    add$1: [function(_, bytes) {
      return this._socket.add$1(0, bytes);
    }, "call$1", "get$add", 2, 0, 44],
    addError$2: function(error, stackTrace) {
      return this._socket.addError$2(error, stackTrace);
    },
    addStream$1: function(stream) {
      return this._socket.addStream$1(stream);
    },
    destroy$0: function() {
      return this._socket.destroy$0();
    },
    flush$0: function() {
      return this._socket.flush$0();
    },
    close$0: function() {
      return this._socket.close$0();
    },
    setOption$2: function(option, enabled) {
      return this._socket.setOption$2(option, enabled);
    },
    $asStream: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  _HttpDetachedStreamSubscription: {
    "^": "Object;_io$_subscription,_injectData,_isCanceled,_pauseCount,_userOnData,_scheduled",
    _userOnData$1: function(arg0) {
      return this._userOnData.call$1(arg0);
    },
    cancel$0: function() {
      this._isCanceled = true;
      this._injectData = null;
      return this._io$_subscription.cancel$0();
    },
    onData$1: function(handleData) {
      this._userOnData = handleData;
      this._io$_subscription.onData$1(handleData);
    },
    onDone$1: function(handleDone) {
      this._io$_subscription.onDone$1(handleDone);
    },
    onError$1: function(handleError) {
      this._io$_subscription.onError$1(handleError);
    },
    pause$1: function(resumeSignal) {
      if (this._injectData == null)
        this._io$_subscription.pause$1(resumeSignal);
      else
        this._pauseCount = this._pauseCount + 1;
    },
    pause$0: function() {
      return this.pause$1(null);
    },
    resume$0: function() {
      if (this._injectData == null)
        this._io$_subscription.resume$0();
      else {
        this._pauseCount = this._pauseCount - 1;
        this._maybeScheduleData$0();
      }
    },
    _maybeScheduleData$0: function() {
      if (this._scheduled)
        return;
      if (this._pauseCount !== 0)
        return;
      this._scheduled = true;
      P.scheduleMicrotask(new P._HttpDetachedStreamSubscription__maybeScheduleData_closure(this));
    }
  },
  _HttpDetachedStreamSubscription__maybeScheduleData_closure: {
    "^": "Closure:22;this_0",
    call$0: function() {
      var t1, data;
      t1 = this.this_0;
      t1._scheduled = false;
      if (t1._pauseCount > 0 || t1._isCanceled)
        return;
      data = t1._injectData;
      t1._injectData = null;
      t1._io$_subscription.resume$0();
      if (t1._userOnData != null)
        t1._userOnData$1(data);
    }
  },
  _HttpDetachedIncoming: {
    "^": "Stream;subscription,bufferedData",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2;
      t1 = this.subscription;
      if (t1 != null) {
        t1.onData$1(onData);
        t1.onError$1(onError);
        t1.onDone$1(onDone);
        t2 = this.bufferedData;
        if (t2 == null) {
          t1.resume$0();
          return t1;
        }
        t1 = new P._HttpDetachedStreamSubscription(t1, t2, false, 1, onData, false);
        t1.resume$0();
        return t1;
      } else
        return P.Stream_Stream$fromIterable(this.bufferedData, null).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    $asStream: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  _HttpParser: {
    "^": "Stream;_parserCalled,_buffer,_io$_index,_requestParser,_io$_state,_httpVersionIndex,_messageType,_statusCode,_statusCodeLength,_io$_method,_uri_or_reason_phrase,_headerField,_headerValue,_httpVersion,_transferLength,_persistentConnection,_connectionUpgrade,_chunked,_noMessageBody,_remainingContent,_headers,_incoming,_socketSubscription,_paused,_bodyPaused,_controller,_bodyController",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return H.setRuntimeTypeInfo(new P._ControllerStream(this._controller), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _parse$0: function() {
      var e, s, exception, t1;
      try {
        this._doParse$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this._io$_state = 27;
        this._reportError$2(e, s);
      }

    },
    _doParse$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, $byte, i, headerField, headerValue, tokens, tmp, value, dataAvailable, t9, data;
      this._parserCalled = true;
      t1 = this._io$_state;
      if (t1 === 25)
        throw H.wrapException(new P.HttpException("Data on closed connection", null));
      if (t1 === 27)
        throw H.wrapException(new P.HttpException("Data on failed connection", null));
      t1 = this._headerField;
      t2 = this._headerValue;
      t3 = this._uri_or_reason_phrase;
      t4 = this._io$_method;
      t5 = this._requestParser;
      t6 = !t5;
      while (true) {
        t7 = this._buffer;
        if (t7 != null) {
          t8 = this._io$_index;
          t7 = J.get$length$asx(t7);
          if (typeof t8 !== "number")
            return t8.$lt();
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (t8 < t7) {
            t7 = this._io$_state;
            t7 = t7 !== 27 && t7 !== 26;
          } else
            t7 = false;
        } else
          t7 = false;
        if (!t7)
          break;
        t7 = this._incoming == null;
        if (!(!t7 && this._bodyPaused))
          t7 = t7 && this._paused;
        else
          t7 = true;
        if (t7) {
          this._parserCalled = false;
          return;
        }
        t7 = this._buffer;
        t8 = this._io$_index;
        if (typeof t8 !== "number")
          return t8.$add();
        this._io$_index = t8 + 1;
        $byte = J.$index$asx(t7, t8);
        switch (this._io$_state) {
          case 0:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 72)) {
              this._httpVersionIndex = 1;
              this._io$_state = 1;
            } else {
              if (t7.$gt($byte, 31))
                if (t7.$lt($byte, 128)) {
                  if ($byte >>> 0 !== $byte || $byte >= 256)
                    return H.ioore(C.List_NUU, $byte);
                  t7 = C.List_NUU[$byte] !== true;
                } else
                  t7 = false;
              else
                t7 = false;
              if (!t7)
                throw H.wrapException(new P.HttpException("Invalid request method", null));
              t4.push($byte);
              if (t6)
                throw H.wrapException(new P.HttpException("Invalid response line", null));
              this._io$_state = 3;
            }
            break;
          case 1:
            t7 = this._httpVersionIndex;
            if (typeof t7 !== "number")
              return t7.$lt();
            if (t7 < 4 && J.$eq($byte, C.List_72_84_84_80[t7])) {
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
            } else if (this._httpVersionIndex === 4 && J.$eq($byte, 47)) {
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
              if (t5)
                throw H.wrapException(new P.HttpException("Invalid request line", null));
              this._io$_state = 2;
            } else {
              i = 0;
              while (true) {
                t7 = this._httpVersionIndex;
                if (typeof t7 !== "number")
                  return H.iae(t7);
                if (!(i < t7))
                  break;
                if (i >= 4)
                  return H.ioore(C.List_72_84_84_80, i);
                t4.push(C.List_72_84_84_80[i]);
                ++i;
              }
              if (J.$eq($byte, 32))
                this._io$_state = 4;
              else {
                t4.push($byte);
                this._httpVersion = 0;
                if (t6)
                  throw H.wrapException(new P.HttpException("Invalid response line", null));
                this._io$_state = 3;
              }
            }
            break;
          case 2:
            t7 = this._httpVersionIndex;
            if (typeof t7 !== "number")
              return t7.$lt();
            if (t7 < 7) {
              if (!J.$eq($byte, C.List_E7y[t7]))
                H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
            } else if (t7 === 7 && J.$eq($byte, 49)) {
              this._httpVersion = 2;
              this._persistentConnection = true;
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
            } else if (this._httpVersionIndex === 7 && J.$eq($byte, 48)) {
              this._httpVersion = 1;
              this._persistentConnection = false;
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
            } else if (this._httpVersionIndex === 8) {
              if (!J.$eq($byte, 32))
                H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
              this._io$_state = 7;
            } else
              throw H.wrapException(new P.HttpException("Invalid response line", null));
            break;
          case 3:
            if (J.$eq($byte, 32))
              this._io$_state = 4;
            else {
              if ($byte >>> 0 !== $byte || $byte >= 256)
                return H.ioore(C.List_NUU, $byte);
              if (C.List_NUU[$byte] === true || $byte === 13 || $byte === 10)
                throw H.wrapException(new P.HttpException("Invalid request method", null));
              t4.push($byte);
            }
            break;
          case 4:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 32)) {
              if (t3.length === 0)
                throw H.wrapException(new P.HttpException("Invalid request URI", null));
              this._io$_state = 5;
              this._httpVersionIndex = 0;
            } else {
              if (t7.$eq($byte, 13) || t7.$eq($byte, 10))
                throw H.wrapException(new P.HttpException("Invalid request URI", null));
              t3.push($byte);
            }
            break;
          case 5:
            t7 = this._httpVersionIndex;
            if (typeof t7 !== "number")
              return t7.$lt();
            if (t7 < 7) {
              if (!J.$eq($byte, C.List_2Vk[t7]))
                H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
              t7 = this._httpVersionIndex;
              if (typeof t7 !== "number")
                return t7.$add();
              this._httpVersionIndex = t7 + 1;
            } else if (t7 === 7) {
              t7 = J.getInterceptor($byte);
              if (t7.$eq($byte, 49)) {
                this._httpVersion = 2;
                this._persistentConnection = true;
                t7 = this._httpVersionIndex;
                if (typeof t7 !== "number")
                  return t7.$add();
                this._httpVersionIndex = t7 + 1;
              } else if (t7.$eq($byte, 48)) {
                this._httpVersion = 1;
                this._persistentConnection = false;
                t7 = this._httpVersionIndex;
                if (typeof t7 !== "number")
                  return t7.$add();
                this._httpVersionIndex = t7 + 1;
              } else
                throw H.wrapException(new P.HttpException("Invalid response line", null));
            } else {
              if (!J.$eq($byte, 13))
                H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
              this._io$_state = 6;
            }
            break;
          case 6:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._messageType = 1;
            this._io$_state = 10;
            break;
          case 7:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 32))
              this._io$_state = 8;
            else if (t7.$eq($byte, 13))
              this._io$_state = 9;
            else {
              this._statusCodeLength = this._statusCodeLength + 1;
              if (t7.$lt($byte, 48)) {
                if (typeof $byte !== "number")
                  return H.iae($byte);
                t7 = 57 < $byte;
              } else
                t7 = false;
              if (t7 || this._statusCodeLength > 3)
                throw H.wrapException(new P.HttpException("Invalid response status code", null));
              else {
                t7 = this._statusCode;
                if (typeof $byte !== "number")
                  return H.iae($byte);
                this._statusCode = t7 * 10 + $byte - 48;
              }
            }
            break;
          case 8:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 13))
              this._io$_state = 9;
            else {
              if (t7.$eq($byte, 13) || t7.$eq($byte, 10))
                throw H.wrapException(new P.HttpException("Invalid response reason phrase", null));
              t3.push($byte);
            }
            break;
          case 9:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            t7 = this._statusCode;
            if (t7 < 100 || t7 > 599)
              throw H.wrapException(new P.HttpException("Invalid response status code", null));
            else if (t7 <= 199 || t7 === 204 || t7 === 304)
              this._noMessageBody = true;
            this._io$_state = 10;
            break;
          case 10:
            t7 = this.get$version();
            t8 = new P._HttpHeaders(P.HashMap_HashMap(null, null, null, J.JSString, [J.JSArray, J.JSString]), t7, true, null, -1, true, false, null, null, 80);
            if (t7 === "1.0")
              t8._persistentConnection = false;
            this._headers = t8;
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 13))
              this._io$_state = 16;
            else {
              t1.push(J.$and$n(t7.$sub($byte, 65), 127) < 26 ? t7.$or($byte, 32) : $byte);
              this._io$_state = 11;
            }
            break;
          case 11:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 58))
              this._io$_state = 12;
            else {
              if (t7.$gt($byte, 31))
                if (t7.$lt($byte, 128)) {
                  if ($byte >>> 0 !== $byte || $byte >= 256)
                    return H.ioore(C.List_NUU, $byte);
                  t8 = C.List_NUU[$byte] !== true;
                } else
                  t8 = false;
              else
                t8 = false;
              if (!t8)
                throw H.wrapException(new P.HttpException("Invalid header field name", null));
              t7 = t7.$sub($byte, 65);
              if (typeof t7 !== "number")
                return t7.$and();
              if ((t7 & 127) < 26) {
                if (typeof $byte !== "number")
                  return $byte.$or();
                t7 = ($byte | 32) >>> 0;
              } else
                t7 = $byte;
              t1.push(t7);
            }
            break;
          case 12:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 13))
              this._io$_state = 14;
            else if (!t7.$eq($byte, 32) && !t7.$eq($byte, 9)) {
              t2.push($byte);
              this._io$_state = 13;
            }
            break;
          case 13:
            if (J.$eq($byte, 13))
              this._io$_state = 14;
            else
              t2.push($byte);
            break;
          case 14:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._io$_state = 15;
            break;
          case 15:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 32) || t7.$eq($byte, 9))
              this._io$_state = 12;
            else {
              headerField = H.Primitives_stringFromCharCodes(t1);
              headerValue = H.Primitives_stringFromCharCodes(t2);
              if (headerField === "transfer-encoding" && this._caseInsensitiveCompare$2(new J._CodeUnits("chunked"), t2))
                this._chunked = true;
              if (headerField === "connection") {
                tokens = P._HttpParser__tokenizeFieldValue(headerValue);
                for (i = 0; i < tokens.length; ++i) {
                  if (this._caseInsensitiveCompare$2(new J._CodeUnits("upgrade"), J.get$codeUnits$s(tokens[i])))
                    this._connectionUpgrade = true;
                  t8 = this._headers;
                  if (i >= tokens.length)
                    return H.ioore(tokens, i);
                  t8._io$_add$2(headerField, tokens[i]);
                }
              } else
                this._headers._io$_add$2(headerField, headerValue);
              C.JSArray_methods.set$length(t1, 0);
              C.JSArray_methods.set$length(t2, 0);
              if (t7.$eq($byte, 13))
                this._io$_state = 16;
              else {
                t1.push(J.$and$n(t7.$sub($byte, 65), 127) < 26 ? t7.$or($byte, 32) : $byte);
                this._io$_state = 11;
              }
            }
            break;
          case 16:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            t7 = this._headers;
            t7._mutable = false;
            t7 = t7._contentLength;
            this._transferLength = t7;
            if (this._chunked === true) {
              this._transferLength = -1;
              t7 = -1;
            }
            if (this._messageType === 1 && J.$lt$n(t7, 0) && this._chunked === false)
              this._transferLength = 0;
            if (this._connectionUpgrade === true) {
              this._io$_state = 26;
              this._transferLength = 0;
            }
            this._createIncoming$1(this._transferLength);
            t7 = this._incoming;
            if (t5) {
              t7.method = H.Primitives_stringFromCharCodes(t4);
              t7 = this._incoming;
              t7.uri = P.Uri_parse(H.Primitives_stringFromCharCodes(t3));
            } else {
              t7.statusCode = this._statusCode;
              t7.reasonPhrase = H.Primitives_stringFromCharCodes(t3);
            }
            C.JSArray_methods.set$length(t4, 0);
            C.JSArray_methods.set$length(t3, 0);
            if (this._connectionUpgrade === true) {
              t1 = this._incoming;
              t1.upgraded = true;
              this._parserCalled = false;
              this._closeIncoming$0();
              t2 = this._controller;
              if (t2._state >= 4)
                H.throwExpression(t2._badEventState$0());
              t3 = t2._state;
              if ((t3 & 1) !== 0)
                t2._sendData$1(t1);
              else if ((t3 & 3) === 0)
                t2._ensurePendingEvents$0().add$1(0, new P._DelayedData(t1, null));
              return;
            }
            if (!J.$eq(this._transferLength, 0))
              t7 = this._messageType === 0 && this._noMessageBody;
            else
              t7 = true;
            if (t7) {
              this._reset$0();
              tmp = this._incoming;
              this._closeIncoming$0();
              t7 = this._controller;
              if (t7._state >= 4)
                H.throwExpression(t7._badEventState$0());
              t8 = t7._state;
              if ((t8 & 1) !== 0)
                t7._sendData$1(tmp);
              else if ((t8 & 3) === 0)
                t7._ensurePendingEvents$0().add$1(0, new P._DelayedData(tmp, null));
              break;
            } else if (this._chunked === true) {
              this._io$_state = 19;
              this._remainingContent = 0;
            } else if (J.$gt$n(this._transferLength, 0)) {
              this._remainingContent = this._transferLength;
              this._io$_state = 24;
            } else
              this._io$_state = 24;
            this._parserCalled = false;
            t1 = this._controller;
            t2 = this._incoming;
            if (t1._state >= 4)
              H.throwExpression(t1._badEventState$0());
            t3 = t1._state;
            if ((t3 & 1) !== 0)
              t1._sendData$1(t2);
            else if ((t3 & 3) === 0)
              t1._ensurePendingEvents$0().add$1(0, new P._DelayedData(t2, null));
            return;
          case 17:
            if (!J.$eq($byte, 13))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._io$_state = 18;
            break;
          case 18:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._io$_state = 19;
            break;
          case 19:
            t7 = J.getInterceptor($byte);
            if (t7.$eq($byte, 13))
              this._io$_state = 21;
            else if (t7.$eq($byte, 59))
              this._io$_state = 20;
            else {
              value = this._expectHexDigit$1($byte);
              this._remainingContent = J.$add$ns(J.$mul$ns(this._remainingContent, 16), value);
            }
            break;
          case 20:
            if (J.$eq($byte, 13))
              this._io$_state = 21;
            break;
          case 21:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            if (J.$gt$n(this._remainingContent, 0))
              this._io$_state = 24;
            else
              this._io$_state = 22;
            break;
          case 22:
            if (!J.$eq($byte, 13))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._io$_state = 23;
            break;
          case 23:
            if (!J.$eq($byte, 10))
              H.throwExpression(new P.HttpException("Failed to parse HTTP", null));
            this._reset$0();
            this._closeIncoming$0();
            break;
          case 24:
            t7 = this._io$_index;
            if (typeof t7 !== "number")
              return t7.$sub();
            this._io$_index = t7 - 1;
            t7 = J.get$length$asx(this._buffer);
            t8 = this._io$_index;
            if (typeof t7 !== "number")
              return t7.$sub();
            if (typeof t8 !== "number")
              return H.iae(t8);
            dataAvailable = t7 - t8;
            if (J.$ge$n(this._remainingContent, 0)) {
              t7 = this._remainingContent;
              if (typeof t7 !== "number")
                return H.iae(t7);
              t7 = dataAvailable > t7;
            } else
              t7 = false;
            if (t7)
              dataAvailable = this._remainingContent;
            t7 = J.get$buffer$x(this._buffer);
            t8 = J.get$offsetInBytes$x(this._buffer);
            t9 = this._io$_index;
            if (typeof t8 !== "number")
              return t8.$add();
            if (typeof t9 !== "number")
              return H.iae(t9);
            t9 = t8 + t9;
            H._checkViewArguments(t7, t9, dataAvailable);
            data = dataAvailable == null ? new Uint8Array(t7, t9) : new Uint8Array(t7, t9, dataAvailable);
            t7 = this._bodyController;
            if (t7._state >= 4)
              H.throwExpression(t7._badEventState$0());
            t8 = t7._state;
            if ((t8 & 1) !== 0)
              t7._sendData$1(data);
            else if ((t8 & 3) === 0)
              t7._ensurePendingEvents$0().add$1(0, new P._DelayedData(data, null));
            if (!J.$eq(this._remainingContent, -1))
              this._remainingContent = J.$sub$n(this._remainingContent, data.length);
            t7 = this._io$_index;
            if (typeof t7 !== "number")
              return t7.$add();
            this._io$_index = t7 + data.length;
            if (J.$eq(this._remainingContent, 0))
              if (this._chunked !== true) {
                this._reset$0();
                this._closeIncoming$0();
              } else
                this._io$_state = 17;
            break;
          case 27:
            break;
          default:
            break;
        }
      }
      this._parserCalled = false;
      t1 = this._buffer;
      if (t1 != null && this._io$_index === J.get$length$asx(t1)) {
        this._buffer = null;
        this._io$_index = null;
        t1 = this._io$_state;
        if (t1 !== 26 && t1 !== 27)
          this._socketSubscription.resume$0();
      }
    },
    _io$_onData$1: [function(buffer) {
      this._socketSubscription.pause$0();
      this._buffer = buffer;
      this._io$_index = 0;
      this._parse$0();
    }, "call$1", "get$_io$_onData", 2, 0, 44],
    _io$_onDone$0: [function() {
      var t1, t2;
      this._socketSubscription = null;
      t1 = this._io$_state;
      if (t1 === 25 || t1 === 27)
        return;
      if (this._incoming != null) {
        if (t1 !== 26)
          if (!(t1 === 0 && !this._requestParser)) {
            t2 = !(t1 === 24 && this._chunked !== true && J.$eq(this._transferLength, -1));
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          t1 = this._bodyController;
          if (t1._state >= 4)
            H.throwExpression(t1._badEventState$0());
          t1._addError$2(new P.HttpException("Connection closed while receiving data", null), null);
        }
        this._closeIncoming$1(true);
        this._controller.close$0();
        return;
      }
      if (t1 === 0) {
        if (!this._requestParser)
          this._reportError$1(new P.HttpException("Connection closed before full header was received", null));
        this._controller.close$0();
        return;
      }
      if (t1 === 26) {
        this._controller.close$0();
        return;
      }
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 17) {
        this._io$_state = 27;
        this._reportError$1(new P.HttpException("Connection closed before full header was received", null));
        this._controller.close$0();
        return;
      }
      if (this._chunked !== true && J.$eq(this._transferLength, -1))
        this._io$_state = 25;
      else {
        this._io$_state = 27;
        this._reportError$1(new P.HttpException("Connection closed before full body was received", null));
      }
      this._controller.close$0();
    }, "call$0", "get$_io$_onDone", 0, 0, 1],
    _io$_onError$2: [function(e, stackTrace) {
      var t1 = this._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._addError$2(e, stackTrace);
    }, function(e) {
      return this._io$_onError$2(e, null);
    }, "_io$_onError$1", "call$2", "call$1", "get$_io$_onError", 2, 2, 3, 4],
    get$version: function() {
      switch (this._httpVersion) {
        case 1:
          return "1.0";
        case 2:
          return "1.1";
      }
      return;
    },
    readUnparsedData$0: function() {
      var t1, result;
      t1 = this._buffer;
      if (t1 == null)
        return;
      if (this._io$_index === J.get$length$asx(t1))
        return;
      result = J.sublist$1$ax(this._buffer, this._io$_index);
      this._buffer = null;
      this._io$_index = null;
      return result;
    },
    _reset$0: function() {
      if (this._io$_state === 26)
        return;
      this._io$_state = 0;
      this._messageType = 0;
      C.JSArray_methods.set$length(this._headerField, 0);
      C.JSArray_methods.set$length(this._headerValue, 0);
      C.JSArray_methods.set$length(this._io$_method, 0);
      C.JSArray_methods.set$length(this._uri_or_reason_phrase, 0);
      this._statusCode = 0;
      this._statusCodeLength = 0;
      this._httpVersion = 0;
      this._transferLength = -1;
      this._persistentConnection = false;
      this._connectionUpgrade = false;
      this._chunked = false;
      this._noMessageBody = false;
      this._remainingContent = -1;
      this._headers = null;
    },
    _caseInsensitiveCompare$2: function(expected, value) {
      var t1, t2, t3, i, t4, t5, t6;
      t1 = expected._string;
      t2 = t1.length;
      t3 = J.getInterceptor$asx(value);
      if (t2 !== t3.get$length(value))
        return false;
      for (i = 0; i < t2; ++i) {
        if (i >= t2)
          H.throwExpression(P.RangeError$value(i));
        t4 = t1.charCodeAt(i);
        t5 = t3.$index(value, i);
        t6 = J.getInterceptor$n(t5);
        if (t4 !== (J.$and$n(t6.$sub(t5, 65), 127) < 26 ? t6.$or(t5, 32) : t5))
          return false;
      }
      return true;
    },
    _expectHexDigit$1: function($byte) {
      if (typeof $byte !== "number")
        return H.iae($byte);
      if (48 <= $byte && $byte <= 57)
        return $byte - 48;
      else if (65 <= $byte && $byte <= 70)
        return $byte - 65 + 10;
      else if (97 <= $byte && $byte <= 102)
        return $byte - 97 + 10;
      else
        throw H.wrapException(new P.HttpException("Failed to parse HTTP", null));
    },
    _createIncoming$1: function(transferLength) {
      var t1, t2, t3, t4, incoming;
      t1 = {};
      t1.incoming_0 = null;
      t2 = P.StreamController_StreamController(new P._HttpParser__createIncoming_closure(t1, this), new P._HttpParser__createIncoming_closure0(t1, this), new P._HttpParser__createIncoming_closure1(t1, this), new P._HttpParser__createIncoming_closure2(t1, this), true, [J.JSArray, J.JSInt]);
      this._bodyController = t2;
      t3 = this._headers;
      t2 = new P._ControllerStream(t2);
      t2.$builtinTypeInfo = [null];
      t4 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
      t4.$builtinTypeInfo = [null];
      t4 = new P._AsyncCompleter(t4);
      t4.$builtinTypeInfo = [null];
      incoming = new P._HttpIncoming(transferLength, t4, t2, false, t3, false, null, null, null, null, false);
      this._incoming = incoming;
      t1.incoming_0 = incoming;
      this._bodyPaused = true;
      this._pauseStateChanged$0();
    },
    _closeIncoming$1: function(closing) {
      var t1 = this._incoming;
      if (t1 == null)
        return;
      t1.fullBodyRead = true;
      t1.hasSubscriber = true;
      t1 = t1._dataCompleter.future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncComplete$1(closing);
      this._incoming = null;
      t1 = this._bodyController;
      if (t1 != null) {
        t1.close$0();
        this._bodyController = null;
      }
      this._bodyPaused = false;
      this._pauseStateChanged$0();
    },
    _closeIncoming$0: function() {
      return this._closeIncoming$1(false);
    },
    _pauseStateChanged$0: function() {
      if (this._incoming != null) {
        if (!this._bodyPaused && !this._parserCalled)
          this._parse$0();
      } else if (!this._paused && !this._parserCalled)
        this._parse$0();
    },
    _reportError$2: function(error, stackTrace) {
      var t1 = this._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
      this._io$_state = 27;
      t1 = this._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._addError$2(error, stackTrace);
      this._controller.close$0();
    },
    _reportError$1: function(error) {
      return this._reportError$2(error, null);
    },
    _io$_HttpParser$_$1: function(_requestParser) {
      this._controller = P.StreamController_StreamController(new P._HttpParser$__closure(this), new P._HttpParser$__closure0(this), new P._HttpParser$__closure1(this), new P._HttpParser$__closure2(this), true, P._HttpIncoming);
      this._reset$0();
    },
    $asStream: function() {
      return [P._HttpIncoming];
    },
    static: {_HttpParser$_: function(_requestParser) {
        var t1 = new P._HttpParser(false, null, null, _requestParser, null, null, null, 0, 0, [], [], [], [], null, -1, null, null, null, false, -1, null, null, null, true, false, null, null);
        t1._io$_HttpParser$_$1(_requestParser);
        return t1;
      }, _HttpParser__tokenizeFieldValue: function(headerValue) {
        var tokens, t1, start, index, t2;
        tokens = [];
        tokens.$builtinTypeInfo = [J.JSString];
        for (t1 = J.getInterceptor$asx(headerValue), start = 0, index = 0; index < t1.get$length(headerValue);) {
          if (index >= headerValue.length)
            return H.ioore(headerValue, index);
          t2 = headerValue[index];
          if (t2 === ",") {
            tokens.push(C.JSString_methods.substring$2(headerValue, start, index));
            start = index + 1;
          } else if (t2 === " " || t2 === "\t")
            ++start;
          ++index;
        }
        tokens.push(C.JSString_methods.substring$2(headerValue, start, index));
        return tokens;
      }}
  },
  _HttpParser$__closure0: {
    "^": "Closure:22;this_0",
    call$0: function() {
      this.this_0._paused = false;
    }
  },
  _HttpParser$__closure1: {
    "^": "Closure:22;this_1",
    call$0: function() {
      var t1 = this.this_1;
      t1._paused = true;
      t1._pauseStateChanged$0();
    }
  },
  _HttpParser$__closure2: {
    "^": "Closure:22;this_2",
    call$0: function() {
      var t1 = this.this_2;
      t1._paused = false;
      t1._pauseStateChanged$0();
    }
  },
  _HttpParser$__closure: {
    "^": "Closure:22;this_3",
    call$0: function() {
      var t1 = this.this_3._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
    }
  },
  _HttpParser__createIncoming_closure0: {
    "^": "Closure:22;box_0,this_1",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.box_0.incoming_0;
      t2 = this.this_1;
      t3 = t2._incoming;
      if (t1 == null ? t3 != null : t1 !== t3)
        return;
      t2._bodyPaused = false;
      t2._pauseStateChanged$0();
    }
  },
  _HttpParser__createIncoming_closure1: {
    "^": "Closure:22;box_0,this_2",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.box_0.incoming_0;
      t2 = this.this_2;
      t3 = t2._incoming;
      if (t1 == null ? t3 != null : t1 !== t3)
        return;
      t2._bodyPaused = true;
      t2._pauseStateChanged$0();
    }
  },
  _HttpParser__createIncoming_closure2: {
    "^": "Closure:22;box_0,this_3",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.box_0.incoming_0;
      t2 = this.this_3;
      t3 = t2._incoming;
      if (t1 == null ? t3 != null : t1 !== t3)
        return;
      t2._bodyPaused = false;
      t2._pauseStateChanged$0();
    }
  },
  _HttpParser__createIncoming_closure: {
    "^": "Closure:22;box_0,this_4",
    call$0: function() {
      var t1, t2, t3;
      t1 = this.box_0.incoming_0;
      t2 = this.this_4;
      t3 = t2._incoming;
      if (t1 == null ? t3 != null : t1 !== t3)
        return;
      t1 = t2._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
      t2._closeIncoming$1(true);
      t2._controller.close$0();
    }
  },
  _HttpSessionManager: {
    "^": "Object;_sessions,_sessionTimeout,_io$_head,_io$_tail,_timer",
    close$0: function() {
      return this._stopTimer$0();
    },
    _stopTimer$0: function() {
    }
  },
  _StreamSinkImpl: {
    "^": "Object;_io$_target,_doneCompleter,_io$_doneFuture,_controllerInstance,_controllerCompleter,_isClosed,_isBound,_io$_hasError",
    add$1: function(_, data) {
      var t1;
      if (this._isClosed)
        return;
      t1 = this.get$_controller();
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(data);
    },
    addError$2: function(error, stackTrace) {
      var t1 = this.get$_controller();
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._addError$2(error, stackTrace);
      return;
    },
    addStream$1: function(stream) {
      var t1, t2, future;
      if (this._isBound)
        throw H.wrapException(new P.StateError("StreamSink is already bound to a stream"));
      this._isBound = true;
      if (this._io$_hasError)
        return this._io$_doneFuture;
      t1 = new P._StreamSinkImpl_addStream_targetAddStream(this, stream);
      t2 = this._controllerInstance;
      if (t2 == null)
        return t1.call$0();
      future = this._controllerCompleter.future;
      t2.close$0();
      return future.then$1(new P._StreamSinkImpl_addStream_closure(t1));
    },
    close$0: function() {
      if (this._isBound)
        throw H.wrapException(new P.StateError("StreamSink is bound to a stream"));
      if (!this._isClosed) {
        this._isClosed = true;
        var t1 = this._controllerInstance;
        if (t1 != null)
          t1.close$0();
        else
          this._closeTarget$0();
      }
      return this._io$_doneFuture;
    },
    _closeTarget$0: function() {
      this._io$_target.close$0().then$2$onError(new P._StreamSinkImpl__closeTarget_closure(this), new P._StreamSinkImpl__closeTarget_closure0(this));
    },
    _completeDone$2$error$value: function(error, value) {
      var t1 = this._doneCompleter;
      if (t1 == null)
        return;
      if (error == null) {
        t1 = t1.future;
        if (t1._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t1._asyncComplete$1(value);
      } else {
        this._io$_hasError = true;
        t1.completeError$1(error);
      }
      this._doneCompleter = null;
    },
    _completeDone$1$error: function(error) {
      return this._completeDone$2$error$value(error, null);
    },
    _completeDone$1$value: function(value) {
      return this._completeDone$2$error$value(null, value);
    },
    get$_controller: function() {
      if (this._isBound)
        throw H.wrapException(new P.StateError("StreamSink is bound to a stream"));
      if (this._isClosed)
        throw H.wrapException(new P.StateError("StreamSink is closed"));
      if (this._controllerInstance == null) {
        this._controllerInstance = P.StreamController_StreamController(null, null, null, null, true, H.getRuntimeTypeArgument(this, "_StreamSinkImpl", 0));
        this._controllerCompleter = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
        var t1 = this.get$_controller();
        t1.toString;
        this._io$_target.addStream$1(H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null])).then$2$onError(new P._StreamSinkImpl__controller_closure(this), new P._StreamSinkImpl__controller_closure0(this));
      }
      return this._controllerInstance;
    }
  },
  _StreamSinkImpl_addStream_targetAddStream: {
    "^": "Closure:30;this_0,stream_1",
    call$0: function() {
      var t1 = this.this_0;
      return t1._io$_target.addStream$1(this.stream_1).whenComplete$1(new P._StreamSinkImpl_addStream_targetAddStream_closure(t1));
    }
  },
  _StreamSinkImpl_addStream_targetAddStream_closure: {
    "^": "Closure:22;this_2",
    call$0: function() {
      this.this_2._isBound = false;
    }
  },
  _StreamSinkImpl_addStream_closure: {
    "^": "Closure:24;targetAddStream_3",
    call$1: function(_) {
      return this.targetAddStream_3.call$0();
    }
  },
  _StreamSinkImpl__closeTarget_closure: {
    "^": "Closure:24;this_0",
    call$1: function(value) {
      return this.this_0._completeDone$1$value(value);
    }
  },
  _StreamSinkImpl__closeTarget_closure0: {
    "^": "Closure:24;this_1",
    call$1: function(error) {
      return this.this_1._completeDone$1$error(error);
    }
  },
  _StreamSinkImpl__controller_closure: {
    "^": "Closure:24;this_0",
    call$1: function(_) {
      var t1, t2;
      t1 = this.this_0;
      if (t1._isBound) {
        t2 = t1._controllerCompleter.future;
        if (t2._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t2._asyncComplete$1(t1);
        t1._controllerCompleter = null;
        t1._controllerInstance = null;
      } else
        t1._closeTarget$0();
    }
  },
  _StreamSinkImpl__controller_closure0: {
    "^": "Closure:24;this_1",
    call$1: function(error) {
      var t1 = this.this_1;
      if (t1._isBound) {
        t1._controllerCompleter.completeError$1(error);
        t1._controllerCompleter = null;
        t1._controllerInstance = null;
      } else
        t1._completeDone$1$error(error);
    }
  },
  _IOSinkImpl: {
    "^": "_StreamSinkImpl;",
    write$1: function(obj) {
      if (obj.length === 0)
        return;
      this.add$1(0, this._encoding.get$encoder().convert$1(obj));
    },
    writeAll$2: function(objects, separator) {
      objects.get$iterator(objects).moveNext$0();
      return;
    },
    $as_StreamSinkImpl: function() {
      return [[J.JSArray, J.JSInt]];
    }
  },
  SocketOption: {
    "^": "Object;_io$_value",
    static: {"^": "SocketOption_TCP_NODELAY,SocketOption__IP_MULTICAST_LOOP,SocketOption__IP_MULTICAST_HOPS,SocketOption__IP_MULTICAST_IF,SocketOption__IP_BROADCAST"}
  },
  Socket: {
    "^": "Object;"
  },
  WebSocketException: {
    "^": "Object;message<",
    toString$0: function(_) {
      return "WebSocketException: " + this.message;
    }
  },
  _WebSocketProtocolTransformer: {
    "^": "Object;_io$_state,_fin,_opcode,_len,_masked,_remainingLenBytes,_remainingMaskingKeyBytes,_remainingPayloadBytes,_unmaskingIndex,_currentMessageType,closeCode,closeReason,_eventSink,_serverSide,_maskingBytes,_payloads",
    bind$1: function(stream) {
      return H.setRuntimeTypeInfo(new P._BoundSinkStream(new P._WebSocketProtocolTransformer_bind_closure(this), stream), [null, null]);
    },
    addError$2: function(error, stackTrace) {
      var t1 = this._eventSink._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._addError$2.call(t1, error, stackTrace);
      return;
    },
    close$0: function() {
      var t1 = this._eventSink._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._close$0.call(t1);
      return;
    },
    _takePayload$0: function() {
      var t1, t2, result, $length, t3, offset, payload, t4;
      t1 = this._payloads;
      t2 = t1.length;
      if (t2 === 0)
        return new Uint8Array(0);
      if (t2 === 1) {
        result = C.JSArray_methods.get$single(t1);
        C.JSArray_methods.set$length(t1, 0);
        return result;
      }
      for (t2 = new H.ListIterator(t1, t2, 0, null), $length = 0; t2.moveNext$0();) {
        t3 = J.get$length$asx(t2._current);
        if (typeof t3 !== "number")
          return H.iae(t3);
        $length += t3;
      }
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        H.throwExpression(new P.ArgumentError("Invalid length " + H.S($length)));
      result = new Uint8Array($length);
      for (t2 = new H.ListIterator(t1, t1.length, 0, null), offset = 0; t2.moveNext$0();) {
        payload = t2._current;
        t3 = J.getInterceptor$asx(payload);
        t4 = t3.get$length(payload);
        if (typeof t4 !== "number")
          return H.iae(t4);
        C.NativeUint8List_methods.setRange$3(result, offset, offset + t4, payload);
        t3 = t3.get$length(payload);
        if (typeof t3 !== "number")
          return H.iae(t3);
        offset += t3;
      }
      C.JSArray_methods.set$length(t1, 0);
      return result;
    },
    add$1: function(_, buffer) {
      var t1, count, t2, allowMalformed, t3, index, t4, $byte, t5, payloadLength, payload, t6;
      t1 = J.getInterceptor$asx(buffer);
      count = t1.get$length(buffer);
      t2 = this._io$_state;
      if (t2 === 5)
        throw H.wrapException(new P.WebSocketException("Data on closed connection"));
      if (t2 === 6)
        throw H.wrapException(new P.WebSocketException("Data on failed connection"));
      t2 = this._payloads;
      if (typeof count !== "number")
        return H.iae(count);
      allowMalformed = C.Utf8Codec_false._allowMalformed;
      t3 = this._maskingBytes;
      index = 0;
      while (true) {
        if (index < count) {
          t4 = this._io$_state;
          t4 = t4 !== 5 && t4 !== 6;
        } else
          t4 = false;
        if (!t4)
          break;
        $byte = t1.$index(buffer, index);
        t4 = this._io$_state;
        if (t4 <= 2)
          if (t4 === 0) {
            t4 = J.getInterceptor$in($byte);
            this._fin = t4.$and($byte, 128) !== 0;
            if (t4.$and($byte, 112) !== 0)
              throw H.wrapException(new P.WebSocketException("Protocol error"));
            t4 = t4.$and($byte, 15);
            this._opcode = t4;
            if (t4 <= 2)
              if (t4 === 0) {
                if (this._currentMessageType === 0)
                  throw H.wrapException(new P.WebSocketException("Protocol error"));
              } else {
                if (this._currentMessageType !== 0)
                  throw H.wrapException(new P.WebSocketException("Protocol error"));
                this._currentMessageType = t4;
              }
            else if (t4 >= 8 && t4 <= 10) {
              if (!this._fin)
                throw H.wrapException(new P.WebSocketException("Protocol error"));
            } else
              throw H.wrapException(new P.WebSocketException("Protocol error"));
            this._io$_state = 1;
          } else if (t4 === 1) {
            t4 = J.getInterceptor$in($byte);
            this._masked = t4.$and($byte, 128) !== 0;
            t4 = t4.$and($byte, 127);
            this._len = t4;
            t5 = this._opcode;
            if ((t5 === 8 || t5 === 9 || t5 === 10) && t4 > 125)
              throw H.wrapException(new P.WebSocketException("Protocol error"));
            if (t4 === 126) {
              this._len = 0;
              this._remainingLenBytes = 2;
              this._io$_state = 2;
            } else if (t4 === 127) {
              this._len = 0;
              this._remainingLenBytes = 8;
              this._io$_state = 2;
            } else
              this._lengthDone$0();
          } else {
            t4 = this._len;
            if (typeof t4 !== "number")
              return t4.$shl();
            if (typeof $byte !== "number")
              return H.iae($byte);
            this._len = (t4 << 8 | $byte) >>> 0;
            t4 = this._remainingLenBytes - 1;
            this._remainingLenBytes = t4;
            if (t4 === 0)
              this._lengthDone$0();
          }
        else if (t4 === 3) {
          t4 = this._remainingMaskingKeyBytes;
          t5 = t4 - 1;
          this._remainingMaskingKeyBytes = t5;
          t4 = 4 - t4;
          if (t4 < 0 || t4 >= 4)
            return H.ioore(t3, t4);
          t3[t4] = $byte;
          if (t5 === 0) {
            this._remainingPayloadBytes = this._len;
            this._startPayload$0();
          }
        } else {
          payloadLength = P.min(count - index, this._remainingPayloadBytes);
          this._remainingPayloadBytes = J.$sub$n(this._remainingPayloadBytes, payloadLength);
          if (this._masked)
            this._unmask$3(index, payloadLength, buffer);
          t4 = t1.get$buffer(buffer);
          H._checkViewArguments(t4, index, payloadLength);
          t2.push(new Uint8Array(t4, index, payloadLength));
          t4 = this._opcode;
          if (t4 === 8 || t4 === 9 || t4 === 10) {
            if (this._remainingPayloadBytes === 0) {
              switch (t4) {
                case 8:
                  this.closeCode = 1005;
                  payload = this._takePayload$0();
                  t4 = J.getInterceptor$asx(payload);
                  t5 = t4.get$length(payload);
                  if (typeof t5 !== "number")
                    return t5.$gt();
                  if (t5 > 0) {
                    if (t4.get$length(payload) === 1)
                      H.throwExpression(new P.WebSocketException("Protocol error"));
                    t5 = t4.$index(payload, 0);
                    if (typeof t5 !== "number")
                      return t5.$shl();
                    t6 = t4.$index(payload, 1);
                    if (typeof t6 !== "number")
                      return H.iae(t6);
                    t6 = (t5 << 8 | t6) >>> 0;
                    this.closeCode = t6;
                    if (t6 === 1005)
                      H.throwExpression(new P.WebSocketException("Protocol error"));
                    t5 = t4.get$length(payload);
                    if (typeof t5 !== "number")
                      return t5.$gt();
                    if (t5 > 2) {
                      t4 = t4.sublist$1(payload, 2);
                      this.closeReason = new P.Utf8Decoder(allowMalformed).convert$1(t4);
                    }
                  }
                  this._io$_state = 5;
                  t4 = this._eventSink._async$_sink;
                  if ((t4._state & 2) !== 0)
                    H.throwExpression(new P.StateError("Stream is already closed"));
                  P._BufferingStreamSubscription.prototype._close$0.call(t4);
                  break;
                case 9:
                  t4 = this._eventSink;
                  t5 = this._takePayload$0();
                  t4 = t4._async$_sink;
                  if ((t4._state & 2) !== 0)
                    H.throwExpression(new P.StateError("Stream is already closed"));
                  P._BufferingStreamSubscription.prototype._async$_add$1.call(t4, new P._WebSocketPing(t5));
                  break;
                case 10:
                  t4 = this._eventSink;
                  t5 = this._takePayload$0();
                  t4 = t4._async$_sink;
                  if ((t4._state & 2) !== 0)
                    H.throwExpression(new P.StateError("Stream is already closed"));
                  P._BufferingStreamSubscription.prototype._async$_add$1.call(t4, new P._WebSocketPong(t5));
                  break;
              }
              this._prepareForNextFrame$0();
            }
          } else {
            t4 = this._currentMessageType;
            if (t4 !== 1 && t4 !== 2)
              throw H.wrapException(new P.WebSocketException("Protocol error"));
            if (this._remainingPayloadBytes === 0)
              this._messageFrameEnd$0();
          }
          index = index + payloadLength - 1;
        }
        ++index;
      }
    },
    _unmask$3: function(index, $length, buffer) {
      var startOffset, end, t1, t2, i, t3, t4, blockCount, mask, blockMask, blockBuffer, bytes;
      if ($length >= 16) {
        startOffset = 16 - (index & 15);
        end = index + startOffset;
        for (t1 = J.getInterceptor$asx(buffer), t2 = this._maskingBytes, i = index; i < end; ++i) {
          t3 = t1.$index(buffer, i);
          t4 = this._unmaskingIndex;
          this._unmaskingIndex = t4 + 1;
          t1.$indexSet(buffer, i, J.$xor$n(t3, t2[t4 & 3]));
        }
        $length -= startOffset;
        blockCount = C.JSNumber_methods._tdivFast$1($length, 16);
        if (blockCount > 0) {
          for (t3 = this._unmaskingIndex, mask = 0, i = 3; i >= 0; --i) {
            t4 = t2[t3 + i & 3];
            if (typeof t4 !== "number")
              return H.iae(t4);
            mask = (mask << 8 | t4) >>> 0;
          }
          t2 = new Int32Array(4);
          blockMask = new P.Int32x4(t2);
          t2[0] = mask;
          t2[1] = mask;
          t2[2] = mask;
          t2[3] = mask;
          t1 = t1.get$buffer(buffer);
          t2 = blockCount * 4;
          H._checkViewArguments(t1, end, t2);
          t1 = new Uint32Array(t1, end, t2);
          blockBuffer = new P.Int32x4List(t1);
          for (t1 = C.JSInt_methods._tdivFast$1(t1.length, 4), i = 0; i < t1; ++i)
            blockBuffer.$indexSet(0, i, blockBuffer.$index(0, i).$xor(0, blockMask));
          bytes = blockCount * 16;
          index = end + bytes;
          $length -= bytes;
        } else
          index = end;
      }
      end = index + $length;
      for (t1 = J.getInterceptor$asx(buffer), t2 = this._maskingBytes, i = index; i < end; ++i) {
        t3 = t1.$index(buffer, i);
        t4 = this._unmaskingIndex;
        this._unmaskingIndex = t4 + 1;
        t1.$indexSet(buffer, i, J.$xor$n(t3, t2[t4 & 3]));
      }
    },
    _lengthDone$0: function() {
      if (this._masked) {
        if (!this._serverSide)
          throw H.wrapException(new P.WebSocketException("Received masked frame from server"));
        this._io$_state = 3;
      } else {
        if (this._serverSide)
          throw H.wrapException(new P.WebSocketException("Received unmasked frame from client"));
        this._remainingPayloadBytes = this._len;
        this._startPayload$0();
      }
    },
    _startPayload$0: function() {
      if (this._remainingPayloadBytes === 0)
        if (this._isControlFrame$0()) {
          switch (this._opcode) {
            case 8:
              this._io$_state = 5;
              var t1 = this._eventSink._async$_sink;
              if ((t1._state & 2) !== 0)
                H.throwExpression(new P.StateError("Stream is already closed"));
              P._BufferingStreamSubscription.prototype._close$0.call(t1);
              break;
            case 9:
              t1 = this._eventSink._async$_sink;
              if ((t1._state & 2) !== 0)
                H.throwExpression(new P.StateError("Stream is already closed"));
              P._BufferingStreamSubscription.prototype._async$_add$1.call(t1, new P._WebSocketPing(null));
              break;
            case 10:
              t1 = this._eventSink._async$_sink;
              if ((t1._state & 2) !== 0)
                H.throwExpression(new P.StateError("Stream is already closed"));
              P._BufferingStreamSubscription.prototype._async$_add$1.call(t1, new P._WebSocketPong(null));
              break;
          }
          this._prepareForNextFrame$0();
        } else
          this._messageFrameEnd$0();
      else
        this._io$_state = 4;
    },
    _messageFrameEnd$0: function() {
      var t1, t2, allowMalformed;
      if (this._fin) {
        switch (this._currentMessageType) {
          case 1:
            t1 = this._eventSink;
            t2 = this._takePayload$0();
            allowMalformed = C.Utf8Codec_false._allowMalformed;
            t2 = new P.Utf8Decoder(allowMalformed).convert$1(t2);
            t1 = t1._async$_sink;
            if ((t1._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            P._BufferingStreamSubscription.prototype._async$_add$1.call(t1, t2);
            break;
          case 2:
            t1 = this._eventSink;
            t2 = this._takePayload$0();
            t1 = t1._async$_sink;
            if ((t1._state & 2) !== 0)
              H.throwExpression(new P.StateError("Stream is already closed"));
            P._BufferingStreamSubscription.prototype._async$_add$1.call(t1, t2);
            break;
        }
        this._currentMessageType = 0;
      }
      this._prepareForNextFrame$0();
    },
    _isControlFrame$0: function() {
      var t1 = this._opcode;
      return t1 === 8 || t1 === 9 || t1 === 10;
    },
    _prepareForNextFrame$0: function() {
      var t1 = this._io$_state;
      if (t1 !== 5 && t1 !== 6)
        this._io$_state = 0;
      this._fin = false;
      this._opcode = -1;
      this._len = -1;
      this._remainingLenBytes = -1;
      this._remainingMaskingKeyBytes = 4;
      this._remainingPayloadBytes = -1;
      this._unmaskingIndex = 0;
    },
    static: {"^": "_WebSocketProtocolTransformer_START,_WebSocketProtocolTransformer_LEN_FIRST,_WebSocketProtocolTransformer_LEN_REST,_WebSocketProtocolTransformer_MASK,_WebSocketProtocolTransformer_PAYLOAD,_WebSocketProtocolTransformer_CLOSED,_WebSocketProtocolTransformer_FAILURE"}
  },
  _WebSocketProtocolTransformer_bind_closure: {
    "^": "Closure:53;this_0",
    call$1: function(eventSink) {
      var t1 = this.this_0;
      if (t1._eventSink != null)
        throw H.wrapException(new P.StateError("WebSocket transformer already used."));
      t1._eventSink = eventSink;
      return t1;
    }
  },
  _WebSocketPing: {
    "^": "Object;payload",
    $is_WebSocketPing: true
  },
  _WebSocketPong: {
    "^": "Object;payload",
    $is_WebSocketPong: true
  },
  _WebSocketTransformerImpl__upgrade_upgrade: {
    "^": "Closure:54;request_1,response_2",
    call$1: function(protocol) {
      var t1, t2, key, sha1, accept;
      t1 = this.response_2;
      if (t1._outgoing.headersWritten)
        H.throwExpression(new P.StateError("Header already sent"));
      t1._statusCode = 101;
      t2 = t1.headers;
      if (!t2._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      t2._addAll$2(C.JSString_methods.toLowerCase$0("connection"), "Upgrade");
      if (!t2._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      t2._addAll$2(C.JSString_methods.toLowerCase$0("upgrade"), "websocket");
      key = this.request_1._incoming.headers.value$1("Sec-WebSocket-Key");
      sha1 = new P._SHA1(Array(80), 16, 5, true, 0, [], null, null, false);
      sha1._HashBase$3(16, 5, true);
      sha1._SHA1$0();
      sha1.add$1(0, new J._CodeUnits(H.S(key) + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11"));
      accept = P._CryptoUtils_bytesToBase64(sha1.close$0(), false, false);
      if (!t2._mutable)
        H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
      t2._addAll$2(C.JSString_methods.toLowerCase$0("Sec-WebSocket-Accept"), accept);
      if (protocol != null && J.get$isNotEmpty$asx(protocol)) {
        if (!t2._mutable)
          H.throwExpression(new P.HttpException("HTTP headers are not mutable", null));
        t2._addAll$2(C.JSString_methods.toLowerCase$0("Sec-WebSocket-Protocol"), protocol);
      }
      t2.set$contentLength(0);
      return t1.detachSocket$0().then$1(new P._WebSocketTransformerImpl__upgrade_upgrade_closure(protocol));
    }
  },
  _WebSocketTransformerImpl__upgrade_upgrade_closure: {
    "^": "Closure:24;protocol_3",
    call$1: function(socket) {
      return P._WebSocketImpl$_fromSocket(socket, this.protocol_3, true);
    }
  },
  _WebSocketTransformerImpl__upgrade_closure: {
    "^": "Closure:22;box_0,_protocolSelector_4",
    call$0: function() {
      return this._protocolSelector_4.call$1(this.box_0.protocols_0);
    }
  },
  _WebSocketTransformerImpl__upgrade_closure0: {
    "^": "Closure:24;box_0",
    call$1: function(protocol) {
      if (J.indexOf$1$asx(this.box_0.protocols_0, protocol) < 0)
        throw H.wrapException(new P.WebSocketException("Selected protocol is not in the list of available protocols"));
      return protocol;
    }
  },
  _WebSocketTransformerImpl__upgrade_closure1: {
    "^": "Closure:24;response_5",
    call$1: function(error) {
      var t1 = this.response_5;
      if (t1._outgoing.headersWritten)
        H.throwExpression(new P.StateError("Header already sent"));
      t1._statusCode = 500;
      t1.close$0();
      throw H.wrapException(error);
    }
  },
  _WebSocketTransformerImpl__isUpgradeRequest_closure: {
    "^": "Closure:0;box_0",
    call$1: function(value) {
      if (J.toLowerCase$0$s(value) === "upgrade")
        this.box_0.isUpgrade_0 = true;
    }
  },
  _WebSocketOutgoingTransformer: {
    "^": "Object;webSocket,_eventSink",
    bind$1: function(stream) {
      return H.setRuntimeTypeInfo(new P._BoundSinkStream(new P._WebSocketOutgoingTransformer_bind_closure(this), stream), [null, null]);
    },
    add$1: function(_, message) {
      var t1, t2, data, opcode;
      t1 = J.getInterceptor(message);
      if (!!t1.$is_WebSocketPong) {
        t1 = P._WebSocketOutgoingTransformer_createFrame(10, message.payload, this.webSocket._serverSide);
        t2 = this._eventSink;
        H.IterableMixinWorkaround_forEach(t1, t2.get$add(t2));
        return;
      }
      if (!!t1.$is_WebSocketPing) {
        t1 = P._WebSocketOutgoingTransformer_createFrame(9, message.payload, this.webSocket._serverSide);
        t2 = this._eventSink;
        H.IterableMixinWorkaround_forEach(t1, t2.get$add(t2));
        return;
      }
      if (message != null)
        if (typeof message === "string") {
          data = C.Utf8Codec_false.get$encoder().convert$1(message);
          opcode = 1;
        } else {
          t1 = H.checkSubtype(message, "$isList", [J.JSInt], "$asList");
          if (!t1)
            throw H.wrapException(new P.ArgumentError(message));
          data = message;
          opcode = 2;
        }
      else {
        data = null;
        opcode = 1;
      }
      t1 = P._WebSocketOutgoingTransformer_createFrame(opcode, data, this.webSocket._serverSide);
      t2 = this._eventSink;
      H.IterableMixinWorkaround_forEach(t1, t2.get$add(t2));
    },
    addError$2: function(error, stackTrace) {
      var t1 = this._eventSink._async$_sink;
      if ((t1._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._addError$2.call(t1, error, stackTrace);
      return;
    },
    close$0: function() {
      var t1, code, data, t2;
      t1 = this.webSocket;
      code = t1._outCloseCode;
      if (code != null) {
        data = H.setRuntimeTypeInfo([], [J.JSInt]);
        data.push(code >>> 8 & 255);
        data.push(code & 255);
      } else
        data = null;
      t1 = P._WebSocketOutgoingTransformer_createFrame(8, data, t1._serverSide);
      t2 = this._eventSink;
      H.IterableMixinWorkaround_forEach(t1, t2.get$add(t2));
      t2 = this._eventSink._async$_sink;
      if ((t2._state & 2) !== 0)
        H.throwExpression(new P.StateError("Stream is already closed"));
      P._BufferingStreamSubscription.prototype._close$0.call(t2);
    },
    static: {_WebSocketOutgoingTransformer_createFrame: function(opcode, data, serverSide) {
        var mask, t1, dataLength, headerSize, t2, header, index, lengthBytes, i, index0, t3;
        mask = !serverSide;
        t1 = data == null;
        dataLength = t1 ? 0 : J.get$length$asx(data);
        headerSize = mask ? 6 : 2;
        if (typeof dataLength !== "number")
          return dataLength.$gt();
        t2 = dataLength > 65535;
        if (t2)
          headerSize += 8;
        else if (dataLength > 125)
          headerSize += 2;
        header = new Uint8Array(headerSize);
        header[0] = 128 | opcode;
        if (t2) {
          header[1] = 127;
          index = 2;
          lengthBytes = 8;
        } else if (dataLength > 125) {
          header[1] = 126;
          index = 2;
          lengthBytes = 2;
        } else {
          index = 1;
          lengthBytes = 1;
        }
        for (t2 = lengthBytes - 1, i = 0; i < lengthBytes; ++i, index = index0) {
          index0 = index + 1;
          t3 = C.JSNumber_methods.$shr(dataLength, (t2 - i) * 8);
          if (index >= headerSize)
            return H.ioore(header, index);
          header[index] = t3 & 255;
        }
        if (mask) {
          header[1] = header[1] | 128;
          P._IOCrypto_getRandomBytes(4);
        }
        if (t1)
          return [header];
        else
          return [header, data];
      }}
  },
  _WebSocketOutgoingTransformer_bind_closure: {
    "^": "Closure:53;this_0",
    call$1: function(eventSink) {
      var t1 = this.this_0;
      if (t1._eventSink != null)
        throw H.wrapException(new P.StateError("WebSocket transformer already used"));
      t1._eventSink = eventSink;
      return t1;
    }
  },
  _WebSocketConsumer: {
    "^": "Object;webSocket,socket,_controller,_io$_subscription,_issuedPause,_closed,_closeCompleter,_completer",
    _io$_onListen$0: [function() {
      var t1 = this._io$_subscription;
      if (t1 != null)
        t1.cancel$0();
    }, "call$0", "get$_io$_onListen", 0, 0, 1],
    _io$_onPause$0: [function() {
      var t1 = this._io$_subscription;
      if (t1 != null)
        t1.pause$0();
      else
        this._issuedPause = true;
    }, "call$0", "get$_io$_onPause", 0, 0, 1],
    _io$_onResume$0: [function() {
      var t1 = this._io$_subscription;
      if (t1 != null)
        t1.resume$0();
      else
        this._issuedPause = false;
    }, "call$0", "get$_io$_onResume", 0, 0, 1],
    _io$_cancel$0: function() {
      var t1 = this._io$_subscription;
      if (t1 != null) {
        this._io$_subscription = null;
        t1.cancel$0();
      }
    },
    _ensureController$0: function() {
      var t1, t2;
      if (this._controller != null)
        return;
      t1 = this.get$_io$_onPause();
      t2 = this.get$_io$_onResume();
      t2 = P.StreamController_StreamController(this.get$_io$_onListen(), null, t1, t2, true, null);
      this._controller = t2;
      this.socket.addStream$1(new P._WebSocketOutgoingTransformer(this.webSocket, null).bind$1(H.setRuntimeTypeInfo(new P._ControllerStream(t2), [null]))).then$2$onError(new P._WebSocketConsumer__ensureController_closure(this), new P._WebSocketConsumer__ensureController_closure0(this));
    },
    _done$2: [function(error, stackTrace) {
      var t1 = this._completer;
      if (t1 == null)
        return false;
      if (error != null)
        t1.completeError$2(error, stackTrace);
      else {
        t1 = t1.future;
        if (t1._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t1._asyncComplete$1(this.webSocket);
      }
      this._completer = null;
      return true;
    }, function() {
      return this._done$2(null, null);
    }, "_done$0", function(error) {
      return this._done$2(error, null);
    }, "_done$1", "call$2", "call$0", "call$1", "get$_done", 0, 4, 55, 4, 4],
    addStream$1: function(stream) {
      var t1;
      if (this._closed) {
        stream.listen$1(null).cancel$0();
        return P._Future$immediate(this.webSocket, null);
      }
      this._ensureController$0();
      this._completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t1 = stream.listen$4$cancelOnError$onDone$onError(new P._WebSocketConsumer_addStream_closure(this), true, this.get$_done(), this.get$_done());
      this._io$_subscription = t1;
      if (this._issuedPause) {
        t1.pause$0();
        this._issuedPause = false;
      }
      return this._completer.future;
    },
    close$0: function() {
      this._ensureController$0();
      this._controller.close$0();
      return this._closeCompleter.future.then$1(new P._WebSocketConsumer_close_closure(new P._WebSocketConsumer_close_closeSocket(this)));
    },
    add$1: function(_, data) {
      var t1;
      if (this._closed)
        return;
      this._ensureController$0();
      t1 = this._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(data);
    }
  },
  _WebSocketConsumer__ensureController_closure: {
    "^": "Closure:24;this_0",
    call$1: function(_) {
      var t1, t2;
      t1 = this.this_0;
      t1._done$0();
      t2 = t1._closeCompleter.future;
      if (t2._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t2._asyncComplete$1(t1.webSocket);
    }
  },
  _WebSocketConsumer__ensureController_closure0: {
    "^": "Closure:32;this_1",
    call$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this.this_1;
      t1._closed = true;
      t1._io$_cancel$0();
      if (!!J.getInterceptor(error).$isArgumentError) {
        if (!t1._done$2(error, stackTrace))
          t1._closeCompleter.completeError$2(error, stackTrace);
      } else {
        t1._done$0();
        t2 = t1._closeCompleter.future;
        if (t2._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t2._asyncComplete$1(t1.webSocket);
      }
    }
  },
  _WebSocketConsumer_addStream_closure: {
    "^": "Closure:24;this_0",
    call$1: function(data) {
      var t1 = this.this_0._controller;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(data);
    }
  },
  _WebSocketConsumer_close_closeSocket: {
    "^": "Closure:30;this_0",
    call$0: function() {
      var t1 = this.this_0;
      return t1.socket.close$0().catchError$1(new P._WebSocketConsumer_close_closeSocket_closure()).then$1(new P._WebSocketConsumer_close_closeSocket_closure0(t1));
    }
  },
  _WebSocketConsumer_close_closeSocket_closure: {
    "^": "Closure:24;",
    call$1: function(_) {
    }
  },
  _WebSocketConsumer_close_closeSocket_closure0: {
    "^": "Closure:24;this_1",
    call$1: function(_) {
      return this.this_1.webSocket;
    }
  },
  _WebSocketConsumer_close_closure: {
    "^": "Closure:24;closeSocket_2",
    call$1: function(_) {
      return this.closeSocket_2.call$0();
    }
  },
  _WebSocketImpl: {
    "^": "Stream;protocol,_controller,_io$_subscription,_sink,_socket,_serverSide,_readyState,_writeClosed,_closeCode,_closeReason,_pingInterval,_pingTimer,_consumer,_outCloseCode,_outCloseReason,_closeTimer",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    set$pingInterval: function(interval) {
      var t1;
      if (this._writeClosed)
        return;
      t1 = this._pingTimer;
      if (t1 != null)
        t1.cancel$0();
      this._pingInterval = interval;
      return;
    },
    add$1: function(_, data) {
      return this._sink.add$1(0, data);
    },
    addError$2: function(error, stackTrace) {
      var t1 = this._sink.get$_controller();
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._addError$2(error, stackTrace);
      return;
    },
    addStream$1: function(stream) {
      return this._sink.addStream$1(stream);
    },
    close$2: function(code, reason) {
      if (P._WebSocketImpl__isReservedStatusCode(code))
        throw H.wrapException(new P.WebSocketException("Reserved status code " + H.S(code)));
      if (this._outCloseCode == null) {
        this._outCloseCode = code;
        this._outCloseReason = reason;
      }
      if (this._closeTimer == null && (this._controller._state & 4) === 0)
        this._closeTimer = P.Timer_Timer(C.Duration_5000000, new P._WebSocketImpl_close_closure(this));
      return this._sink.close$0();
    },
    close$0: function() {
      return this.close$2(null, null);
    },
    _io$_close$2: function(code, reason) {
      var t1;
      if (this._writeClosed)
        return;
      if (this._outCloseCode == null) {
        this._outCloseCode = code;
        this._outCloseReason = reason;
      }
      this._writeClosed = true;
      t1 = this._consumer;
      t1._closed = true;
      t1._io$_cancel$0();
      t1.close$0();
    },
    _io$_close$1: function(code) {
      return this._io$_close$2(code, null);
    },
    _io$_close$0: function() {
      return this._io$_close$2(null, null);
    },
    _io$_WebSocketImpl$_fromSocket$3: function(_socket, protocol, _serverSide) {
      var t1, t2, transformer;
      t1 = this._socket;
      t2 = new P._WebSocketConsumer(this, t1, null, null, false, false, H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]), null);
      this._consumer = t2;
      t2 = H.setRuntimeTypeInfo(new P._StreamSinkImpl(t2, H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]), null, null, null, false, false, false), [null]);
      t2._io$_doneFuture = t2._doneCompleter.future;
      this._sink = t2;
      this._readyState = 1;
      transformer = new P._WebSocketProtocolTransformer(0, false, -1, -1, false, -1, 4, -1, 0, 0, 1005, "", null, this._serverSide, Array(4), H.setRuntimeTypeInfo([], [P.Uint8List]));
      t1 = t1.transform$1(transformer).listen$4$cancelOnError$onDone$onError(new P._WebSocketImpl$_fromSocket_closure(this), true, new P._WebSocketImpl$_fromSocket_closure0(this, transformer), new P._WebSocketImpl$_fromSocket_closure1(this));
      this._io$_subscription = t1;
      t1.pause$0();
      this._controller = P.StreamController_StreamController(null, this._io$_subscription.get$resume(), this._io$_subscription.get$pause(), this._io$_subscription.get$resume(), true, null);
    },
    $asStream: function() {
      return [null];
    },
    static: {"^": "_WebSocketImpl__httpClient", _WebSocketImpl$_fromSocket: function(_socket, protocol, _serverSide) {
        var t1 = new P._WebSocketImpl(protocol, null, null, null, _socket, _serverSide, 0, false, null, null, null, null, null, null, null, null);
        t1._io$_WebSocketImpl$_fromSocket$3(_socket, protocol, _serverSide);
        return t1;
      }, _WebSocketImpl__isReservedStatusCode: function(code) {
        var t1;
        if (code != null)
          if (!(code < 1000))
            if (code !== 1004)
              if (code !== 1005)
                if (code !== 1006)
                  if (!(code > 1011 && code < 1015))
                    t1 = code >= 1015 && code < 3000;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = false;
        return t1;
      }}
  },
  _WebSocketImpl$_fromSocket_closure: {
    "^": "Closure:24;this_0",
    call$1: function(data) {
      var t1, t2;
      t1 = J.getInterceptor(data);
      if (!!t1.$is_WebSocketPing) {
        t1 = this.this_0;
        if (!t1._writeClosed)
          t1._consumer.add$1(0, new P._WebSocketPong(data.payload));
      } else {
        t2 = this.this_0;
        if (!!t1.$is_WebSocketPong)
          t2.set$pingInterval(t2._pingInterval);
        else {
          t1 = t2._controller;
          if (t1._state >= 4)
            H.throwExpression(t1._badEventState$0());
          t1._async$_add$1(data);
        }
      }
    }
  },
  _WebSocketImpl$_fromSocket_closure1: {
    "^": "Closure:24;this_1",
    call$1: function(error) {
      var t1, t2;
      t1 = this.this_1;
      t2 = t1._closeTimer;
      if (t2 != null)
        t2.cancel$0();
      if (!!J.getInterceptor(error).$isFormatException)
        t1._io$_close$1(1007);
      else
        t1._io$_close$1(1002);
      t1._controller.close$0();
    }
  },
  _WebSocketImpl$_fromSocket_closure0: {
    "^": "Closure:22;this_2,transformer_3",
    call$0: function() {
      var t1, t2;
      t1 = this.this_2;
      t2 = t1._closeTimer;
      if (t2 != null)
        t2.cancel$0();
      if (t1._readyState === 1) {
        t1._readyState = 2;
        t2 = this.transformer_3;
        if (!P._WebSocketImpl__isReservedStatusCode(t2.closeCode))
          t1._io$_close$1(t2.closeCode);
        else
          t1._io$_close$0();
        t1._readyState = 3;
      }
      t2 = this.transformer_3;
      t1._closeCode = t2.closeCode;
      t1._closeReason = t2.closeReason;
      t1._controller.close$0();
    }
  },
  _WebSocketImpl_pingInterval_closure: {
    "^": "Closure:22;this_0",
    call$0: function() {
      var t1 = this.this_0;
      if (t1._writeClosed)
        return;
      t1._consumer.add$1(0, new P._WebSocketPing(null));
      t1._pingTimer = P.Timer_Timer(t1._pingInterval, new P._WebSocketImpl_pingInterval__closure(t1));
    }
  },
  _WebSocketImpl_pingInterval__closure: {
    "^": "Closure:22;this_1",
    call$0: function() {
      this.this_1._io$_close$1(1001);
    }
  },
  _WebSocketImpl_close_closure: {
    "^": "Closure:22;this_0",
    call$0: function() {
      var t1 = this.this_0;
      t1._io$_subscription.cancel$0();
      t1._controller.close$0();
    }
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  min: function(a, b) {
    var t1;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Uint8List: {
    "^": "Object;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  Int32x4List: {
    "^": "Object_ListMixin_FixedLengthListMixin;_storage<",
    get$buffer: function(_) {
      return this._storage.buffer;
    },
    get$offsetInBytes: function(_) {
      return this._storage.byteOffset;
    },
    _typed_data$_invalidIndex$2: function(_, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
    },
    _typed_data$_checkIndex$2: function(_, index, $length) {
      if (index >>> 0 != index || index >= $length)
        this._typed_data$_invalidIndex$2(0, index, $length);
    },
    _typed_data$_checkSublistArguments$3: function(_, start, end, $length) {
      var t1 = $length + 1;
      this._typed_data$_checkIndex$2(0, start, t1);
      if (end == null)
        return $length;
      this._typed_data$_checkIndex$2(this, end, t1);
      if (typeof start !== "number")
        return start.$gt();
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    get$length: function(_) {
      return C.JSInt_methods._tdivFast$1(this._storage.length, 4);
    },
    $index: function(_, index) {
      var t1, t2, t3, t4, _x, _y, _z, _w;
      t1 = this._storage;
      t2 = t1.length;
      t3 = C.JSInt_methods._tdivFast$1(t2, 4);
      if (index >>> 0 != index || index >= t3)
        this._typed_data$_invalidIndex$2(0, index, t3);
      t3 = J.getInterceptor$ns(index);
      t4 = J.$add$ns(t3.$mul(index, 4), 0);
      if (t4 >>> 0 !== t4 || t4 >= t2)
        return H.ioore(t1, t4);
      _x = t1[t4];
      t4 = J.$add$ns(t3.$mul(index, 4), 1);
      if (t4 >>> 0 !== t4 || t4 >= t2)
        return H.ioore(t1, t4);
      _y = t1[t4];
      t4 = J.$add$ns(t3.$mul(index, 4), 2);
      if (t4 >>> 0 !== t4 || t4 >= t2)
        return H.ioore(t1, t4);
      _z = t1[t4];
      t3 = J.$add$ns(t3.$mul(index, 4), 3);
      if (t3 >>> 0 !== t3 || t3 >= t2)
        return H.ioore(t1, t3);
      _w = t1[t3];
      t1 = new Int32Array(4);
      t1[0] = _x;
      t1[1] = _y;
      t1[2] = _z;
      t1[3] = _w;
      return new P.Int32x4(t1);
    },
    $indexSet: function(_, index, value) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this._storage;
      t2 = t1.length;
      t3 = C.JSInt_methods._tdivFast$1(t2, 4);
      if (index >>> 0 != index || index >= t3)
        this._typed_data$_invalidIndex$2(0, index, t3);
      t3 = J.getInterceptor$ns(index);
      t4 = J.$add$ns(t3.$mul(index, 4), 0);
      t5 = value.get$_storage();
      t6 = t5.length;
      if (0 >= t6)
        return H.ioore(t5, 0);
      t7 = t5[0];
      if (t4 >>> 0 !== t4 || t4 >= t2)
        return H.ioore(t1, t4);
      t1[t4] = t7;
      t7 = J.$add$ns(t3.$mul(index, 4), 1);
      if (1 >= t6)
        return H.ioore(t5, 1);
      t4 = t5[1];
      if (t7 >>> 0 !== t7 || t7 >= t2)
        return H.ioore(t1, t7);
      t1[t7] = t4;
      t4 = J.$add$ns(t3.$mul(index, 4), 2);
      if (2 >= t6)
        return H.ioore(t5, 2);
      t7 = t5[2];
      if (t4 >>> 0 !== t4 || t4 >= t2)
        return H.ioore(t1, t4);
      t1[t4] = t7;
      t3 = J.$add$ns(t3.$mul(index, 4), 3);
      if (3 >= t6)
        return H.ioore(t5, 3);
      t5 = t5[3];
      if (t3 >>> 0 !== t3 || t3 >= t2)
        return H.ioore(t1, t3);
      t1[t3] = t5;
    },
    sublist$2: function(_, start, end) {
      var t1 = this._storage;
      end = this._typed_data$_checkSublistArguments$3(0, start, end, C.JSInt_methods._tdivFast$1(t1.length, 4));
      if (typeof start !== "number")
        return start.$mul();
      if (typeof end !== "number")
        return end.$mul();
      return new P.Int32x4List(C.NativeUint32List_methods.sublist$2(t1, start * 4, end * 4));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [P.Int32x4];
    },
    $isEfficientLength: true,
    static: {"^": "Int32x4List_BYTES_PER_ELEMENT"}
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Int32x4];
    },
    $isEfficientLength: true
  },
  Object_ListMixin_FixedLengthListMixin: {
    "^": "Object_ListMixin+FixedLengthListMixin;"
  },
  Int32x4: {
    "^": "Object;_storage<",
    toString$0: function(_) {
      var t1 = this._storage;
      return "[" + t1[0] + ", " + t1[1] + ", " + t1[2] + ", " + t1[3] + "]";
    },
    $or: function(_, other) {
      var t1, t2;
      t1 = this._storage;
      t2 = other._storage;
      return P.Int32x4$((t1[0] | other.get$_storage()[0]) >>> 0, (t1[1] | t2[1]) >>> 0, (t1[2] | t2[2]) >>> 0, (t1[3] | t2[3]) >>> 0);
    },
    $and: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this._storage;
      t2 = t1[0];
      t3 = other.get$_storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      return P.Int32x4$((t2 & t5) >>> 0, (t6 & t7) >>> 0, (t8 & t9) >>> 0, (t1 & t3[3]) >>> 0);
    },
    $xor: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this._storage;
      t2 = t1[0];
      t3 = other.get$_storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t8 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t9 = t3[2];
      t1 = t1[3];
      if (3 >= t4)
        return H.ioore(t3, 3);
      return P.Int32x4$((t2 ^ t5) >>> 0, (t6 ^ t7) >>> 0, (t8 ^ t9) >>> 0, (t1 ^ t3[3]) >>> 0);
    },
    $add: function(_, other) {
      var r, t1, t2, t3, t4, t5;
      r = P.Int32x4$(0, 0, 0, 0);
      t1 = r._storage;
      t2 = this._storage;
      t3 = t2[0];
      t4 = other.get$_storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 + t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t2 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t2 + t4[3];
      return r;
    },
    $sub: function(_, other) {
      var r, t1, t2, t3, t4;
      r = P.Int32x4$(0, 0, 0, 0);
      t1 = r._storage;
      t2 = this._storage;
      t3 = t2[0];
      t4 = other.get$_storage();
      t1[0] = C.JSInt_methods.$sub(t3, t4.$index(0, 0));
      t1[1] = C.JSInt_methods.$sub(t2[1], t4.$index(0, 1));
      t1[2] = C.JSInt_methods.$sub(t2[2], t4.$index(0, 2));
      t1[3] = C.JSInt_methods.$sub(t2[3], t4.$index(0, 3));
      return r;
    },
    Int32x4$4: function(x, y, z, w) {
      var t1 = this._storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
      t1[3] = w;
    },
    static: {"^": "Int32x4_XXXX,Int32x4_XXXY,Int32x4_XXXZ,Int32x4_XXXW,Int32x4_XXYX,Int32x4_XXYY,Int32x4_XXYZ,Int32x4_XXYW,Int32x4_XXZX,Int32x4_XXZY,Int32x4_XXZZ,Int32x4_XXZW,Int32x4_XXWX,Int32x4_XXWY,Int32x4_XXWZ,Int32x4_XXWW,Int32x4_XYXX,Int32x4_XYXY,Int32x4_XYXZ,Int32x4_XYXW,Int32x4_XYYX,Int32x4_XYYY,Int32x4_XYYZ,Int32x4_XYYW,Int32x4_XYZX,Int32x4_XYZY,Int32x4_XYZZ,Int32x4_XYZW,Int32x4_XYWX,Int32x4_XYWY,Int32x4_XYWZ,Int32x4_XYWW,Int32x4_XZXX,Int32x4_XZXY,Int32x4_XZXZ,Int32x4_XZXW,Int32x4_XZYX,Int32x4_XZYY,Int32x4_XZYZ,Int32x4_XZYW,Int32x4_XZZX,Int32x4_XZZY,Int32x4_XZZZ,Int32x4_XZZW,Int32x4_XZWX,Int32x4_XZWY,Int32x4_XZWZ,Int32x4_XZWW,Int32x4_XWXX,Int32x4_XWXY,Int32x4_XWXZ,Int32x4_XWXW,Int32x4_XWYX,Int32x4_XWYY,Int32x4_XWYZ,Int32x4_XWYW,Int32x4_XWZX,Int32x4_XWZY,Int32x4_XWZZ,Int32x4_XWZW,Int32x4_XWWX,Int32x4_XWWY,Int32x4_XWWZ,Int32x4_XWWW,Int32x4_YXXX,Int32x4_YXXY,Int32x4_YXXZ,Int32x4_YXXW,Int32x4_YXYX,Int32x4_YXYY,Int32x4_YXYZ,Int32x4_YXYW,Int32x4_YXZX,Int32x4_YXZY,Int32x4_YXZZ,Int32x4_YXZW,Int32x4_YXWX,Int32x4_YXWY,Int32x4_YXWZ,Int32x4_YXWW,Int32x4_YYXX,Int32x4_YYXY,Int32x4_YYXZ,Int32x4_YYXW,Int32x4_YYYX,Int32x4_YYYY,Int32x4_YYYZ,Int32x4_YYYW,Int32x4_YYZX,Int32x4_YYZY,Int32x4_YYZZ,Int32x4_YYZW,Int32x4_YYWX,Int32x4_YYWY,Int32x4_YYWZ,Int32x4_YYWW,Int32x4_YZXX,Int32x4_YZXY,Int32x4_YZXZ,Int32x4_YZXW,Int32x4_YZYX,Int32x4_YZYY,Int32x4_YZYZ,Int32x4_YZYW,Int32x4_YZZX,Int32x4_YZZY,Int32x4_YZZZ,Int32x4_YZZW,Int32x4_YZWX,Int32x4_YZWY,Int32x4_YZWZ,Int32x4_YZWW,Int32x4_YWXX,Int32x4_YWXY,Int32x4_YWXZ,Int32x4_YWXW,Int32x4_YWYX,Int32x4_YWYY,Int32x4_YWYZ,Int32x4_YWYW,Int32x4_YWZX,Int32x4_YWZY,Int32x4_YWZZ,Int32x4_YWZW,Int32x4_YWWX,Int32x4_YWWY,Int32x4_YWWZ,Int32x4_YWWW,Int32x4_ZXXX,Int32x4_ZXXY,Int32x4_ZXXZ,Int32x4_ZXXW,Int32x4_ZXYX,Int32x4_ZXYY,Int32x4_ZXYZ,Int32x4_ZXYW,Int32x4_ZXZX,Int32x4_ZXZY,Int32x4_ZXZZ,Int32x4_ZXZW,Int32x4_ZXWX,Int32x4_ZXWY,Int32x4_ZXWZ,Int32x4_ZXWW,Int32x4_ZYXX,Int32x4_ZYXY,Int32x4_ZYXZ,Int32x4_ZYXW,Int32x4_ZYYX,Int32x4_ZYYY,Int32x4_ZYYZ,Int32x4_ZYYW,Int32x4_ZYZX,Int32x4_ZYZY,Int32x4_ZYZZ,Int32x4_ZYZW,Int32x4_ZYWX,Int32x4_ZYWY,Int32x4_ZYWZ,Int32x4_ZYWW,Int32x4_ZZXX,Int32x4_ZZXY,Int32x4_ZZXZ,Int32x4_ZZXW,Int32x4_ZZYX,Int32x4_ZZYY,Int32x4_ZZYZ,Int32x4_ZZYW,Int32x4_ZZZX,Int32x4_ZZZY,Int32x4_ZZZZ,Int32x4_ZZZW,Int32x4_ZZWX,Int32x4_ZZWY,Int32x4_ZZWZ,Int32x4_ZZWW,Int32x4_ZWXX,Int32x4_ZWXY,Int32x4_ZWXZ,Int32x4_ZWXW,Int32x4_ZWYX,Int32x4_ZWYY,Int32x4_ZWYZ,Int32x4_ZWYW,Int32x4_ZWZX,Int32x4_ZWZY,Int32x4_ZWZZ,Int32x4_ZWZW,Int32x4_ZWWX,Int32x4_ZWWY,Int32x4_ZWWZ,Int32x4_ZWWW,Int32x4_WXXX,Int32x4_WXXY,Int32x4_WXXZ,Int32x4_WXXW,Int32x4_WXYX,Int32x4_WXYY,Int32x4_WXYZ,Int32x4_WXYW,Int32x4_WXZX,Int32x4_WXZY,Int32x4_WXZZ,Int32x4_WXZW,Int32x4_WXWX,Int32x4_WXWY,Int32x4_WXWZ,Int32x4_WXWW,Int32x4_WYXX,Int32x4_WYXY,Int32x4_WYXZ,Int32x4_WYXW,Int32x4_WYYX,Int32x4_WYYY,Int32x4_WYYZ,Int32x4_WYYW,Int32x4_WYZX,Int32x4_WYZY,Int32x4_WYZZ,Int32x4_WYZW,Int32x4_WYWX,Int32x4_WYWY,Int32x4_WYWZ,Int32x4_WYWW,Int32x4_WZXX,Int32x4_WZXY,Int32x4_WZXZ,Int32x4_WZXW,Int32x4_WZYX,Int32x4_WZYY,Int32x4_WZYZ,Int32x4_WZYW,Int32x4_WZZX,Int32x4_WZZY,Int32x4_WZZZ,Int32x4_WZZW,Int32x4_WZWX,Int32x4_WZWY,Int32x4_WZWZ,Int32x4_WZWW,Int32x4_WWXX,Int32x4_WWXY,Int32x4_WWXZ,Int32x4_WWXW,Int32x4_WWYX,Int32x4_WWYY,Int32x4_WWYZ,Int32x4_WWYW,Int32x4_WWZX,Int32x4_WWZY,Int32x4_WWZZ,Int32x4_WWZW,Int32x4_WWWX,Int32x4_WWWY,Int32x4_WWWZ,Int32x4_WWWW", Int32x4$: function(x, y, z, w) {
        var t1 = new P.Int32x4(new Int32Array(4));
        t1.Int32x4$4(x, y, z, w);
        return t1;
      }}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkViewArguments: function(buffer, offsetInBytes, $length) {
    if (!J.getInterceptor(buffer).$isNativeByteBuffer)
      throw H.wrapException(new P.ArgumentError("Invalid view buffer"));
    if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
      throw H.wrapException(new P.ArgumentError("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
      throw H.wrapException(new P.ArgumentError("Invalid view length " + H.S($length)));
  },
  NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;buffer=,offsetInBytes:byteOffset=",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      if (end == null)
        return $length;
      this._checkIndex$2(receiver, end, t1);
      if (typeof start !== "number")
        return start.$gt();
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfInt"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, count, sourceLength, source;
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        t1 = receiver.length + 1;
        if (start >>> 0 !== start || start >= t1)
          this._invalidIndex$2(receiver, start, t1);
        if (end >>> 0 !== end || end >= t1)
          this._invalidIndex$2(receiver, end, t1);
        if (start > end)
          H.throwExpression(P.RangeError$range(start, 0, end));
        count = end - start;
        if (skipCount < 0)
          H.throwExpression(new P.ArgumentError(skipCount));
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          H.throwExpression(new P.StateError("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["", "server.dart", , R, {
  "^": "",
  main: [function() {
    P.runZoned(new R.main_closure(), new R.main_closure0(), null, null);
  }, "call$0", "main$closure", 0, 0, 1],
  main_closure: {
    "^": "Closure:22;",
    call$0: function() {
      P.HttpServer_bind("127.0.0.1", 4040, 0).then$1(new R.main__closure());
    }
  },
  main__closure: {
    "^": "Closure:24;",
    call$1: function(server) {
      server.listen$1(new R.main___closure());
    }
  },
  main___closure: {
    "^": "Closure:24;",
    call$1: function(req) {
      P.print("Incoming Request..." + H.S(req));
      if (req.get$uri()._path === "/ws")
        P._WebSocketTransformerImpl__upgrade(req, null).then$1(new R.main____closure());
    }
  },
  main____closure: {
    "^": "Closure:24;",
    call$1: function(socket) {
      $.get$clients().push(socket);
      H.IterableMixinWorkaround_forEach($.get$messages(), new R.main_____closure(socket));
      socket.listen$1(new R.main_____closure0());
    }
  },
  main_____closure: {
    "^": "Closure:24;socket_0",
    call$1: function(msg) {
      return J.add$1$ax(this.socket_0, msg);
    }
  },
  main_____closure0: {
    "^": "Closure:24;",
    call$1: function(msg) {
      $.get$messages().push(msg);
      H.IterableMixinWorkaround_forEach($.get$clients(), new R.main______closure(msg));
    }
  },
  main______closure: {
    "^": "Closure:24;msg_1",
    call$1: function(x) {
      return J.add$1$ax(x, this.msg_1);
    }
  },
  main_closure0: {
    "^": "Closure:24;",
    call$1: function(e) {
      return P.print(J.toString$0(e));
    }
  }
},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isObject = true;
J.JSNumber.$isObject = true;
P.HttpRequest.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isObject = true;
P._HttpConnection.$isObject = true;
P._HttpIncoming.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isObject = true;
P.HttpResponse.$isEventSink = true;
P.HttpResponse.$asEventSink = [[J.JSArray, J.JSInt]];
P.HttpResponse.$isObject = true;
P.Int32x4.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Cookie.$isObject = true;
P.Encoding.$isObject = true;
P.Uint8List.$isUint8List = true;
P.Uint8List.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Zone.$isZone = true;
P.Zone.$isObject = true;
P.ZoneDelegate.$isZoneDelegate = true;
P.ZoneDelegate.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.Socket.$isSocket = true;
P.Socket.$isEventSink = true;
P.Socket.$asEventSink = [[J.JSArray, J.JSInt]];
P.Socket.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.EventSink.$isEventSink = true;
P.EventSink.$isObject = true;
P.ZoneSpecification.$isZoneSpecification = true;
P.ZoneSpecification.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.Object.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$in = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$in = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$in(receiver).$and(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$in(receiver).$and(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.expand$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).expand$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$buffer$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$buffer(receiver);
};
J.get$codeUnits$s = function(receiver) {
  return J.getInterceptor$s(receiver).get$codeUnits(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$offsetInBytes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetInBytes(receiver);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.setRange$3$ax = function(receiver, a0, a1, a2) {
  return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.sublist$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
C.AsciiCodec_false = new P.AsciiCodec(false);
C.AsciiEncoder_127 = new P.AsciiEncoder(127);
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.C__RootZoneSpecification = new P._RootZoneSpecification();
C.Duration_0 = new P.Duration(0);
C.Duration_120000000 = new P.Duration(120000000);
C.Duration_5000000 = new P.Duration(5000000);
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.Latin1Codec_false = new P.Latin1Codec(false);
C.Latin1Encoder_255 = new P.Latin1Encoder(255);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [J.JSInt]);
C.List_2Vk = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46, 49]);
C.List_2Vk0 = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46, 48]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_72_84_84_80 = Isolate.makeConstantList([72, 84, 84, 80]);
C.List_A8J = Isolate.makeConstantList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"]);
C.List_E7y = Isolate.makeConstantList([72, 84, 84, 80, 47, 49, 46]);
C.List_E7y0 = Isolate.makeConstantList([13, 10, 48, 13, 10, 13, 10]);
C.List_ECn = Isolate.makeConstantList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_NUU = Isolate.makeConstantList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]);
C.List_cGl = Isolate.makeConstantList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]);
C.List_empty = Isolate.makeConstantList([]);
C.List_h8w = Isolate.makeConstantList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_yTu = Isolate.makeConstantList([48, 13, 10, 13, 10]);
C.List_yTu0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([1, 2, 3, 4, 0]), [J.JSInt]);
C.NativeUint32List_methods = H.NativeUint32List.prototype;
C.NativeUint8List_methods = H.NativeUint8List.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.SocketOption_0 = new P.SocketOption(0);
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Utf8Codec_false = new P.Utf8Codec(false);
C._ZoneSpecification_woc = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null);
$.libraries_to_load = {};
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_nullFuture", "Future__nullFuture", "get$Future__nullFuture", function() {
  return P._Future$immediate(null, null);
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_nameToEncoding", "Encoding__nameToEncoding", "get$Encoding__nameToEncoding", function() {
  return H.setRuntimeTypeInfo(H.fillLiteralMap(["iso_8859-1:1987", C.Latin1Codec_false, "iso-ir-100", C.Latin1Codec_false, "iso_8859-1", C.Latin1Codec_false, "iso-8859-1", C.Latin1Codec_false, "latin1", C.Latin1Codec_false, "l1", C.Latin1Codec_false, "ibm819", C.Latin1Codec_false, "cp819", C.Latin1Codec_false, "csisolatin1", C.Latin1Codec_false, "iso-ir-6", C.AsciiCodec_false, "ansi_x3.4-1968", C.AsciiCodec_false, "ansi_x3.4-1986", C.AsciiCodec_false, "iso_646.irv:1991", C.AsciiCodec_false, "iso646-us", C.AsciiCodec_false, "us-ascii", C.AsciiCodec_false, "us", C.AsciiCodec_false, "ibm367", C.AsciiCodec_false, "cp367", C.AsciiCodec_false, "csascii", C.AsciiCodec_false, "ascii", C.AsciiCodec_false, "csutf8", C.Utf8Codec_false, "utf-8", C.Utf8Codec_false], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, P.Encoding]);
});
Isolate.$lazy($, "clients", "clients", "get$clients", function() {
  return [];
});
Isolate.$lazy($, "messages", "messages", "get$messages", function() {
  return [];
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "dynamic__String", args: [J.JSString]},
{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
{func: "void__Zone_ZoneDelegate_Zone_dynamic_StackTrace", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, null, P.StackTrace]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args0", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args1_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}, null]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args2_dynamic_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}, null, null]},
{func: "ZoneCallback__Zone_ZoneDelegate_Zone_args0", ret: {func: "args0"}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "ZoneUnaryCallback__Zone_ZoneDelegate_Zone_args1", ret: {func: "args1", args: [null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}]},
{func: "ZoneBinaryCallback__Zone_ZoneDelegate_Zone_args2", ret: {func: "args2", args: [null, null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}]},
{func: "void__Zone_ZoneDelegate_Zone_args0", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "Timer__Zone_ZoneDelegate_Zone_Duration_void_", ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: "void_", void: true}]},
{func: "Timer__Zone_ZoneDelegate_Zone_Duration_void__Timer", ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: "void__Timer", void: true, args: [P.Timer]}]},
{func: "void__Zone_ZoneDelegate_Zone_String", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, J.JSString]},
{func: "void__String", void: true, args: [J.JSString]},
{func: "Zone__Zone_ZoneDelegate_Zone_ZoneSpecification_Map", ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, P.Map]},
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "args0"},
{func: "args2", args: [null, null]},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: J.JSBool},
{func: "dynamic__bool", args: [J.JSBool]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "Future_", ret: P.Future},
{func: "void__Object_StackTrace", void: true, args: [P.Object, P.StackTrace]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void___Future", void: true, opt: [P.Future]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
{func: "void__dynamic__dynamic", void: true, args: [null], opt: [null]},
{func: "dynamic__Zone_ZoneDelegate_Zone_dynamic_StackTrace", args: [P.Zone, P.ZoneDelegate, P.Zone, null, P.StackTrace]},
{func: "void__int_int", void: true, args: [J.JSInt, J.JSInt]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
{func: "bool__int", ret: J.JSBool, args: [J.JSInt]},
{func: "int__int", ret: J.JSInt, args: [J.JSInt]},
{func: "int__dynamic_dynamic", ret: J.JSInt, args: [null, null]},
{func: "int__int_int", ret: J.JSInt, args: [J.JSInt, J.JSInt]},
{func: "void__List", void: true, args: [[J.JSArray, J.JSInt]]},
{func: "String__String", ret: J.JSString, args: [J.JSString]},
{func: "dynamic__String_List", args: [J.JSString, [J.JSArray, J.JSString]]},
{func: "String_", ret: J.JSString},
{func: "bool__String", ret: J.JSBool, args: [J.JSString]},
{func: "dynamic__String_String", args: [J.JSString, J.JSString]},
{func: "Future___bool", ret: P.Future, named: {force: J.JSBool}},
false,
{func: "dynamic__Socket", args: [P.Socket]},
{func: "dynamic__EventSink", args: [P.EventSink]},
{func: "Future__String", ret: P.Future, args: [J.JSString]},
{func: "bool___dynamic_StackTrace", ret: J.JSBool, opt: [null, P.StackTrace]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner((function(a){H.startRootIsolate(R.main$closure(),a)}), []);
  } else {
    (function(a){H.startRootIsolate(R.main$closure(),a)})([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function NativeByteBuffer() {
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteBuffer.prototype = $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  NativeTypedData.prototype.get$buffer = function(receiver) {
    return receiver.buffer;
  };
  NativeTypedData.prototype.get$offsetInBytes = function(receiver) {
    return receiver.byteOffset;
  };
  function NativeInt32List() {
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt32List.prototype = $desc;
  function NativeUint32List() {
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint32List.prototype = $desc;
  function NativeUint8List() {
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "Null";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(_string) {
    this._string = _string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(box_0, entry_1) {
    this.box_0 = box_0;
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(box_0, entry_2) {
    this.box_0 = box_0;
    this.entry_2 = entry_2;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, isPaused, delayedEvents, pauseTokens, doneHandlers, errorsAreFatal) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this.errorsAreFatal = errorsAreFatal;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  function _IsolateContext_handlePing_closure(responsePort_0) {
    this.responsePort_0 = responsePort_0;
  }
  _IsolateContext_handlePing_closure.builtin$cls = "_IsolateContext_handlePing_closure";
  if (!"name" in _IsolateContext_handlePing_closure)
    _IsolateContext_handlePing_closure.name = "_IsolateContext_handlePing_closure";
  $desc = $collectedClasses._IsolateContext_handlePing_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext_handlePing_closure.prototype = $desc;
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function() {
    return this.message;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, startPaused_4, replyTo_5) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.startPaused_4 = startPaused_4;
    this.replyTo_5 = replyTo_5;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function IsolateNatives__startIsolate_runStartFunction(topLevel_0, args_1, message_2, isSpawnUri_3) {
    this.topLevel_0 = topLevel_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(_id, _handler, __isolate_helper$_isClosed) {
    this._id = _id;
    this._handler = _handler;
    this.__isolate_helper$_isClosed = __isolate_helper$_isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$__isolate_helper$_isClosed = function() {
    return this.__isolate_helper$_isClosed;
  };
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TimerImpl$periodic_closure(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl$periodic_closure.builtin$cls = "TimerImpl$periodic_closure";
  if (!"name" in TimerImpl$periodic_closure)
    TimerImpl$periodic_closure.name = "TimerImpl$periodic_closure";
  $desc = $collectedClasses.TimerImpl$periodic_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl$periodic_closure.prototype = $desc;
  function CapabilityImpl(_id) {
    this._id = _id;
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.prototype.get$_id = function() {
    return this._id;
  };
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  RuntimeError.prototype.get$message = function() {
    return this.message;
  };
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._current = _current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  SkipIterable.builtin$cls = "SkipIterable";
  if (!"name" in SkipIterable)
    SkipIterable.name = "SkipIterable";
  $desc = $collectedClasses.SkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterable.prototype = $desc;
  function EfficientLengthSkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
  if (!"name" in EfficientLengthSkipIterable)
    EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
  $desc = $collectedClasses.EfficientLengthSkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthSkipIterable.prototype = $desc;
  function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  }
  SkipIterator.builtin$cls = "SkipIterator";
  if (!"name" in SkipIterator)
    SkipIterator.name = "SkipIterator";
  $desc = $collectedClasses.SkipIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function() {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, coreFuture_1) {
    this.this_0 = this_0;
    this.coreFuture_1 = coreFuture_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncComplete_closure0(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_handleValueCallback(box_1, listener_3, sourceValue_4, zone_5) {
    this.box_1 = box_1;
    this.listener_3 = listener_3;
    this.sourceValue_4 = sourceValue_4;
    this.zone_5 = zone_5;
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  function _Future__propagateToListeners_handleError(box_2, box_1, listener_6, zone_7) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.listener_6 = listener_6;
    this.zone_7 = zone_7;
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback(box_2, box_1, hasError_8, listener_9, zone_10) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_8 = hasError_8;
    this.listener_9 = listener_9;
    this.zone_10 = zone_10;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(box_2, listener_11) {
    this.box_2 = box_2;
    this.listener_11 = listener_11;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(box_0, listener_12) {
    this.box_0 = box_0;
    this.listener_12 = listener_12;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.prototype.get$next = function() {
    return this.next;
  };
  _AsyncCallbackEntry.prototype.set$next = function(v) {
    return this.next = v;
  };
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_Stream$fromIterable_closure(T_0, data_1) {
    this.T_0 = T_0;
    this.data_1 = data_1;
  }
  Stream_Stream$fromIterable_closure.builtin$cls = "Stream_Stream$fromIterable_closure";
  if (!"name" in Stream_Stream$fromIterable_closure)
    Stream_Stream$fromIterable_closure.name = "Stream_Stream$fromIterable_closure";
  $desc = $collectedClasses.Stream_Stream$fromIterable_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_Stream$fromIterable_closure.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_any_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_any_closure.builtin$cls = "Stream_any_closure";
  if (!"name" in Stream_any_closure)
    Stream_any_closure.name = "Stream_any_closure";
  $desc = $collectedClasses.Stream_any_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure.prototype = $desc;
  function Stream_any__closure(test_4, element_5) {
    this.test_4 = test_4;
    this.element_5 = element_5;
  }
  Stream_any__closure.builtin$cls = "Stream_any__closure";
  if (!"name" in Stream_any__closure)
    Stream_any__closure.name = "Stream_any__closure";
  $desc = $collectedClasses.Stream_any__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure.prototype = $desc;
  function Stream_any__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_any__closure0.builtin$cls = "Stream_any__closure0";
  if (!"name" in Stream_any__closure0)
    Stream_any__closure0.name = "Stream_any__closure0";
  $desc = $collectedClasses.Stream_any__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure0.prototype = $desc;
  function Stream_any_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_any_closure0.builtin$cls = "Stream_any_closure0";
  if (!"name" in Stream_any_closure0)
    Stream_any_closure0.name = "Stream_any_closure0";
  $desc = $collectedClasses.Stream_any_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function EventSink() {
  }
  EventSink.builtin$cls = "EventSink";
  if (!"name" in EventSink)
    EventSink.name = "EventSink";
  $desc = $collectedClasses.EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventSink.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _NoCallbacks() {
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbacks.prototype = $desc;
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  function _StreamController__AsyncStreamControllerDispatch0() {
  }
  _StreamController__AsyncStreamControllerDispatch0.builtin$cls = "_StreamController__AsyncStreamControllerDispatch0";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch0)
    _StreamController__AsyncStreamControllerDispatch0.name = "_StreamController__AsyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch0.prototype = $desc;
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  function _StreamController__SyncStreamControllerDispatch0() {
  }
  _StreamController__SyncStreamControllerDispatch0.builtin$cls = "_StreamController__SyncStreamControllerDispatch0";
  if (!"name" in _StreamController__SyncStreamControllerDispatch0)
    _StreamController__SyncStreamControllerDispatch0.name = "_StreamController__SyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch0.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  function _AddStreamState() {
  }
  _AddStreamState.builtin$cls = "_AddStreamState";
  if (!"name" in _AddStreamState)
    _AddStreamState.name = "_AddStreamState";
  $desc = $collectedClasses._AddStreamState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AddStreamState.prototype = $desc;
  function _AddStreamState_makeErrorHandler_closure(controller_0) {
    this.controller_0 = controller_0;
  }
  _AddStreamState_makeErrorHandler_closure.builtin$cls = "_AddStreamState_makeErrorHandler_closure";
  if (!"name" in _AddStreamState_makeErrorHandler_closure)
    _AddStreamState_makeErrorHandler_closure.name = "_AddStreamState_makeErrorHandler_closure";
  $desc = $collectedClasses._AddStreamState_makeErrorHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AddStreamState_makeErrorHandler_closure.prototype = $desc;
  function _StreamControllerAddStreamState(varData, addStreamFuture, addSubscription) {
    this.varData = varData;
    this.addStreamFuture = addStreamFuture;
    this.addSubscription = addSubscription;
  }
  _StreamControllerAddStreamState.builtin$cls = "_StreamControllerAddStreamState";
  if (!"name" in _StreamControllerAddStreamState)
    _StreamControllerAddStreamState.name = "_StreamControllerAddStreamState";
  $desc = $collectedClasses._StreamControllerAddStreamState;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamControllerAddStreamState.prototype = $desc;
  _StreamControllerAddStreamState.prototype.get$varData = function() {
    return this.varData;
  };
  _StreamControllerAddStreamState.prototype.set$varData = function(v) {
    return this.varData = v;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription_asFuture_closure(futureValue_0, result_1) {
    this.futureValue_0 = futureValue_0;
    this.result_1 = result_1;
  }
  _BufferingStreamSubscription_asFuture_closure.builtin$cls = "_BufferingStreamSubscription_asFuture_closure";
  if (!"name" in _BufferingStreamSubscription_asFuture_closure)
    _BufferingStreamSubscription_asFuture_closure.name = "_BufferingStreamSubscription_asFuture_closure";
  $desc = $collectedClasses._BufferingStreamSubscription_asFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription_asFuture_closure.prototype = $desc;
  function _BufferingStreamSubscription_asFuture_closure0(this_2, result_3) {
    this.this_2 = this_2;
    this.result_3 = result_3;
  }
  _BufferingStreamSubscription_asFuture_closure0.builtin$cls = "_BufferingStreamSubscription_asFuture_closure0";
  if (!"name" in _BufferingStreamSubscription_asFuture_closure0)
    _BufferingStreamSubscription_asFuture_closure0.name = "_BufferingStreamSubscription_asFuture_closure0";
  $desc = $collectedClasses._BufferingStreamSubscription_asFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription_asFuture_closure0.prototype = $desc;
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _GeneratedStreamImpl(_pending, _isUsed) {
    this._pending = _pending;
    this._isUsed = _isUsed;
  }
  _GeneratedStreamImpl.builtin$cls = "_GeneratedStreamImpl";
  if (!"name" in _GeneratedStreamImpl)
    _GeneratedStreamImpl.name = "_GeneratedStreamImpl";
  $desc = $collectedClasses._GeneratedStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GeneratedStreamImpl.prototype = $desc;
  function _IterablePendingEvents(_async$_iterator, _state) {
    this._async$_iterator = _async$_iterator;
    this._state = _state;
  }
  _IterablePendingEvents.builtin$cls = "_IterablePendingEvents";
  if (!"name" in _IterablePendingEvents)
    _IterablePendingEvents.name = "_IterablePendingEvents";
  $desc = $collectedClasses._IterablePendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IterablePendingEvents.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function() {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function() {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_async$_stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_stream = _async$_stream;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function _ExpandStream(_expand, _async$_source) {
    this._expand = _expand;
    this._async$_source = _async$_source;
  }
  _ExpandStream.builtin$cls = "_ExpandStream";
  if (!"name" in _ExpandStream)
    _ExpandStream.name = "_ExpandStream";
  $desc = $collectedClasses._ExpandStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExpandStream.prototype = $desc;
  function _HandleErrorStream(_transform, _test, _async$_source) {
    this._transform = _transform;
    this._test = _test;
    this._async$_source = _async$_source;
  }
  _HandleErrorStream.builtin$cls = "_HandleErrorStream";
  if (!"name" in _HandleErrorStream)
    _HandleErrorStream.name = "_HandleErrorStream";
  $desc = $collectedClasses._HandleErrorStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HandleErrorStream.prototype = $desc;
  function _SkipStream(_remaining, _async$_source) {
    this._remaining = _remaining;
    this._async$_source = _async$_source;
  }
  _SkipStream.builtin$cls = "_SkipStream";
  if (!"name" in _SkipStream)
    _SkipStream.name = "_SkipStream";
  $desc = $collectedClasses._SkipStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SkipStream.prototype = $desc;
  function _EventSinkWrapper(_async$_sink) {
    this._async$_sink = _async$_sink;
  }
  _EventSinkWrapper.builtin$cls = "_EventSinkWrapper";
  if (!"name" in _EventSinkWrapper)
    _EventSinkWrapper.name = "_EventSinkWrapper";
  $desc = $collectedClasses._EventSinkWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSinkWrapper.prototype = $desc;
  function _SinkTransformerStreamSubscription(_transformerSink, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._transformerSink = _transformerSink;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _SinkTransformerStreamSubscription.builtin$cls = "_SinkTransformerStreamSubscription";
  if (!"name" in _SinkTransformerStreamSubscription)
    _SinkTransformerStreamSubscription.name = "_SinkTransformerStreamSubscription";
  $desc = $collectedClasses._SinkTransformerStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SinkTransformerStreamSubscription.prototype = $desc;
  function _BoundSinkStream(_sinkMapper, _async$_stream) {
    this._sinkMapper = _sinkMapper;
    this._async$_stream = _async$_stream;
  }
  _BoundSinkStream.builtin$cls = "_BoundSinkStream";
  if (!"name" in _BoundSinkStream)
    _BoundSinkStream.name = "_BoundSinkStream";
  $desc = $collectedClasses._BoundSinkStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BoundSinkStream.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function ZoneSpecification() {
  }
  ZoneSpecification.builtin$cls = "ZoneSpecification";
  if (!"name" in ZoneSpecification)
    ZoneSpecification.name = "ZoneSpecification";
  $desc = $collectedClasses.ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneSpecification.prototype = $desc;
  function _ZoneSpecification(handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, scheduleMicrotask, createTimer, createPeriodicTimer, print, fork) {
    this.handleUncaughtError = handleUncaughtError;
    this.run = run;
    this.runUnary = runUnary;
    this.runBinary = runBinary;
    this.registerCallback = registerCallback;
    this.registerUnaryCallback = registerUnaryCallback;
    this.registerBinaryCallback = registerBinaryCallback;
    this.scheduleMicrotask = scheduleMicrotask;
    this.createTimer = createTimer;
    this.createPeriodicTimer = createPeriodicTimer;
    this.print = print;
    this.fork = fork;
  }
  _ZoneSpecification.builtin$cls = "_ZoneSpecification";
  if (!"name" in _ZoneSpecification)
    _ZoneSpecification.name = "_ZoneSpecification";
  $desc = $collectedClasses._ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneSpecification.prototype = $desc;
  _ZoneSpecification.prototype.get$handleUncaughtError = function() {
    return this.handleUncaughtError;
  };
  _ZoneSpecification.prototype.get$run = function() {
    return this.run;
  };
  _ZoneSpecification.prototype.get$runUnary = function() {
    return this.runUnary;
  };
  _ZoneSpecification.prototype.get$runBinary = function() {
    return this.runBinary;
  };
  _ZoneSpecification.prototype.get$registerCallback = function() {
    return this.registerCallback;
  };
  _ZoneSpecification.prototype.get$registerUnaryCallback = function() {
    return this.registerUnaryCallback;
  };
  _ZoneSpecification.prototype.get$registerBinaryCallback = function() {
    return this.registerBinaryCallback;
  };
  _ZoneSpecification.prototype.get$scheduleMicrotask = function() {
    return this.scheduleMicrotask;
  };
  _ZoneSpecification.prototype.get$createTimer = function() {
    return this.createTimer;
  };
  _ZoneSpecification.prototype.get$createPeriodicTimer = function() {
    return this.createPeriodicTimer;
  };
  _ZoneSpecification.prototype.get$print = function() {
    return this.print;
  };
  _ZoneSpecification.prototype.get$fork = function() {
    return this.fork;
  };
  function ZoneDelegate() {
  }
  ZoneDelegate.builtin$cls = "ZoneDelegate";
  if (!"name" in ZoneDelegate)
    ZoneDelegate.name = "ZoneDelegate";
  $desc = $collectedClasses.ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneDelegate.prototype = $desc;
  function Zone() {
  }
  Zone.builtin$cls = "Zone";
  if (!"name" in Zone)
    Zone.name = "Zone";
  $desc = $collectedClasses.Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Zone.prototype = $desc;
  function _ZoneDelegate(_degelationTarget) {
    this._degelationTarget = _degelationTarget;
  }
  _ZoneDelegate.builtin$cls = "_ZoneDelegate";
  if (!"name" in _ZoneDelegate)
    _ZoneDelegate.name = "_ZoneDelegate";
  $desc = $collectedClasses._ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneDelegate.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _CustomizedZone(parent, _specification, _map) {
    this.parent = parent;
    this._specification = _specification;
    this._map = _map;
  }
  _CustomizedZone.builtin$cls = "_CustomizedZone";
  if (!"name" in _CustomizedZone)
    _CustomizedZone.name = "_CustomizedZone";
  $desc = $collectedClasses._CustomizedZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomizedZone.prototype = $desc;
  _CustomizedZone.prototype.get$parent = function() {
    return this.parent;
  };
  _CustomizedZone.prototype.get$_specification = function() {
    return this._specification;
  };
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _rootFork_closure(copiedMap_0) {
    this.copiedMap_0 = copiedMap_0;
  }
  _rootFork_closure.builtin$cls = "_rootFork_closure";
  if (!"name" in _rootFork_closure)
    _rootFork_closure.name = "_rootFork_closure";
  $desc = $collectedClasses._rootFork_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootFork_closure.prototype = $desc;
  function _RootZoneSpecification() {
  }
  _RootZoneSpecification.builtin$cls = "_RootZoneSpecification";
  if (!"name" in _RootZoneSpecification)
    _RootZoneSpecification.name = "_RootZoneSpecification";
  $desc = $collectedClasses._RootZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZoneSpecification.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function runZoned_closure(onError_0) {
    this.onError_0 = onError_0;
  }
  runZoned_closure.builtin$cls = "runZoned_closure";
  if (!"name" in runZoned_closure)
    runZoned_closure.name = "runZoned_closure";
  $desc = $collectedClasses.runZoned_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  runZoned_closure.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_collection$_map) {
    this._collection$_map = _collection$_map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_collection$_map, _keys, _offset, _collection$_current) {
    this._collection$_map = _collection$_map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_collection$_map) {
    this._collection$_map = _collection$_map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_collection$_map, _modifications, _cell, _collection$_current) {
    this._collection$_map = _collection$_map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function() {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function LinkedList(_modificationCount, _collection$_length, _next, _previous) {
    this._modificationCount = _modificationCount;
    this._collection$_length = _collection$_length;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedList.builtin$cls = "LinkedList";
  if (!"name" in LinkedList)
    LinkedList.name = "LinkedList";
  $desc = $collectedClasses.LinkedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedList.prototype = $desc;
  LinkedList.prototype.get$_next = function() {
    return this._next;
  };
  LinkedList.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedList.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedList.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function _LinkedListIterator(_list, _modificationCount, _collection$_current, _next) {
    this._list = _list;
    this._modificationCount = _modificationCount;
    this._collection$_current = _collection$_current;
    this._next = _next;
  }
  _LinkedListIterator.builtin$cls = "_LinkedListIterator";
  if (!"name" in _LinkedListIterator)
    _LinkedListIterator.name = "_LinkedListIterator";
  $desc = $collectedClasses._LinkedListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedListIterator.prototype = $desc;
  function LinkedListEntry(_next, _previous) {
    this._next = _next;
    this._previous = _previous;
  }
  LinkedListEntry.builtin$cls = "LinkedListEntry";
  if (!"name" in LinkedListEntry)
    LinkedListEntry.name = "LinkedListEntry";
  $desc = $collectedClasses.LinkedListEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedListEntry.prototype = $desc;
  LinkedListEntry.prototype.get$_next = function() {
    return this._next;
  };
  LinkedListEntry.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedListEntry.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedListEntry.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._position = _position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function AsciiCodec(_allowInvalid) {
    this._allowInvalid = _allowInvalid;
  }
  AsciiCodec.builtin$cls = "AsciiCodec";
  if (!"name" in AsciiCodec)
    AsciiCodec.name = "AsciiCodec";
  $desc = $collectedClasses.AsciiCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AsciiCodec.prototype = $desc;
  function _UnicodeSubsetEncoder() {
  }
  _UnicodeSubsetEncoder.builtin$cls = "_UnicodeSubsetEncoder";
  if (!"name" in _UnicodeSubsetEncoder)
    _UnicodeSubsetEncoder.name = "_UnicodeSubsetEncoder";
  $desc = $collectedClasses._UnicodeSubsetEncoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UnicodeSubsetEncoder.prototype = $desc;
  function AsciiEncoder(_subsetMask) {
    this._subsetMask = _subsetMask;
  }
  AsciiEncoder.builtin$cls = "AsciiEncoder";
  if (!"name" in AsciiEncoder)
    AsciiEncoder.name = "AsciiEncoder";
  $desc = $collectedClasses.AsciiEncoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AsciiEncoder.prototype = $desc;
  function ByteConversionSink() {
  }
  ByteConversionSink.builtin$cls = "ByteConversionSink";
  if (!"name" in ByteConversionSink)
    ByteConversionSink.name = "ByteConversionSink";
  $desc = $collectedClasses.ByteConversionSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteConversionSink.prototype = $desc;
  function ByteConversionSinkBase() {
  }
  ByteConversionSinkBase.builtin$cls = "ByteConversionSinkBase";
  if (!"name" in ByteConversionSinkBase)
    ByteConversionSinkBase.name = "ByteConversionSinkBase";
  $desc = $collectedClasses.ByteConversionSinkBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteConversionSinkBase.prototype = $desc;
  function _ByteAdapterSink(_convert$_sink) {
    this._convert$_sink = _convert$_sink;
  }
  _ByteAdapterSink.builtin$cls = "_ByteAdapterSink";
  if (!"name" in _ByteAdapterSink)
    _ByteAdapterSink.name = "_ByteAdapterSink";
  $desc = $collectedClasses._ByteAdapterSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ByteAdapterSink.prototype = $desc;
  function ChunkedConversionSink() {
  }
  ChunkedConversionSink.builtin$cls = "ChunkedConversionSink";
  if (!"name" in ChunkedConversionSink)
    ChunkedConversionSink.name = "ChunkedConversionSink";
  $desc = $collectedClasses.ChunkedConversionSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChunkedConversionSink.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function Latin1Codec(_allowInvalid) {
    this._allowInvalid = _allowInvalid;
  }
  Latin1Codec.builtin$cls = "Latin1Codec";
  if (!"name" in Latin1Codec)
    Latin1Codec.name = "Latin1Codec";
  $desc = $collectedClasses.Latin1Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Latin1Codec.prototype = $desc;
  function Latin1Encoder(_subsetMask) {
    this._subsetMask = _subsetMask;
  }
  Latin1Encoder.builtin$cls = "Latin1Encoder";
  if (!"name" in Latin1Encoder)
    Latin1Encoder.name = "Latin1Encoder";
  $desc = $collectedClasses.Latin1Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Latin1Encoder.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _convert$_buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._convert$_buffer = _convert$_buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function _Utf8Decoder_convert_addSingleBytes(box_0, this_1, codeUnits_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.codeUnits_2 = codeUnits_2;
  }
  _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
  if (!"name" in _Utf8Decoder_convert_addSingleBytes)
    _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
  $desc = $collectedClasses._Utf8Decoder_convert_addSingleBytes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function DateTime() {
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function() {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function() {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function() {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function() {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function OutOfMemoryError() {
  }
  OutOfMemoryError.builtin$cls = "OutOfMemoryError";
  if (!"name" in OutOfMemoryError)
    OutOfMemoryError.name = "OutOfMemoryError";
  $desc = $collectedClasses.OutOfMemoryError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutOfMemoryError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function() {
    return this.message;
  };
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function() {
    return this.message;
  };
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function() {
    return this.name;
  };
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Uri(_host, _port, _path, scheme, userInfo, query, fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.query = query;
    this.fragment = fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri_parse_isRegName() {
  }
  Uri_parse_isRegName.builtin$cls = "Uri_parse_isRegName";
  if (!"name" in Uri_parse_isRegName)
    Uri_parse_isRegName.name = "Uri_parse_isRegName";
  $desc = $collectedClasses.Uri_parse_isRegName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_isRegName.prototype = $desc;
  function Uri_parse_ipV6Address(uri_0) {
    this.uri_0 = uri_0;
  }
  Uri_parse_ipV6Address.builtin$cls = "Uri_parse_ipV6Address";
  if (!"name" in Uri_parse_ipV6Address)
    Uri_parse_ipV6Address.name = "Uri_parse_ipV6Address";
  $desc = $collectedClasses.Uri_parse_ipV6Address;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_ipV6Address.prototype = $desc;
  function Uri__makeScheme_isSchemeLowerCharacter() {
  }
  Uri__makeScheme_isSchemeLowerCharacter.builtin$cls = "Uri__makeScheme_isSchemeLowerCharacter";
  if (!"name" in Uri__makeScheme_isSchemeLowerCharacter)
    Uri__makeScheme_isSchemeLowerCharacter.name = "Uri__makeScheme_isSchemeLowerCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeLowerCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeLowerCharacter.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri__normalize_isNormalizedHexDigit() {
  }
  Uri__normalize_isNormalizedHexDigit.builtin$cls = "Uri__normalize_isNormalizedHexDigit";
  if (!"name" in Uri__normalize_isNormalizedHexDigit)
    Uri__normalize_isNormalizedHexDigit.name = "Uri__normalize_isNormalizedHexDigit";
  $desc = $collectedClasses.Uri__normalize_isNormalizedHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isNormalizedHexDigit.prototype = $desc;
  function Uri__normalize_isLowerCaseHexDigit() {
  }
  Uri__normalize_isLowerCaseHexDigit.builtin$cls = "Uri__normalize_isLowerCaseHexDigit";
  if (!"name" in Uri__normalize_isLowerCaseHexDigit)
    Uri__normalize_isLowerCaseHexDigit.name = "Uri__normalize_isLowerCaseHexDigit";
  $desc = $collectedClasses.Uri__normalize_isLowerCaseHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isLowerCaseHexDigit.prototype = $desc;
  function Uri__normalize_isUnreserved() {
  }
  Uri__normalize_isUnreserved.builtin$cls = "Uri__normalize_isUnreserved";
  if (!"name" in Uri__normalize_isUnreserved)
    Uri__normalize_isUnreserved.name = "Uri__normalize_isUnreserved";
  $desc = $collectedClasses.Uri__normalize_isUnreserved;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isUnreserved.prototype = $desc;
  function Uri__normalize_normalizeHexDigit(component_1, isNormalizedHexDigit_2, isLowerCaseHexDigit_3) {
    this.component_1 = component_1;
    this.isNormalizedHexDigit_2 = isNormalizedHexDigit_2;
    this.isLowerCaseHexDigit_3 = isLowerCaseHexDigit_3;
  }
  Uri__normalize_normalizeHexDigit.builtin$cls = "Uri__normalize_normalizeHexDigit";
  if (!"name" in Uri__normalize_normalizeHexDigit)
    Uri__normalize_normalizeHexDigit.name = "Uri__normalize_normalizeHexDigit";
  $desc = $collectedClasses.Uri__normalize_normalizeHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_normalizeHexDigit.prototype = $desc;
  function Uri__normalize_decodeHexDigitPair(component_4) {
    this.component_4 = component_4;
  }
  Uri__normalize_decodeHexDigitPair.builtin$cls = "Uri__normalize_decodeHexDigitPair";
  if (!"name" in Uri__normalize_decodeHexDigitPair)
    Uri__normalize_decodeHexDigitPair.name = "Uri__normalize_decodeHexDigitPair";
  $desc = $collectedClasses.Uri__normalize_decodeHexDigitPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_decodeHexDigitPair.prototype = $desc;
  function Uri__normalize_fillResult(box_0, component_5) {
    this.box_0 = box_0;
    this.component_5 = component_5;
  }
  Uri__normalize_fillResult.builtin$cls = "Uri__normalize_fillResult";
  if (!"name" in Uri__normalize_fillResult)
    Uri__normalize_fillResult.name = "Uri__normalize_fillResult";
  $desc = $collectedClasses.Uri__normalize_fillResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_fillResult.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error() {
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_0, error_1) {
    this.host_0 = host_0;
    this.error_1 = error_1;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri_parseIPv6Address_closure(parts_2) {
    this.parts_2 = parts_2;
  }
  Uri_parseIPv6Address_closure.builtin$cls = "Uri_parseIPv6Address_closure";
  if (!"name" in Uri_parseIPv6Address_closure)
    Uri_parseIPv6Address_closure.name = "Uri_parseIPv6Address_closure";
  $desc = $collectedClasses.Uri_parseIPv6Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_closure.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function _HashBase() {
  }
  _HashBase.builtin$cls = "_HashBase";
  if (!"name" in _HashBase)
    _HashBase.name = "_HashBase";
  $desc = $collectedClasses._HashBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashBase.prototype = $desc;
  function _SHA1(_w, _chunkSizeInWords, _digestSizeInWords, _bigEndianWords, _lengthInBytes, _pendingData, _currentChunk, _h, _digestCalled) {
    this._w = _w;
    this._chunkSizeInWords = _chunkSizeInWords;
    this._digestSizeInWords = _digestSizeInWords;
    this._bigEndianWords = _bigEndianWords;
    this._lengthInBytes = _lengthInBytes;
    this._pendingData = _pendingData;
    this._currentChunk = _currentChunk;
    this._h = _h;
    this._digestCalled = _digestCalled;
  }
  _SHA1.builtin$cls = "_SHA1";
  if (!"name" in _SHA1)
    _SHA1.name = "_SHA1";
  $desc = $collectedClasses._SHA1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SHA1.prototype = $desc;
  function ZLibEncoder(gzip, level, memLevel, strategy, windowBits, dictionary, raw) {
    this.gzip = gzip;
    this.level = level;
    this.memLevel = memLevel;
    this.strategy = strategy;
    this.windowBits = windowBits;
    this.dictionary = dictionary;
    this.raw = raw;
  }
  ZLibEncoder.builtin$cls = "ZLibEncoder";
  if (!"name" in ZLibEncoder)
    ZLibEncoder.name = "ZLibEncoder";
  $desc = $collectedClasses.ZLibEncoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZLibEncoder.prototype = $desc;
  function _ZLibEncoderSink(_filter, _sink, _closed, _empty) {
    this._filter = _filter;
    this._sink = _sink;
    this._closed = _closed;
    this._empty = _empty;
  }
  _ZLibEncoderSink.builtin$cls = "_ZLibEncoderSink";
  if (!"name" in _ZLibEncoderSink)
    _ZLibEncoderSink.name = "_ZLibEncoderSink";
  $desc = $collectedClasses._ZLibEncoderSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZLibEncoderSink.prototype = $desc;
  function _FilterSink() {
  }
  _FilterSink.builtin$cls = "_FilterSink";
  if (!"name" in _FilterSink)
    _FilterSink.name = "_FilterSink";
  $desc = $collectedClasses._FilterSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FilterSink.prototype = $desc;
  function Cookie() {
  }
  Cookie.builtin$cls = "Cookie";
  if (!"name" in Cookie)
    Cookie.name = "Cookie";
  $desc = $collectedClasses.Cookie;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cookie.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  function HttpResponse() {
  }
  HttpResponse.builtin$cls = "HttpResponse";
  if (!"name" in HttpResponse)
    HttpResponse.name = "HttpResponse";
  $desc = $collectedClasses.HttpResponse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpResponse.prototype = $desc;
  function HttpException(message, uri) {
    this.message = message;
    this.uri = uri;
  }
  HttpException.builtin$cls = "HttpException";
  if (!"name" in HttpException)
    HttpException.name = "HttpException";
  $desc = $collectedClasses.HttpException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpException.prototype = $desc;
  HttpException.prototype.get$message = function() {
    return this.message;
  };
  HttpException.prototype.get$uri = function() {
    return this.uri;
  };
  function _HttpHeaders(_headers, protocolVersion, _mutable, _noFoldingHeaders, _contentLength, _persistentConnection, _chunkedTransferEncoding, _io$_host, _io$_port, _defaultPortForScheme) {
    this._headers = _headers;
    this.protocolVersion = protocolVersion;
    this._mutable = _mutable;
    this._noFoldingHeaders = _noFoldingHeaders;
    this._contentLength = _contentLength;
    this._persistentConnection = _persistentConnection;
    this._chunkedTransferEncoding = _chunkedTransferEncoding;
    this._io$_host = _io$_host;
    this._io$_port = _io$_port;
    this._defaultPortForScheme = _defaultPortForScheme;
  }
  _HttpHeaders.builtin$cls = "_HttpHeaders";
  if (!"name" in _HttpHeaders)
    _HttpHeaders.name = "_HttpHeaders";
  $desc = $collectedClasses._HttpHeaders;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders.prototype = $desc;
  function _HttpHeaders__addAll_closure(this_0, name_1) {
    this.this_0 = this_0;
    this.name_1 = name_1;
  }
  _HttpHeaders__addAll_closure.builtin$cls = "_HttpHeaders__addAll_closure";
  if (!"name" in _HttpHeaders__addAll_closure)
    _HttpHeaders__addAll_closure.name = "_HttpHeaders__addAll_closure";
  $desc = $collectedClasses._HttpHeaders__addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__addAll_closure.prototype = $desc;
  function _HttpHeaders__write_write(box_0, buffer_1) {
    this.box_0 = box_0;
    this.buffer_1 = buffer_1;
  }
  _HttpHeaders__write_write.builtin$cls = "_HttpHeaders__write_write";
  if (!"name" in _HttpHeaders__write_write)
    _HttpHeaders__write_write.name = "_HttpHeaders__write_write";
  $desc = $collectedClasses._HttpHeaders__write_write;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__write_write.prototype = $desc;
  function _HttpHeaders_toString_closure(this_0, sb_1) {
    this.this_0 = this_0;
    this.sb_1 = sb_1;
  }
  _HttpHeaders_toString_closure.builtin$cls = "_HttpHeaders_toString_closure";
  if (!"name" in _HttpHeaders_toString_closure)
    _HttpHeaders_toString_closure.name = "_HttpHeaders_toString_closure";
  $desc = $collectedClasses._HttpHeaders_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders_toString_closure.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString(cookies_1) {
    this.cookies_1 = cookies_1;
  }
  _HttpHeaders__parseCookies_parseCookieString.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString)
    _HttpHeaders__parseCookies_parseCookieString.name = "_HttpHeaders__parseCookies_parseCookieString";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString_done(box_0, s_2) {
    this.box_0 = box_0;
    this.s_2 = s_2;
  }
  _HttpHeaders__parseCookies_parseCookieString_done.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString_done";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString_done)
    _HttpHeaders__parseCookies_parseCookieString_done.name = "_HttpHeaders__parseCookies_parseCookieString_done";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString_done;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString_done.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString_skipWS(box_0, s_3, done_4) {
    this.box_0 = box_0;
    this.s_3 = s_3;
    this.done_4 = done_4;
  }
  _HttpHeaders__parseCookies_parseCookieString_skipWS.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString_skipWS";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString_skipWS)
    _HttpHeaders__parseCookies_parseCookieString_skipWS.name = "_HttpHeaders__parseCookies_parseCookieString_skipWS";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString_skipWS;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString_skipWS.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString_parseName(box_0, s_5, done_6) {
    this.box_0 = box_0;
    this.s_5 = s_5;
    this.done_6 = done_6;
  }
  _HttpHeaders__parseCookies_parseCookieString_parseName.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString_parseName";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString_parseName)
    _HttpHeaders__parseCookies_parseCookieString_parseName.name = "_HttpHeaders__parseCookies_parseCookieString_parseName";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString_parseName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString_parseName.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString_parseValue(box_0, s_7, done_8) {
    this.box_0 = box_0;
    this.s_7 = s_7;
    this.done_8 = done_8;
  }
  _HttpHeaders__parseCookies_parseCookieString_parseValue.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString_parseValue";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString_parseValue)
    _HttpHeaders__parseCookies_parseCookieString_parseValue.name = "_HttpHeaders__parseCookies_parseCookieString_parseValue";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString_parseValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString_parseValue.prototype = $desc;
  function _HttpHeaders__parseCookies_parseCookieString_expect(box_0, s_9, done_10) {
    this.box_0 = box_0;
    this.s_9 = s_9;
    this.done_10 = done_10;
  }
  _HttpHeaders__parseCookies_parseCookieString_expect.builtin$cls = "_HttpHeaders__parseCookies_parseCookieString_expect";
  if (!"name" in _HttpHeaders__parseCookies_parseCookieString_expect)
    _HttpHeaders__parseCookies_parseCookieString_expect.name = "_HttpHeaders__parseCookies_parseCookieString_expect";
  $desc = $collectedClasses._HttpHeaders__parseCookies_parseCookieString_expect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_parseCookieString_expect.prototype = $desc;
  function _HttpHeaders__parseCookies_closure(parseCookieString_11) {
    this.parseCookieString_11 = parseCookieString_11;
  }
  _HttpHeaders__parseCookies_closure.builtin$cls = "_HttpHeaders__parseCookies_closure";
  if (!"name" in _HttpHeaders__parseCookies_closure)
    _HttpHeaders__parseCookies_closure.name = "_HttpHeaders__parseCookies_closure";
  $desc = $collectedClasses._HttpHeaders__parseCookies_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpHeaders__parseCookies_closure.prototype = $desc;
  function _HeaderValue() {
  }
  _HeaderValue.builtin$cls = "_HeaderValue";
  if (!"name" in _HeaderValue)
    _HeaderValue.name = "_HeaderValue";
  $desc = $collectedClasses._HeaderValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue.prototype = $desc;
  function _HeaderValue_toString_closure(sb_0) {
    this.sb_0 = sb_0;
  }
  _HeaderValue_toString_closure.builtin$cls = "_HeaderValue_toString_closure";
  if (!"name" in _HeaderValue_toString_closure)
    _HeaderValue_toString_closure.name = "_HeaderValue_toString_closure";
  $desc = $collectedClasses._HeaderValue_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue_toString_closure.prototype = $desc;
  function _HeaderValue__parse_done(box_0, s_1) {
    this.box_0 = box_0;
    this.s_1 = s_1;
  }
  _HeaderValue__parse_done.builtin$cls = "_HeaderValue__parse_done";
  if (!"name" in _HeaderValue__parse_done)
    _HeaderValue__parse_done.name = "_HeaderValue__parse_done";
  $desc = $collectedClasses._HeaderValue__parse_done;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_done.prototype = $desc;
  function _HeaderValue__parse_skipWS(box_0, s_2, done_3) {
    this.box_0 = box_0;
    this.s_2 = s_2;
    this.done_3 = done_3;
  }
  _HeaderValue__parse_skipWS.builtin$cls = "_HeaderValue__parse_skipWS";
  if (!"name" in _HeaderValue__parse_skipWS)
    _HeaderValue__parse_skipWS.name = "_HeaderValue__parse_skipWS";
  $desc = $collectedClasses._HeaderValue__parse_skipWS;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_skipWS.prototype = $desc;
  function _HeaderValue__parse_parseValue(box_0, s_4, parameterSeparator_5, done_6) {
    this.box_0 = box_0;
    this.s_4 = s_4;
    this.parameterSeparator_5 = parameterSeparator_5;
    this.done_6 = done_6;
  }
  _HeaderValue__parse_parseValue.builtin$cls = "_HeaderValue__parse_parseValue";
  if (!"name" in _HeaderValue__parse_parseValue)
    _HeaderValue__parse_parseValue.name = "_HeaderValue__parse_parseValue";
  $desc = $collectedClasses._HeaderValue__parse_parseValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_parseValue.prototype = $desc;
  function _HeaderValue__parse_expect(box_0, s_7, done_8) {
    this.box_0 = box_0;
    this.s_7 = s_7;
    this.done_8 = done_8;
  }
  _HeaderValue__parse_expect.builtin$cls = "_HeaderValue__parse_expect";
  if (!"name" in _HeaderValue__parse_expect)
    _HeaderValue__parse_expect.name = "_HeaderValue__parse_expect";
  $desc = $collectedClasses._HeaderValue__parse_expect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_expect.prototype = $desc;
  function _HeaderValue__parse_maybeExpect(box_0, s_9) {
    this.box_0 = box_0;
    this.s_9 = s_9;
  }
  _HeaderValue__parse_maybeExpect.builtin$cls = "_HeaderValue__parse_maybeExpect";
  if (!"name" in _HeaderValue__parse_maybeExpect)
    _HeaderValue__parse_maybeExpect.name = "_HeaderValue__parse_maybeExpect";
  $desc = $collectedClasses._HeaderValue__parse_maybeExpect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_maybeExpect.prototype = $desc;
  function _HeaderValue__parse_parseParameters(box_0, this_10, s_11, parameterSeparator_12, preserveBackslash_13, done_14, skipWS_15, parseValue_16, expect_17) {
    this.box_0 = box_0;
    this.this_10 = this_10;
    this.s_11 = s_11;
    this.parameterSeparator_12 = parameterSeparator_12;
    this.preserveBackslash_13 = preserveBackslash_13;
    this.done_14 = done_14;
    this.skipWS_15 = skipWS_15;
    this.parseValue_16 = parseValue_16;
    this.expect_17 = expect_17;
  }
  _HeaderValue__parse_parseParameters.builtin$cls = "_HeaderValue__parse_parseParameters";
  if (!"name" in _HeaderValue__parse_parseParameters)
    _HeaderValue__parse_parseParameters.name = "_HeaderValue__parse_parseParameters";
  $desc = $collectedClasses._HeaderValue__parse_parseParameters;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_parseParameters.prototype = $desc;
  function _HeaderValue__parse_parseParameters_parseParameterName(box_0, s_18, done_19) {
    this.box_0 = box_0;
    this.s_18 = s_18;
    this.done_19 = done_19;
  }
  _HeaderValue__parse_parseParameters_parseParameterName.builtin$cls = "_HeaderValue__parse_parseParameters_parseParameterName";
  if (!"name" in _HeaderValue__parse_parseParameters_parseParameterName)
    _HeaderValue__parse_parseParameters_parseParameterName.name = "_HeaderValue__parse_parseParameters_parseParameterName";
  $desc = $collectedClasses._HeaderValue__parse_parseParameters_parseParameterName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_parseParameters_parseParameterName.prototype = $desc;
  function _HeaderValue__parse_parseParameters_parseParameterValue(box_0, s_20, preserveBackslash_21, done_22, parseValue_23) {
    this.box_0 = box_0;
    this.s_20 = s_20;
    this.preserveBackslash_21 = preserveBackslash_21;
    this.done_22 = done_22;
    this.parseValue_23 = parseValue_23;
  }
  _HeaderValue__parse_parseParameters_parseParameterValue.builtin$cls = "_HeaderValue__parse_parseParameters_parseParameterValue";
  if (!"name" in _HeaderValue__parse_parseParameters_parseParameterValue)
    _HeaderValue__parse_parseParameters_parseParameterValue.name = "_HeaderValue__parse_parseParameters_parseParameterValue";
  $desc = $collectedClasses._HeaderValue__parse_parseParameters_parseParameterValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HeaderValue__parse_parseParameters_parseParameterValue.prototype = $desc;
  function _ContentType(_primaryType, _subType, _io$_value, _parameters) {
    this._primaryType = _primaryType;
    this._subType = _subType;
    this._io$_value = _io$_value;
    this._parameters = _parameters;
  }
  _ContentType.builtin$cls = "_ContentType";
  if (!"name" in _ContentType)
    _ContentType.name = "_ContentType";
  $desc = $collectedClasses._ContentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ContentType.prototype = $desc;
  function _Cookie(name, value, expires, maxAge, domain, path, httpOnly, secure) {
    this.name = name;
    this.value = value;
    this.expires = expires;
    this.maxAge = maxAge;
    this.domain = domain;
    this.path = path;
    this.httpOnly = httpOnly;
    this.secure = secure;
  }
  _Cookie.builtin$cls = "_Cookie";
  if (!"name" in _Cookie)
    _Cookie.name = "_Cookie";
  $desc = $collectedClasses._Cookie;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Cookie.prototype = $desc;
  _Cookie.prototype.get$name = function() {
    return this.name;
  };
  _Cookie.prototype.get$value = function() {
    return this.value;
  };
  function _UnmodifiableMap(_io$_map) {
    this._io$_map = _io$_map;
  }
  _UnmodifiableMap.builtin$cls = "_UnmodifiableMap";
  if (!"name" in _UnmodifiableMap)
    _UnmodifiableMap.name = "_UnmodifiableMap";
  $desc = $collectedClasses._UnmodifiableMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UnmodifiableMap.prototype = $desc;
  function _HttpIncoming(_transferLength, _dataCompleter, _stream, fullBodyRead, headers, upgraded, statusCode, reasonPhrase, method, uri, hasSubscriber) {
    this._transferLength = _transferLength;
    this._dataCompleter = _dataCompleter;
    this._stream = _stream;
    this.fullBodyRead = fullBodyRead;
    this.headers = headers;
    this.upgraded = upgraded;
    this.statusCode = statusCode;
    this.reasonPhrase = reasonPhrase;
    this.method = method;
    this.uri = uri;
    this.hasSubscriber = hasSubscriber;
  }
  _HttpIncoming.builtin$cls = "_HttpIncoming";
  if (!"name" in _HttpIncoming)
    _HttpIncoming.name = "_HttpIncoming";
  $desc = $collectedClasses._HttpIncoming;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpIncoming.prototype = $desc;
  _HttpIncoming.prototype.get$uri = function() {
    return this.uri;
  };
  function _HttpIncoming_listen_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpIncoming_listen_closure.builtin$cls = "_HttpIncoming_listen_closure";
  if (!"name" in _HttpIncoming_listen_closure)
    _HttpIncoming_listen_closure.name = "_HttpIncoming_listen_closure";
  $desc = $collectedClasses._HttpIncoming_listen_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpIncoming_listen_closure.prototype = $desc;
  function _HttpInboundMessage() {
  }
  _HttpInboundMessage.builtin$cls = "_HttpInboundMessage";
  if (!"name" in _HttpInboundMessage)
    _HttpInboundMessage.name = "_HttpInboundMessage";
  $desc = $collectedClasses._HttpInboundMessage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpInboundMessage.prototype = $desc;
  function _HttpRequest(response, _httpServer, _httpConnection, _session, _requestedUri, _incoming, _cookies) {
    this.response = response;
    this._httpServer = _httpServer;
    this._httpConnection = _httpConnection;
    this._session = _session;
    this._requestedUri = _requestedUri;
    this._incoming = _incoming;
    this._cookies = _cookies;
  }
  _HttpRequest.builtin$cls = "_HttpRequest";
  if (!"name" in _HttpRequest)
    _HttpRequest.name = "_HttpRequest";
  $desc = $collectedClasses._HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpRequest.prototype = $desc;
  _HttpRequest.prototype.get$response = function() {
    return this.response;
  };
  function _HttpRequest_closure() {
  }
  _HttpRequest_closure.builtin$cls = "_HttpRequest_closure";
  if (!"name" in _HttpRequest_closure)
    _HttpRequest_closure.name = "_HttpRequest_closure";
  $desc = $collectedClasses._HttpRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpRequest_closure.prototype = $desc;
  function _HttpRequest_closure0() {
  }
  _HttpRequest_closure0.builtin$cls = "_HttpRequest_closure0";
  if (!"name" in _HttpRequest_closure0)
    _HttpRequest_closure0.name = "_HttpRequest_closure0";
  $desc = $collectedClasses._HttpRequest_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpRequest_closure0.prototype = $desc;
  function _HttpOutboundMessage() {
  }
  _HttpOutboundMessage.builtin$cls = "_HttpOutboundMessage";
  if (!"name" in _HttpOutboundMessage)
    _HttpOutboundMessage.name = "_HttpOutboundMessage";
  $desc = $collectedClasses._HttpOutboundMessage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutboundMessage.prototype = $desc;
  function _HttpResponse(_statusCode, _reasonPhrase, _cookies, _httpRequest, _deadline, _deadlineTimer, _encodingSet, _uri, _outgoing, headers, _encoding, _encodingMutable, _io$_target, _doneCompleter, _io$_doneFuture, _controllerInstance, _controllerCompleter, _isClosed, _isBound, _io$_hasError) {
    this._statusCode = _statusCode;
    this._reasonPhrase = _reasonPhrase;
    this._cookies = _cookies;
    this._httpRequest = _httpRequest;
    this._deadline = _deadline;
    this._deadlineTimer = _deadlineTimer;
    this._encodingSet = _encodingSet;
    this._uri = _uri;
    this._outgoing = _outgoing;
    this.headers = headers;
    this._encoding = _encoding;
    this._encodingMutable = _encodingMutable;
    this._io$_target = _io$_target;
    this._doneCompleter = _doneCompleter;
    this._io$_doneFuture = _io$_doneFuture;
    this._controllerInstance = _controllerInstance;
    this._controllerCompleter = _controllerCompleter;
    this._isClosed = _isClosed;
    this._isBound = _isBound;
    this._io$_hasError = _io$_hasError;
  }
  _HttpResponse.builtin$cls = "_HttpResponse";
  if (!"name" in _HttpResponse)
    _HttpResponse.name = "_HttpResponse";
  $desc = $collectedClasses._HttpResponse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpResponse.prototype = $desc;
  _HttpResponse.prototype.get$_httpRequest = function() {
    return this._httpRequest;
  };
  function _HttpResponse_detachSocket_closure() {
  }
  _HttpResponse_detachSocket_closure.builtin$cls = "_HttpResponse_detachSocket_closure";
  if (!"name" in _HttpResponse_detachSocket_closure)
    _HttpResponse_detachSocket_closure.name = "_HttpResponse_detachSocket_closure";
  $desc = $collectedClasses._HttpResponse_detachSocket_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpResponse_detachSocket_closure.prototype = $desc;
  function _HttpResponse_deadline_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpResponse_deadline_closure.builtin$cls = "_HttpResponse_deadline_closure";
  if (!"name" in _HttpResponse_deadline_closure)
    _HttpResponse_deadline_closure.name = "_HttpResponse_deadline_closure";
  $desc = $collectedClasses._HttpResponse_deadline_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpResponse_deadline_closure.prototype = $desc;
  function _HttpResponse__writeHeader_write(box_0, buffer_1) {
    this.box_0 = box_0;
    this.buffer_1 = buffer_1;
  }
  _HttpResponse__writeHeader_write.builtin$cls = "_HttpResponse__writeHeader_write";
  if (!"name" in _HttpResponse__writeHeader_write)
    _HttpResponse__writeHeader_write.name = "_HttpResponse__writeHeader_write";
  $desc = $collectedClasses._HttpResponse__writeHeader_write;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpResponse__writeHeader_write.prototype = $desc;
  function _HttpResponse__writeHeader_closure(this_2) {
    this.this_2 = this_2;
  }
  _HttpResponse__writeHeader_closure.builtin$cls = "_HttpResponse__writeHeader_closure";
  if (!"name" in _HttpResponse__writeHeader_closure)
    _HttpResponse__writeHeader_closure.name = "_HttpResponse__writeHeader_closure";
  $desc = $collectedClasses._HttpResponse__writeHeader_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpResponse__writeHeader_closure.prototype = $desc;
  function _HttpGZipSink(_consume) {
    this._consume = _consume;
  }
  _HttpGZipSink.builtin$cls = "_HttpGZipSink";
  if (!"name" in _HttpGZipSink)
    _HttpGZipSink.name = "_HttpGZipSink";
  $desc = $collectedClasses._HttpGZipSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpGZipSink.prototype = $desc;
  function _HttpOutgoing(_doneCompleter, socket, ignoreBody, headersWritten, _buffer, _io$_length, _closeFuture, chunked, _pendingChunkedFooter, contentLength, _bytesWritten, _gzip, _gzipSink, _gzipAdd, _gzipBuffer, _gzipBufferLength, _socketError, outbound) {
    this._doneCompleter = _doneCompleter;
    this.socket = socket;
    this.ignoreBody = ignoreBody;
    this.headersWritten = headersWritten;
    this._buffer = _buffer;
    this._io$_length = _io$_length;
    this._closeFuture = _closeFuture;
    this.chunked = chunked;
    this._pendingChunkedFooter = _pendingChunkedFooter;
    this.contentLength = contentLength;
    this._bytesWritten = _bytesWritten;
    this._gzip = _gzip;
    this._gzipSink = _gzipSink;
    this._gzipAdd = _gzipAdd;
    this._gzipBuffer = _gzipBuffer;
    this._gzipBufferLength = _gzipBufferLength;
    this._socketError = _socketError;
    this.outbound = outbound;
  }
  _HttpOutgoing.builtin$cls = "_HttpOutgoing";
  if (!"name" in _HttpOutgoing)
    _HttpOutgoing.name = "_HttpOutgoing";
  $desc = $collectedClasses._HttpOutgoing;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing.prototype = $desc;
  function _HttpOutgoing_writeHeaders_write(this_0) {
    this.this_0 = this_0;
  }
  _HttpOutgoing_writeHeaders_write.builtin$cls = "_HttpOutgoing_writeHeaders_write";
  if (!"name" in _HttpOutgoing_writeHeaders_write)
    _HttpOutgoing_writeHeaders_write.name = "_HttpOutgoing_writeHeaders_write";
  $desc = $collectedClasses._HttpOutgoing_writeHeaders_write;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_writeHeaders_write.prototype = $desc;
  function _HttpOutgoing_writeHeaders_closure() {
  }
  _HttpOutgoing_writeHeaders_closure.builtin$cls = "_HttpOutgoing_writeHeaders_closure";
  if (!"name" in _HttpOutgoing_writeHeaders_closure)
    _HttpOutgoing_writeHeaders_closure.name = "_HttpOutgoing_writeHeaders_closure";
  $desc = $collectedClasses._HttpOutgoing_writeHeaders_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_writeHeaders_closure.prototype = $desc;
  function _HttpOutgoing_writeHeaders_closure0() {
  }
  _HttpOutgoing_writeHeaders_closure0.builtin$cls = "_HttpOutgoing_writeHeaders_closure0";
  if (!"name" in _HttpOutgoing_writeHeaders_closure0)
    _HttpOutgoing_writeHeaders_closure0.name = "_HttpOutgoing_writeHeaders_closure0";
  $desc = $collectedClasses._HttpOutgoing_writeHeaders_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_writeHeaders_closure0.prototype = $desc;
  function _HttpOutgoing_writeHeaders_closure1() {
  }
  _HttpOutgoing_writeHeaders_closure1.builtin$cls = "_HttpOutgoing_writeHeaders_closure1";
  if (!"name" in _HttpOutgoing_writeHeaders_closure1)
    _HttpOutgoing_writeHeaders_closure1.name = "_HttpOutgoing_writeHeaders_closure1";
  $desc = $collectedClasses._HttpOutgoing_writeHeaders_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_writeHeaders_closure1.prototype = $desc;
  function _HttpOutgoing_writeHeaders_closure2(write_1) {
    this.write_1 = write_1;
  }
  _HttpOutgoing_writeHeaders_closure2.builtin$cls = "_HttpOutgoing_writeHeaders_closure2";
  if (!"name" in _HttpOutgoing_writeHeaders_closure2)
    _HttpOutgoing_writeHeaders_closure2.name = "_HttpOutgoing_writeHeaders_closure2";
  $desc = $collectedClasses._HttpOutgoing_writeHeaders_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_writeHeaders_closure2.prototype = $desc;
  function _HttpOutgoing_addStream_closure() {
  }
  _HttpOutgoing_addStream_closure.builtin$cls = "_HttpOutgoing_addStream_closure";
  if (!"name" in _HttpOutgoing_addStream_closure)
    _HttpOutgoing_addStream_closure.name = "_HttpOutgoing_addStream_closure";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure.prototype = $desc;
  function _HttpOutgoing_addStream_closure0(this_1) {
    this.this_1 = this_1;
  }
  _HttpOutgoing_addStream_closure0.builtin$cls = "_HttpOutgoing_addStream_closure0";
  if (!"name" in _HttpOutgoing_addStream_closure0)
    _HttpOutgoing_addStream_closure0.name = "_HttpOutgoing_addStream_closure0";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure0.prototype = $desc;
  function _HttpOutgoing_addStream_closure1(box_0) {
    this.box_0 = box_0;
  }
  _HttpOutgoing_addStream_closure1.builtin$cls = "_HttpOutgoing_addStream_closure1";
  if (!"name" in _HttpOutgoing_addStream_closure1)
    _HttpOutgoing_addStream_closure1.name = "_HttpOutgoing_addStream_closure1";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure1.prototype = $desc;
  function _HttpOutgoing_addStream_closure2(box_0) {
    this.box_0 = box_0;
  }
  _HttpOutgoing_addStream_closure2.builtin$cls = "_HttpOutgoing_addStream_closure2";
  if (!"name" in _HttpOutgoing_addStream_closure2)
    _HttpOutgoing_addStream_closure2.name = "_HttpOutgoing_addStream_closure2";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure2.prototype = $desc;
  function _HttpOutgoing_addStream_onData(this_2, controller_3) {
    this.this_2 = this_2;
    this.controller_3 = controller_3;
  }
  _HttpOutgoing_addStream_onData.builtin$cls = "_HttpOutgoing_addStream_onData";
  if (!"name" in _HttpOutgoing_addStream_onData)
    _HttpOutgoing_addStream_onData.name = "_HttpOutgoing_addStream_onData";
  $desc = $collectedClasses._HttpOutgoing_addStream_onData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_onData.prototype = $desc;
  function _HttpOutgoing_addStream_closure3(this_4) {
    this.this_4 = this_4;
  }
  _HttpOutgoing_addStream_closure3.builtin$cls = "_HttpOutgoing_addStream_closure3";
  if (!"name" in _HttpOutgoing_addStream_closure3)
    _HttpOutgoing_addStream_closure3.name = "_HttpOutgoing_addStream_closure3";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure3.prototype = $desc;
  function _HttpOutgoing_addStream_closure4(this_5) {
    this.this_5 = this_5;
  }
  _HttpOutgoing_addStream_closure4.builtin$cls = "_HttpOutgoing_addStream_closure4";
  if (!"name" in _HttpOutgoing_addStream_closure4)
    _HttpOutgoing_addStream_closure4.name = "_HttpOutgoing_addStream_closure4";
  $desc = $collectedClasses._HttpOutgoing_addStream_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_addStream_closure4.prototype = $desc;
  function _HttpOutgoing_close_finalize(this_0) {
    this.this_0 = this_0;
  }
  _HttpOutgoing_close_finalize.builtin$cls = "_HttpOutgoing_close_finalize";
  if (!"name" in _HttpOutgoing_close_finalize)
    _HttpOutgoing_close_finalize.name = "_HttpOutgoing_close_finalize";
  $desc = $collectedClasses._HttpOutgoing_close_finalize;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_close_finalize.prototype = $desc;
  function _HttpOutgoing_close_finalize_closure(this_1) {
    this.this_1 = this_1;
  }
  _HttpOutgoing_close_finalize_closure.builtin$cls = "_HttpOutgoing_close_finalize_closure";
  if (!"name" in _HttpOutgoing_close_finalize_closure)
    _HttpOutgoing_close_finalize_closure.name = "_HttpOutgoing_close_finalize_closure";
  $desc = $collectedClasses._HttpOutgoing_close_finalize_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_close_finalize_closure.prototype = $desc;
  function _HttpOutgoing_close_finalize_closure0(this_2) {
    this.this_2 = this_2;
  }
  _HttpOutgoing_close_finalize_closure0.builtin$cls = "_HttpOutgoing_close_finalize_closure0";
  if (!"name" in _HttpOutgoing_close_finalize_closure0)
    _HttpOutgoing_close_finalize_closure0.name = "_HttpOutgoing_close_finalize_closure0";
  $desc = $collectedClasses._HttpOutgoing_close_finalize_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_close_finalize_closure0.prototype = $desc;
  function _HttpOutgoing_gzip_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpOutgoing_gzip_closure.builtin$cls = "_HttpOutgoing_gzip_closure";
  if (!"name" in _HttpOutgoing_gzip_closure)
    _HttpOutgoing_gzip_closure.name = "_HttpOutgoing_gzip_closure";
  $desc = $collectedClasses._HttpOutgoing_gzip_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpOutgoing_gzip_closure.prototype = $desc;
  function _HttpConnection(_socket, _httpServer, _httpParser, _io$_state, _io$_subscription, _idleTimer, _idleMark, _streamFuture, _list, _next, _previous) {
    this._socket = _socket;
    this._httpServer = _httpServer;
    this._httpParser = _httpParser;
    this._io$_state = _io$_state;
    this._io$_subscription = _io$_subscription;
    this._idleTimer = _idleTimer;
    this._idleMark = _idleMark;
    this._streamFuture = _streamFuture;
    this._list = _list;
    this._next = _next;
    this._previous = _previous;
  }
  _HttpConnection.builtin$cls = "_HttpConnection";
  if (!"name" in _HttpConnection)
    _HttpConnection.name = "_HttpConnection";
  $desc = $collectedClasses._HttpConnection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection.prototype = $desc;
  function _HttpConnection_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpConnection_closure.builtin$cls = "_HttpConnection_closure";
  if (!"name" in _HttpConnection_closure)
    _HttpConnection_closure.name = "_HttpConnection_closure";
  $desc = $collectedClasses._HttpConnection_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection_closure.prototype = $desc;
  function _HttpConnection__closure(this_1) {
    this.this_1 = this_1;
  }
  _HttpConnection__closure.builtin$cls = "_HttpConnection__closure";
  if (!"name" in _HttpConnection__closure)
    _HttpConnection__closure.name = "_HttpConnection__closure";
  $desc = $collectedClasses._HttpConnection__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection__closure.prototype = $desc;
  function _HttpConnection__closure0(this_2, incoming_3, response_4, request_5) {
    this.this_2 = this_2;
    this.incoming_3 = incoming_3;
    this.response_4 = response_4;
    this.request_5 = request_5;
  }
  _HttpConnection__closure0.builtin$cls = "_HttpConnection__closure0";
  if (!"name" in _HttpConnection__closure0)
    _HttpConnection__closure0.name = "_HttpConnection__closure0";
  $desc = $collectedClasses._HttpConnection__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection__closure0.prototype = $desc;
  function _HttpConnection__closure1(this_6) {
    this.this_6 = this_6;
  }
  _HttpConnection__closure1.builtin$cls = "_HttpConnection__closure1";
  if (!"name" in _HttpConnection__closure1)
    _HttpConnection__closure1.name = "_HttpConnection__closure1";
  $desc = $collectedClasses._HttpConnection__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection__closure1.prototype = $desc;
  function _HttpConnection_closure0(this_7) {
    this.this_7 = this_7;
  }
  _HttpConnection_closure0.builtin$cls = "_HttpConnection_closure0";
  if (!"name" in _HttpConnection_closure0)
    _HttpConnection_closure0.name = "_HttpConnection_closure0";
  $desc = $collectedClasses._HttpConnection_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection_closure0.prototype = $desc;
  function _HttpConnection_closure1(this_8) {
    this.this_8 = this_8;
  }
  _HttpConnection_closure1.builtin$cls = "_HttpConnection_closure1";
  if (!"name" in _HttpConnection_closure1)
    _HttpConnection_closure1.name = "_HttpConnection_closure1";
  $desc = $collectedClasses._HttpConnection_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection_closure1.prototype = $desc;
  function _HttpConnection_detachSocket_closure(this_0, detachedIncoming_1) {
    this.this_0 = this_0;
    this.detachedIncoming_1 = detachedIncoming_1;
  }
  _HttpConnection_detachSocket_closure.builtin$cls = "_HttpConnection_detachSocket_closure";
  if (!"name" in _HttpConnection_detachSocket_closure)
    _HttpConnection_detachSocket_closure.name = "_HttpConnection_detachSocket_closure";
  $desc = $collectedClasses._HttpConnection_detachSocket_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpConnection_detachSocket_closure.prototype = $desc;
  function _HttpServer(serverHeader, _idleTimeout, _idleTimer, _sessionManagerInstance, closed, _serverSocket, _closeServer, _activeConnections, _idleConnections, _controller) {
    this.serverHeader = serverHeader;
    this._idleTimeout = _idleTimeout;
    this._idleTimer = _idleTimer;
    this._sessionManagerInstance = _sessionManagerInstance;
    this.closed = closed;
    this._serverSocket = _serverSocket;
    this._closeServer = _closeServer;
    this._activeConnections = _activeConnections;
    this._idleConnections = _idleConnections;
    this._controller = _controller;
  }
  _HttpServer.builtin$cls = "_HttpServer";
  if (!"name" in _HttpServer)
    _HttpServer.name = "_HttpServer";
  $desc = $collectedClasses._HttpServer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpServer.prototype = $desc;
  function _HttpServer_bind_closure() {
  }
  _HttpServer_bind_closure.builtin$cls = "_HttpServer_bind_closure";
  if (!"name" in _HttpServer_bind_closure)
    _HttpServer_bind_closure.name = "_HttpServer_bind_closure";
  $desc = $collectedClasses._HttpServer_bind_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpServer_bind_closure.prototype = $desc;
  function _HttpServer_idleTimeout_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpServer_idleTimeout_closure.builtin$cls = "_HttpServer_idleTimeout_closure";
  if (!"name" in _HttpServer_idleTimeout_closure)
    _HttpServer_idleTimeout_closure.name = "_HttpServer_idleTimeout_closure";
  $desc = $collectedClasses._HttpServer_idleTimeout_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpServer_idleTimeout_closure.prototype = $desc;
  function _HttpServer_listen_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpServer_listen_closure.builtin$cls = "_HttpServer_listen_closure";
  if (!"name" in _HttpServer_listen_closure)
    _HttpServer_listen_closure.name = "_HttpServer_listen_closure";
  $desc = $collectedClasses._HttpServer_listen_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpServer_listen_closure.prototype = $desc;
  function _HttpServer_listen_closure0(this_1) {
    this.this_1 = this_1;
  }
  _HttpServer_listen_closure0.builtin$cls = "_HttpServer_listen_closure0";
  if (!"name" in _HttpServer_listen_closure0)
    _HttpServer_listen_closure0.name = "_HttpServer_listen_closure0";
  $desc = $collectedClasses._HttpServer_listen_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpServer_listen_closure0.prototype = $desc;
  function _DetachedSocket(_incoming, _socket) {
    this._incoming = _incoming;
    this._socket = _socket;
  }
  _DetachedSocket.builtin$cls = "_DetachedSocket";
  if (!"name" in _DetachedSocket)
    _DetachedSocket.name = "_DetachedSocket";
  $desc = $collectedClasses._DetachedSocket;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DetachedSocket.prototype = $desc;
  function _HttpDetachedStreamSubscription(_io$_subscription, _injectData, _isCanceled, _pauseCount, _userOnData, _scheduled) {
    this._io$_subscription = _io$_subscription;
    this._injectData = _injectData;
    this._isCanceled = _isCanceled;
    this._pauseCount = _pauseCount;
    this._userOnData = _userOnData;
    this._scheduled = _scheduled;
  }
  _HttpDetachedStreamSubscription.builtin$cls = "_HttpDetachedStreamSubscription";
  if (!"name" in _HttpDetachedStreamSubscription)
    _HttpDetachedStreamSubscription.name = "_HttpDetachedStreamSubscription";
  $desc = $collectedClasses._HttpDetachedStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpDetachedStreamSubscription.prototype = $desc;
  function _HttpDetachedStreamSubscription__maybeScheduleData_closure(this_0) {
    this.this_0 = this_0;
  }
  _HttpDetachedStreamSubscription__maybeScheduleData_closure.builtin$cls = "_HttpDetachedStreamSubscription__maybeScheduleData_closure";
  if (!"name" in _HttpDetachedStreamSubscription__maybeScheduleData_closure)
    _HttpDetachedStreamSubscription__maybeScheduleData_closure.name = "_HttpDetachedStreamSubscription__maybeScheduleData_closure";
  $desc = $collectedClasses._HttpDetachedStreamSubscription__maybeScheduleData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpDetachedStreamSubscription__maybeScheduleData_closure.prototype = $desc;
  function _HttpDetachedIncoming(subscription, bufferedData) {
    this.subscription = subscription;
    this.bufferedData = bufferedData;
  }
  _HttpDetachedIncoming.builtin$cls = "_HttpDetachedIncoming";
  if (!"name" in _HttpDetachedIncoming)
    _HttpDetachedIncoming.name = "_HttpDetachedIncoming";
  $desc = $collectedClasses._HttpDetachedIncoming;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpDetachedIncoming.prototype = $desc;
  function _HttpParser(_parserCalled, _buffer, _io$_index, _requestParser, _io$_state, _httpVersionIndex, _messageType, _statusCode, _statusCodeLength, _io$_method, _uri_or_reason_phrase, _headerField, _headerValue, _httpVersion, _transferLength, _persistentConnection, _connectionUpgrade, _chunked, _noMessageBody, _remainingContent, _headers, _incoming, _socketSubscription, _paused, _bodyPaused, _controller, _bodyController) {
    this._parserCalled = _parserCalled;
    this._buffer = _buffer;
    this._io$_index = _io$_index;
    this._requestParser = _requestParser;
    this._io$_state = _io$_state;
    this._httpVersionIndex = _httpVersionIndex;
    this._messageType = _messageType;
    this._statusCode = _statusCode;
    this._statusCodeLength = _statusCodeLength;
    this._io$_method = _io$_method;
    this._uri_or_reason_phrase = _uri_or_reason_phrase;
    this._headerField = _headerField;
    this._headerValue = _headerValue;
    this._httpVersion = _httpVersion;
    this._transferLength = _transferLength;
    this._persistentConnection = _persistentConnection;
    this._connectionUpgrade = _connectionUpgrade;
    this._chunked = _chunked;
    this._noMessageBody = _noMessageBody;
    this._remainingContent = _remainingContent;
    this._headers = _headers;
    this._incoming = _incoming;
    this._socketSubscription = _socketSubscription;
    this._paused = _paused;
    this._bodyPaused = _bodyPaused;
    this._controller = _controller;
    this._bodyController = _bodyController;
  }
  _HttpParser.builtin$cls = "_HttpParser";
  if (!"name" in _HttpParser)
    _HttpParser.name = "_HttpParser";
  $desc = $collectedClasses._HttpParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser.prototype = $desc;
  function _HttpParser$__closure0(this_0) {
    this.this_0 = this_0;
  }
  _HttpParser$__closure0.builtin$cls = "_HttpParser$__closure0";
  if (!"name" in _HttpParser$__closure0)
    _HttpParser$__closure0.name = "_HttpParser$__closure0";
  $desc = $collectedClasses._HttpParser$__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser$__closure0.prototype = $desc;
  function _HttpParser$__closure1(this_1) {
    this.this_1 = this_1;
  }
  _HttpParser$__closure1.builtin$cls = "_HttpParser$__closure1";
  if (!"name" in _HttpParser$__closure1)
    _HttpParser$__closure1.name = "_HttpParser$__closure1";
  $desc = $collectedClasses._HttpParser$__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser$__closure1.prototype = $desc;
  function _HttpParser$__closure2(this_2) {
    this.this_2 = this_2;
  }
  _HttpParser$__closure2.builtin$cls = "_HttpParser$__closure2";
  if (!"name" in _HttpParser$__closure2)
    _HttpParser$__closure2.name = "_HttpParser$__closure2";
  $desc = $collectedClasses._HttpParser$__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser$__closure2.prototype = $desc;
  function _HttpParser$__closure(this_3) {
    this.this_3 = this_3;
  }
  _HttpParser$__closure.builtin$cls = "_HttpParser$__closure";
  if (!"name" in _HttpParser$__closure)
    _HttpParser$__closure.name = "_HttpParser$__closure";
  $desc = $collectedClasses._HttpParser$__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser$__closure.prototype = $desc;
  function _HttpParser__createIncoming_closure0(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _HttpParser__createIncoming_closure0.builtin$cls = "_HttpParser__createIncoming_closure0";
  if (!"name" in _HttpParser__createIncoming_closure0)
    _HttpParser__createIncoming_closure0.name = "_HttpParser__createIncoming_closure0";
  $desc = $collectedClasses._HttpParser__createIncoming_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser__createIncoming_closure0.prototype = $desc;
  function _HttpParser__createIncoming_closure1(box_0, this_2) {
    this.box_0 = box_0;
    this.this_2 = this_2;
  }
  _HttpParser__createIncoming_closure1.builtin$cls = "_HttpParser__createIncoming_closure1";
  if (!"name" in _HttpParser__createIncoming_closure1)
    _HttpParser__createIncoming_closure1.name = "_HttpParser__createIncoming_closure1";
  $desc = $collectedClasses._HttpParser__createIncoming_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser__createIncoming_closure1.prototype = $desc;
  function _HttpParser__createIncoming_closure2(box_0, this_3) {
    this.box_0 = box_0;
    this.this_3 = this_3;
  }
  _HttpParser__createIncoming_closure2.builtin$cls = "_HttpParser__createIncoming_closure2";
  if (!"name" in _HttpParser__createIncoming_closure2)
    _HttpParser__createIncoming_closure2.name = "_HttpParser__createIncoming_closure2";
  $desc = $collectedClasses._HttpParser__createIncoming_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser__createIncoming_closure2.prototype = $desc;
  function _HttpParser__createIncoming_closure(box_0, this_4) {
    this.box_0 = box_0;
    this.this_4 = this_4;
  }
  _HttpParser__createIncoming_closure.builtin$cls = "_HttpParser__createIncoming_closure";
  if (!"name" in _HttpParser__createIncoming_closure)
    _HttpParser__createIncoming_closure.name = "_HttpParser__createIncoming_closure";
  $desc = $collectedClasses._HttpParser__createIncoming_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpParser__createIncoming_closure.prototype = $desc;
  function _HttpSessionManager(_sessions, _sessionTimeout, _io$_head, _io$_tail, _timer) {
    this._sessions = _sessions;
    this._sessionTimeout = _sessionTimeout;
    this._io$_head = _io$_head;
    this._io$_tail = _io$_tail;
    this._timer = _timer;
  }
  _HttpSessionManager.builtin$cls = "_HttpSessionManager";
  if (!"name" in _HttpSessionManager)
    _HttpSessionManager.name = "_HttpSessionManager";
  $desc = $collectedClasses._HttpSessionManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HttpSessionManager.prototype = $desc;
  function _StreamSinkImpl(_io$_target, _doneCompleter, _io$_doneFuture, _controllerInstance, _controllerCompleter, _isClosed, _isBound, _io$_hasError) {
    this._io$_target = _io$_target;
    this._doneCompleter = _doneCompleter;
    this._io$_doneFuture = _io$_doneFuture;
    this._controllerInstance = _controllerInstance;
    this._controllerCompleter = _controllerCompleter;
    this._isClosed = _isClosed;
    this._isBound = _isBound;
    this._io$_hasError = _io$_hasError;
  }
  _StreamSinkImpl.builtin$cls = "_StreamSinkImpl";
  if (!"name" in _StreamSinkImpl)
    _StreamSinkImpl.name = "_StreamSinkImpl";
  $desc = $collectedClasses._StreamSinkImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl.prototype = $desc;
  function _StreamSinkImpl_addStream_targetAddStream(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamSinkImpl_addStream_targetAddStream.builtin$cls = "_StreamSinkImpl_addStream_targetAddStream";
  if (!"name" in _StreamSinkImpl_addStream_targetAddStream)
    _StreamSinkImpl_addStream_targetAddStream.name = "_StreamSinkImpl_addStream_targetAddStream";
  $desc = $collectedClasses._StreamSinkImpl_addStream_targetAddStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl_addStream_targetAddStream.prototype = $desc;
  function _StreamSinkImpl_addStream_targetAddStream_closure(this_2) {
    this.this_2 = this_2;
  }
  _StreamSinkImpl_addStream_targetAddStream_closure.builtin$cls = "_StreamSinkImpl_addStream_targetAddStream_closure";
  if (!"name" in _StreamSinkImpl_addStream_targetAddStream_closure)
    _StreamSinkImpl_addStream_targetAddStream_closure.name = "_StreamSinkImpl_addStream_targetAddStream_closure";
  $desc = $collectedClasses._StreamSinkImpl_addStream_targetAddStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl_addStream_targetAddStream_closure.prototype = $desc;
  function _StreamSinkImpl_addStream_closure(targetAddStream_3) {
    this.targetAddStream_3 = targetAddStream_3;
  }
  _StreamSinkImpl_addStream_closure.builtin$cls = "_StreamSinkImpl_addStream_closure";
  if (!"name" in _StreamSinkImpl_addStream_closure)
    _StreamSinkImpl_addStream_closure.name = "_StreamSinkImpl_addStream_closure";
  $desc = $collectedClasses._StreamSinkImpl_addStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl_addStream_closure.prototype = $desc;
  function _StreamSinkImpl__closeTarget_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamSinkImpl__closeTarget_closure.builtin$cls = "_StreamSinkImpl__closeTarget_closure";
  if (!"name" in _StreamSinkImpl__closeTarget_closure)
    _StreamSinkImpl__closeTarget_closure.name = "_StreamSinkImpl__closeTarget_closure";
  $desc = $collectedClasses._StreamSinkImpl__closeTarget_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl__closeTarget_closure.prototype = $desc;
  function _StreamSinkImpl__closeTarget_closure0(this_1) {
    this.this_1 = this_1;
  }
  _StreamSinkImpl__closeTarget_closure0.builtin$cls = "_StreamSinkImpl__closeTarget_closure0";
  if (!"name" in _StreamSinkImpl__closeTarget_closure0)
    _StreamSinkImpl__closeTarget_closure0.name = "_StreamSinkImpl__closeTarget_closure0";
  $desc = $collectedClasses._StreamSinkImpl__closeTarget_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl__closeTarget_closure0.prototype = $desc;
  function _StreamSinkImpl__controller_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamSinkImpl__controller_closure.builtin$cls = "_StreamSinkImpl__controller_closure";
  if (!"name" in _StreamSinkImpl__controller_closure)
    _StreamSinkImpl__controller_closure.name = "_StreamSinkImpl__controller_closure";
  $desc = $collectedClasses._StreamSinkImpl__controller_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl__controller_closure.prototype = $desc;
  function _StreamSinkImpl__controller_closure0(this_1) {
    this.this_1 = this_1;
  }
  _StreamSinkImpl__controller_closure0.builtin$cls = "_StreamSinkImpl__controller_closure0";
  if (!"name" in _StreamSinkImpl__controller_closure0)
    _StreamSinkImpl__controller_closure0.name = "_StreamSinkImpl__controller_closure0";
  $desc = $collectedClasses._StreamSinkImpl__controller_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamSinkImpl__controller_closure0.prototype = $desc;
  function _IOSinkImpl() {
  }
  _IOSinkImpl.builtin$cls = "_IOSinkImpl";
  if (!"name" in _IOSinkImpl)
    _IOSinkImpl.name = "_IOSinkImpl";
  $desc = $collectedClasses._IOSinkImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IOSinkImpl.prototype = $desc;
  function SocketOption(_io$_value) {
    this._io$_value = _io$_value;
  }
  SocketOption.builtin$cls = "SocketOption";
  if (!"name" in SocketOption)
    SocketOption.name = "SocketOption";
  $desc = $collectedClasses.SocketOption;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SocketOption.prototype = $desc;
  function Socket() {
  }
  Socket.builtin$cls = "Socket";
  if (!"name" in Socket)
    Socket.name = "Socket";
  $desc = $collectedClasses.Socket;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Socket.prototype = $desc;
  function WebSocketException(message) {
    this.message = message;
  }
  WebSocketException.builtin$cls = "WebSocketException";
  if (!"name" in WebSocketException)
    WebSocketException.name = "WebSocketException";
  $desc = $collectedClasses.WebSocketException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebSocketException.prototype = $desc;
  WebSocketException.prototype.get$message = function() {
    return this.message;
  };
  function _WebSocketProtocolTransformer(_io$_state, _fin, _opcode, _len, _masked, _remainingLenBytes, _remainingMaskingKeyBytes, _remainingPayloadBytes, _unmaskingIndex, _currentMessageType, closeCode, closeReason, _eventSink, _serverSide, _maskingBytes, _payloads) {
    this._io$_state = _io$_state;
    this._fin = _fin;
    this._opcode = _opcode;
    this._len = _len;
    this._masked = _masked;
    this._remainingLenBytes = _remainingLenBytes;
    this._remainingMaskingKeyBytes = _remainingMaskingKeyBytes;
    this._remainingPayloadBytes = _remainingPayloadBytes;
    this._unmaskingIndex = _unmaskingIndex;
    this._currentMessageType = _currentMessageType;
    this.closeCode = closeCode;
    this.closeReason = closeReason;
    this._eventSink = _eventSink;
    this._serverSide = _serverSide;
    this._maskingBytes = _maskingBytes;
    this._payloads = _payloads;
  }
  _WebSocketProtocolTransformer.builtin$cls = "_WebSocketProtocolTransformer";
  if (!"name" in _WebSocketProtocolTransformer)
    _WebSocketProtocolTransformer.name = "_WebSocketProtocolTransformer";
  $desc = $collectedClasses._WebSocketProtocolTransformer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketProtocolTransformer.prototype = $desc;
  function _WebSocketProtocolTransformer_bind_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketProtocolTransformer_bind_closure.builtin$cls = "_WebSocketProtocolTransformer_bind_closure";
  if (!"name" in _WebSocketProtocolTransformer_bind_closure)
    _WebSocketProtocolTransformer_bind_closure.name = "_WebSocketProtocolTransformer_bind_closure";
  $desc = $collectedClasses._WebSocketProtocolTransformer_bind_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketProtocolTransformer_bind_closure.prototype = $desc;
  function _WebSocketPing(payload) {
    this.payload = payload;
  }
  _WebSocketPing.builtin$cls = "_WebSocketPing";
  if (!"name" in _WebSocketPing)
    _WebSocketPing.name = "_WebSocketPing";
  $desc = $collectedClasses._WebSocketPing;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketPing.prototype = $desc;
  function _WebSocketPong(payload) {
    this.payload = payload;
  }
  _WebSocketPong.builtin$cls = "_WebSocketPong";
  if (!"name" in _WebSocketPong)
    _WebSocketPong.name = "_WebSocketPong";
  $desc = $collectedClasses._WebSocketPong;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketPong.prototype = $desc;
  function _WebSocketTransformerImpl__upgrade_upgrade(request_1, response_2) {
    this.request_1 = request_1;
    this.response_2 = response_2;
  }
  _WebSocketTransformerImpl__upgrade_upgrade.builtin$cls = "_WebSocketTransformerImpl__upgrade_upgrade";
  if (!"name" in _WebSocketTransformerImpl__upgrade_upgrade)
    _WebSocketTransformerImpl__upgrade_upgrade.name = "_WebSocketTransformerImpl__upgrade_upgrade";
  $desc = $collectedClasses._WebSocketTransformerImpl__upgrade_upgrade;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__upgrade_upgrade.prototype = $desc;
  function _WebSocketTransformerImpl__upgrade_upgrade_closure(protocol_3) {
    this.protocol_3 = protocol_3;
  }
  _WebSocketTransformerImpl__upgrade_upgrade_closure.builtin$cls = "_WebSocketTransformerImpl__upgrade_upgrade_closure";
  if (!"name" in _WebSocketTransformerImpl__upgrade_upgrade_closure)
    _WebSocketTransformerImpl__upgrade_upgrade_closure.name = "_WebSocketTransformerImpl__upgrade_upgrade_closure";
  $desc = $collectedClasses._WebSocketTransformerImpl__upgrade_upgrade_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__upgrade_upgrade_closure.prototype = $desc;
  function _WebSocketTransformerImpl__upgrade_closure(box_0, _protocolSelector_4) {
    this.box_0 = box_0;
    this._protocolSelector_4 = _protocolSelector_4;
  }
  _WebSocketTransformerImpl__upgrade_closure.builtin$cls = "_WebSocketTransformerImpl__upgrade_closure";
  if (!"name" in _WebSocketTransformerImpl__upgrade_closure)
    _WebSocketTransformerImpl__upgrade_closure.name = "_WebSocketTransformerImpl__upgrade_closure";
  $desc = $collectedClasses._WebSocketTransformerImpl__upgrade_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__upgrade_closure.prototype = $desc;
  function _WebSocketTransformerImpl__upgrade_closure0(box_0) {
    this.box_0 = box_0;
  }
  _WebSocketTransformerImpl__upgrade_closure0.builtin$cls = "_WebSocketTransformerImpl__upgrade_closure0";
  if (!"name" in _WebSocketTransformerImpl__upgrade_closure0)
    _WebSocketTransformerImpl__upgrade_closure0.name = "_WebSocketTransformerImpl__upgrade_closure0";
  $desc = $collectedClasses._WebSocketTransformerImpl__upgrade_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__upgrade_closure0.prototype = $desc;
  function _WebSocketTransformerImpl__upgrade_closure1(response_5) {
    this.response_5 = response_5;
  }
  _WebSocketTransformerImpl__upgrade_closure1.builtin$cls = "_WebSocketTransformerImpl__upgrade_closure1";
  if (!"name" in _WebSocketTransformerImpl__upgrade_closure1)
    _WebSocketTransformerImpl__upgrade_closure1.name = "_WebSocketTransformerImpl__upgrade_closure1";
  $desc = $collectedClasses._WebSocketTransformerImpl__upgrade_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__upgrade_closure1.prototype = $desc;
  function _WebSocketTransformerImpl__isUpgradeRequest_closure(box_0) {
    this.box_0 = box_0;
  }
  _WebSocketTransformerImpl__isUpgradeRequest_closure.builtin$cls = "_WebSocketTransformerImpl__isUpgradeRequest_closure";
  if (!"name" in _WebSocketTransformerImpl__isUpgradeRequest_closure)
    _WebSocketTransformerImpl__isUpgradeRequest_closure.name = "_WebSocketTransformerImpl__isUpgradeRequest_closure";
  $desc = $collectedClasses._WebSocketTransformerImpl__isUpgradeRequest_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketTransformerImpl__isUpgradeRequest_closure.prototype = $desc;
  function _WebSocketOutgoingTransformer(webSocket, _eventSink) {
    this.webSocket = webSocket;
    this._eventSink = _eventSink;
  }
  _WebSocketOutgoingTransformer.builtin$cls = "_WebSocketOutgoingTransformer";
  if (!"name" in _WebSocketOutgoingTransformer)
    _WebSocketOutgoingTransformer.name = "_WebSocketOutgoingTransformer";
  $desc = $collectedClasses._WebSocketOutgoingTransformer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketOutgoingTransformer.prototype = $desc;
  function _WebSocketOutgoingTransformer_bind_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketOutgoingTransformer_bind_closure.builtin$cls = "_WebSocketOutgoingTransformer_bind_closure";
  if (!"name" in _WebSocketOutgoingTransformer_bind_closure)
    _WebSocketOutgoingTransformer_bind_closure.name = "_WebSocketOutgoingTransformer_bind_closure";
  $desc = $collectedClasses._WebSocketOutgoingTransformer_bind_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketOutgoingTransformer_bind_closure.prototype = $desc;
  function _WebSocketConsumer(webSocket, socket, _controller, _io$_subscription, _issuedPause, _closed, _closeCompleter, _completer) {
    this.webSocket = webSocket;
    this.socket = socket;
    this._controller = _controller;
    this._io$_subscription = _io$_subscription;
    this._issuedPause = _issuedPause;
    this._closed = _closed;
    this._closeCompleter = _closeCompleter;
    this._completer = _completer;
  }
  _WebSocketConsumer.builtin$cls = "_WebSocketConsumer";
  if (!"name" in _WebSocketConsumer)
    _WebSocketConsumer.name = "_WebSocketConsumer";
  $desc = $collectedClasses._WebSocketConsumer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer.prototype = $desc;
  function _WebSocketConsumer__ensureController_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketConsumer__ensureController_closure.builtin$cls = "_WebSocketConsumer__ensureController_closure";
  if (!"name" in _WebSocketConsumer__ensureController_closure)
    _WebSocketConsumer__ensureController_closure.name = "_WebSocketConsumer__ensureController_closure";
  $desc = $collectedClasses._WebSocketConsumer__ensureController_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer__ensureController_closure.prototype = $desc;
  function _WebSocketConsumer__ensureController_closure0(this_1) {
    this.this_1 = this_1;
  }
  _WebSocketConsumer__ensureController_closure0.builtin$cls = "_WebSocketConsumer__ensureController_closure0";
  if (!"name" in _WebSocketConsumer__ensureController_closure0)
    _WebSocketConsumer__ensureController_closure0.name = "_WebSocketConsumer__ensureController_closure0";
  $desc = $collectedClasses._WebSocketConsumer__ensureController_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer__ensureController_closure0.prototype = $desc;
  function _WebSocketConsumer_addStream_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketConsumer_addStream_closure.builtin$cls = "_WebSocketConsumer_addStream_closure";
  if (!"name" in _WebSocketConsumer_addStream_closure)
    _WebSocketConsumer_addStream_closure.name = "_WebSocketConsumer_addStream_closure";
  $desc = $collectedClasses._WebSocketConsumer_addStream_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer_addStream_closure.prototype = $desc;
  function _WebSocketConsumer_close_closeSocket(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketConsumer_close_closeSocket.builtin$cls = "_WebSocketConsumer_close_closeSocket";
  if (!"name" in _WebSocketConsumer_close_closeSocket)
    _WebSocketConsumer_close_closeSocket.name = "_WebSocketConsumer_close_closeSocket";
  $desc = $collectedClasses._WebSocketConsumer_close_closeSocket;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer_close_closeSocket.prototype = $desc;
  function _WebSocketConsumer_close_closeSocket_closure() {
  }
  _WebSocketConsumer_close_closeSocket_closure.builtin$cls = "_WebSocketConsumer_close_closeSocket_closure";
  if (!"name" in _WebSocketConsumer_close_closeSocket_closure)
    _WebSocketConsumer_close_closeSocket_closure.name = "_WebSocketConsumer_close_closeSocket_closure";
  $desc = $collectedClasses._WebSocketConsumer_close_closeSocket_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer_close_closeSocket_closure.prototype = $desc;
  function _WebSocketConsumer_close_closeSocket_closure0(this_1) {
    this.this_1 = this_1;
  }
  _WebSocketConsumer_close_closeSocket_closure0.builtin$cls = "_WebSocketConsumer_close_closeSocket_closure0";
  if (!"name" in _WebSocketConsumer_close_closeSocket_closure0)
    _WebSocketConsumer_close_closeSocket_closure0.name = "_WebSocketConsumer_close_closeSocket_closure0";
  $desc = $collectedClasses._WebSocketConsumer_close_closeSocket_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer_close_closeSocket_closure0.prototype = $desc;
  function _WebSocketConsumer_close_closure(closeSocket_2) {
    this.closeSocket_2 = closeSocket_2;
  }
  _WebSocketConsumer_close_closure.builtin$cls = "_WebSocketConsumer_close_closure";
  if (!"name" in _WebSocketConsumer_close_closure)
    _WebSocketConsumer_close_closure.name = "_WebSocketConsumer_close_closure";
  $desc = $collectedClasses._WebSocketConsumer_close_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketConsumer_close_closure.prototype = $desc;
  function _WebSocketImpl(protocol, _controller, _io$_subscription, _sink, _socket, _serverSide, _readyState, _writeClosed, _closeCode, _closeReason, _pingInterval, _pingTimer, _consumer, _outCloseCode, _outCloseReason, _closeTimer) {
    this.protocol = protocol;
    this._controller = _controller;
    this._io$_subscription = _io$_subscription;
    this._sink = _sink;
    this._socket = _socket;
    this._serverSide = _serverSide;
    this._readyState = _readyState;
    this._writeClosed = _writeClosed;
    this._closeCode = _closeCode;
    this._closeReason = _closeReason;
    this._pingInterval = _pingInterval;
    this._pingTimer = _pingTimer;
    this._consumer = _consumer;
    this._outCloseCode = _outCloseCode;
    this._outCloseReason = _outCloseReason;
    this._closeTimer = _closeTimer;
  }
  _WebSocketImpl.builtin$cls = "_WebSocketImpl";
  if (!"name" in _WebSocketImpl)
    _WebSocketImpl.name = "_WebSocketImpl";
  $desc = $collectedClasses._WebSocketImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl.prototype = $desc;
  function _WebSocketImpl$_fromSocket_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketImpl$_fromSocket_closure.builtin$cls = "_WebSocketImpl$_fromSocket_closure";
  if (!"name" in _WebSocketImpl$_fromSocket_closure)
    _WebSocketImpl$_fromSocket_closure.name = "_WebSocketImpl$_fromSocket_closure";
  $desc = $collectedClasses._WebSocketImpl$_fromSocket_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl$_fromSocket_closure.prototype = $desc;
  function _WebSocketImpl$_fromSocket_closure1(this_1) {
    this.this_1 = this_1;
  }
  _WebSocketImpl$_fromSocket_closure1.builtin$cls = "_WebSocketImpl$_fromSocket_closure1";
  if (!"name" in _WebSocketImpl$_fromSocket_closure1)
    _WebSocketImpl$_fromSocket_closure1.name = "_WebSocketImpl$_fromSocket_closure1";
  $desc = $collectedClasses._WebSocketImpl$_fromSocket_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl$_fromSocket_closure1.prototype = $desc;
  function _WebSocketImpl$_fromSocket_closure0(this_2, transformer_3) {
    this.this_2 = this_2;
    this.transformer_3 = transformer_3;
  }
  _WebSocketImpl$_fromSocket_closure0.builtin$cls = "_WebSocketImpl$_fromSocket_closure0";
  if (!"name" in _WebSocketImpl$_fromSocket_closure0)
    _WebSocketImpl$_fromSocket_closure0.name = "_WebSocketImpl$_fromSocket_closure0";
  $desc = $collectedClasses._WebSocketImpl$_fromSocket_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl$_fromSocket_closure0.prototype = $desc;
  function _WebSocketImpl_pingInterval_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketImpl_pingInterval_closure.builtin$cls = "_WebSocketImpl_pingInterval_closure";
  if (!"name" in _WebSocketImpl_pingInterval_closure)
    _WebSocketImpl_pingInterval_closure.name = "_WebSocketImpl_pingInterval_closure";
  $desc = $collectedClasses._WebSocketImpl_pingInterval_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl_pingInterval_closure.prototype = $desc;
  function _WebSocketImpl_pingInterval__closure(this_1) {
    this.this_1 = this_1;
  }
  _WebSocketImpl_pingInterval__closure.builtin$cls = "_WebSocketImpl_pingInterval__closure";
  if (!"name" in _WebSocketImpl_pingInterval__closure)
    _WebSocketImpl_pingInterval__closure.name = "_WebSocketImpl_pingInterval__closure";
  $desc = $collectedClasses._WebSocketImpl_pingInterval__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl_pingInterval__closure.prototype = $desc;
  function _WebSocketImpl_close_closure(this_0) {
    this.this_0 = this_0;
  }
  _WebSocketImpl_close_closure.builtin$cls = "_WebSocketImpl_close_closure";
  if (!"name" in _WebSocketImpl_close_closure)
    _WebSocketImpl_close_closure.name = "_WebSocketImpl_close_closure";
  $desc = $collectedClasses._WebSocketImpl_close_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WebSocketImpl_close_closure.prototype = $desc;
  function Capability() {
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Capability.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function Int32x4List(_storage) {
    this._storage = _storage;
  }
  Int32x4List.builtin$cls = "Int32x4List";
  if (!"name" in Int32x4List)
    Int32x4List.name = "Int32x4List";
  $desc = $collectedClasses.Int32x4List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32x4List.prototype = $desc;
  Int32x4List.prototype.get$_storage = function() {
    return this._storage;
  };
  function Object_ListMixin() {
  }
  Object_ListMixin.builtin$cls = "Object_ListMixin";
  if (!"name" in Object_ListMixin)
    Object_ListMixin.name = "Object_ListMixin";
  $desc = $collectedClasses.Object_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_ListMixin.prototype = $desc;
  function Object_ListMixin_FixedLengthListMixin() {
  }
  Object_ListMixin_FixedLengthListMixin.builtin$cls = "Object_ListMixin_FixedLengthListMixin";
  if (!"name" in Object_ListMixin_FixedLengthListMixin)
    Object_ListMixin_FixedLengthListMixin.name = "Object_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.Object_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_ListMixin_FixedLengthListMixin.prototype = $desc;
  function Int32x4(_storage) {
    this._storage = _storage;
  }
  Int32x4.builtin$cls = "Int32x4";
  if (!"name" in Int32x4)
    Int32x4.name = "Int32x4";
  $desc = $collectedClasses.Int32x4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32x4.prototype = $desc;
  Int32x4.prototype.get$_storage = function() {
    return this._storage;
  };
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfInt() {
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfInt.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function main__closure() {
  }
  main__closure.builtin$cls = "main__closure";
  if (!"name" in main__closure)
    main__closure.name = "main__closure";
  $desc = $collectedClasses.main__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main__closure.prototype = $desc;
  function main___closure() {
  }
  main___closure.builtin$cls = "main___closure";
  if (!"name" in main___closure)
    main___closure.name = "main___closure";
  $desc = $collectedClasses.main___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main___closure.prototype = $desc;
  function main____closure() {
  }
  main____closure.builtin$cls = "main____closure";
  if (!"name" in main____closure)
    main____closure.name = "main____closure";
  $desc = $collectedClasses.main____closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main____closure.prototype = $desc;
  function main_____closure(socket_0) {
    this.socket_0 = socket_0;
  }
  main_____closure.builtin$cls = "main_____closure";
  if (!"name" in main_____closure)
    main_____closure.name = "main_____closure";
  $desc = $collectedClasses.main_____closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_____closure.prototype = $desc;
  function main_____closure0() {
  }
  main_____closure0.builtin$cls = "main_____closure0";
  if (!"name" in main_____closure0)
    main_____closure0.name = "main_____closure0";
  $desc = $collectedClasses.main_____closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_____closure0.prototype = $desc;
  function main______closure(msg_1) {
    this.msg_1 = msg_1;
  }
  main______closure.builtin$cls = "main______closure";
  if (!"name" in main______closure)
    main______closure.name = "main______closure";
  $desc = $collectedClasses.main______closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main______closure.prototype = $desc;
  function main_closure0() {
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure0.prototype = $desc;
  return [NativeByteBuffer, NativeTypedData, NativeInt32List, NativeUint32List, NativeUint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSNumber, JSInt, JSDouble, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_closure, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TimerImpl$periodic_closure, CapabilityImpl, ReflectionInfo, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, initHooks_closure, initHooks_closure0, initHooks_closure1, StringMatch, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, _AsyncError, Future, _Completer, _AsyncCompleter, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_Stream$fromIterable_closure, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_any_closure, Stream_any__closure, Stream_any__closure0, Stream_any_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_last_closure, Stream_last_closure0, StreamSubscription, EventSink, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch0, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch0, _ControllerStream, _ControllerSubscription, _AddStreamState, _AddStreamState_makeErrorHandler_closure, _StreamControllerAddStreamState, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription_asFuture_closure, _BufferingStreamSubscription_asFuture_closure0, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _GeneratedStreamImpl, _IterablePendingEvents, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _ExpandStream, _HandleErrorStream, _SkipStream, _EventSinkWrapper, _SinkTransformerStreamSubscription, _BoundSinkStream, Timer, ZoneSpecification, _ZoneSpecification, ZoneDelegate, Zone, _ZoneDelegate, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _CustomizedZone, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _rootFork_closure, _RootZoneSpecification, _RootZone, runZoned_closure, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, LinkedList, _LinkedListIterator, LinkedListEntry, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, AsciiCodec, _UnicodeSubsetEncoder, AsciiEncoder, ByteConversionSink, ByteConversionSinkBase, _ByteAdapterSink, ChunkedConversionSink, Codec, Converter, Encoding, Latin1Codec, Latin1Encoder, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_addSingleBytes, NoSuchMethodError_toString_closure, DateTime, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Iterator, Map, Null, Object, StackTrace, StringBuffer, Symbol, Uri, Uri_parse_isRegName, Uri_parse_ipV6Address, Uri__makeScheme_isSchemeLowerCharacter, Uri__makePath_closure, Uri__makeQuery_closure, Uri__normalize_isNormalizedHexDigit, Uri__normalize_isLowerCaseHexDigit, Uri__normalize_isUnreserved, Uri__normalize_normalizeHexDigit, Uri__normalize_decodeHexDigitPair, Uri__normalize_fillResult, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri_parseIPv6Address_closure, Uri__uriEncode_byteToHex, _HashBase, _SHA1, ZLibEncoder, _ZLibEncoderSink, _FilterSink, Cookie, HttpRequest, HttpResponse, HttpException, _HttpHeaders, _HttpHeaders__addAll_closure, _HttpHeaders__write_write, _HttpHeaders_toString_closure, _HttpHeaders__parseCookies_parseCookieString, _HttpHeaders__parseCookies_parseCookieString_done, _HttpHeaders__parseCookies_parseCookieString_skipWS, _HttpHeaders__parseCookies_parseCookieString_parseName, _HttpHeaders__parseCookies_parseCookieString_parseValue, _HttpHeaders__parseCookies_parseCookieString_expect, _HttpHeaders__parseCookies_closure, _HeaderValue, _HeaderValue_toString_closure, _HeaderValue__parse_done, _HeaderValue__parse_skipWS, _HeaderValue__parse_parseValue, _HeaderValue__parse_expect, _HeaderValue__parse_maybeExpect, _HeaderValue__parse_parseParameters, _HeaderValue__parse_parseParameters_parseParameterName, _HeaderValue__parse_parseParameters_parseParameterValue, _ContentType, _Cookie, _UnmodifiableMap, _HttpIncoming, _HttpIncoming_listen_closure, _HttpInboundMessage, _HttpRequest, _HttpRequest_closure, _HttpRequest_closure0, _HttpOutboundMessage, _HttpResponse, _HttpResponse_detachSocket_closure, _HttpResponse_deadline_closure, _HttpResponse__writeHeader_write, _HttpResponse__writeHeader_closure, _HttpGZipSink, _HttpOutgoing, _HttpOutgoing_writeHeaders_write, _HttpOutgoing_writeHeaders_closure, _HttpOutgoing_writeHeaders_closure0, _HttpOutgoing_writeHeaders_closure1, _HttpOutgoing_writeHeaders_closure2, _HttpOutgoing_addStream_closure, _HttpOutgoing_addStream_closure0, _HttpOutgoing_addStream_closure1, _HttpOutgoing_addStream_closure2, _HttpOutgoing_addStream_onData, _HttpOutgoing_addStream_closure3, _HttpOutgoing_addStream_closure4, _HttpOutgoing_close_finalize, _HttpOutgoing_close_finalize_closure, _HttpOutgoing_close_finalize_closure0, _HttpOutgoing_gzip_closure, _HttpConnection, _HttpConnection_closure, _HttpConnection__closure, _HttpConnection__closure0, _HttpConnection__closure1, _HttpConnection_closure0, _HttpConnection_closure1, _HttpConnection_detachSocket_closure, _HttpServer, _HttpServer_bind_closure, _HttpServer_idleTimeout_closure, _HttpServer_listen_closure, _HttpServer_listen_closure0, _DetachedSocket, _HttpDetachedStreamSubscription, _HttpDetachedStreamSubscription__maybeScheduleData_closure, _HttpDetachedIncoming, _HttpParser, _HttpParser$__closure0, _HttpParser$__closure1, _HttpParser$__closure2, _HttpParser$__closure, _HttpParser__createIncoming_closure0, _HttpParser__createIncoming_closure1, _HttpParser__createIncoming_closure2, _HttpParser__createIncoming_closure, _HttpSessionManager, _StreamSinkImpl, _StreamSinkImpl_addStream_targetAddStream, _StreamSinkImpl_addStream_targetAddStream_closure, _StreamSinkImpl_addStream_closure, _StreamSinkImpl__closeTarget_closure, _StreamSinkImpl__closeTarget_closure0, _StreamSinkImpl__controller_closure, _StreamSinkImpl__controller_closure0, _IOSinkImpl, SocketOption, Socket, WebSocketException, _WebSocketProtocolTransformer, _WebSocketProtocolTransformer_bind_closure, _WebSocketPing, _WebSocketPong, _WebSocketTransformerImpl__upgrade_upgrade, _WebSocketTransformerImpl__upgrade_upgrade_closure, _WebSocketTransformerImpl__upgrade_closure, _WebSocketTransformerImpl__upgrade_closure0, _WebSocketTransformerImpl__upgrade_closure1, _WebSocketTransformerImpl__isUpgradeRequest_closure, _WebSocketOutgoingTransformer, _WebSocketOutgoingTransformer_bind_closure, _WebSocketConsumer, _WebSocketConsumer__ensureController_closure, _WebSocketConsumer__ensureController_closure0, _WebSocketConsumer_addStream_closure, _WebSocketConsumer_close_closeSocket, _WebSocketConsumer_close_closeSocket_closure, _WebSocketConsumer_close_closeSocket_closure0, _WebSocketConsumer_close_closure, _WebSocketImpl, _WebSocketImpl$_fromSocket_closure, _WebSocketImpl$_fromSocket_closure1, _WebSocketImpl$_fromSocket_closure0, _WebSocketImpl_pingInterval_closure, _WebSocketImpl_pingInterval__closure, _WebSocketImpl_close_closure, Capability, Uint8List, Int32x4List, Object_ListMixin, Object_ListMixin_FixedLengthListMixin, Int32x4, NativeTypedArray, NativeTypedArrayOfInt, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, main_closure, main__closure, main___closure, main____closure, main_____closure, main_____closure0, main______closure, main_closure0];
}
